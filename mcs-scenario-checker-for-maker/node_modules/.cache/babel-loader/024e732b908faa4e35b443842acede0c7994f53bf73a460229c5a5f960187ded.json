{"ast":null,"code":"import { OrderByComparator } from \"../orderByComparator\";\nimport { FixedSizePriorityQueue } from \"../../utils/fixedSizePriorityQueue\";\nimport { getInitialHeader } from \"../headerUtils\";\n/**\n * @hidden\n * Represents an endpoint in handling an non-streaming order by query.\n */\nexport class NonStreamingOrderByEndpointComponent {\n  /**\n   * Represents an endpoint in handling an non-streaming order by query. For each processed orderby\n   * result it returns 'payload' item of the result\n   *\n   * @param executionContext - Underlying Execution Context\n   * @hidden\n   */\n  constructor(executionContext, sortOrders, priorityQueueBufferSize, offset = 0, emitRawOrderByPayload = false) {\n    this.executionContext = executionContext;\n    this.sortOrders = sortOrders;\n    this.priorityQueueBufferSize = priorityQueueBufferSize;\n    this.offset = offset;\n    this.emitRawOrderByPayload = emitRawOrderByPayload;\n    /**\n     * Flag to determine if all results are fetched from backend and results can be returned from priority queue.\n     */\n    this.isCompleted = false;\n    const comparator = new OrderByComparator(this.sortOrders);\n    this.nonStreamingOrderByPQ = new FixedSizePriorityQueue((a, b) => {\n      return comparator.compareItems(b, a);\n    }, this.priorityQueueBufferSize);\n  }\n  async nextItem(diagnosticNode) {\n    var _a;\n    let resHeaders = getInitialHeader();\n    // if size is 0, just return undefined to signal to more results. Valid if query is TOP 0 or LIMIT 0\n    if (this.priorityQueueBufferSize <= 0) {\n      return {\n        result: undefined,\n        headers: resHeaders\n      };\n    }\n    // If there are more results in backend, keep filling pq.\n    if (this.executionContext.hasMoreResults()) {\n      const {\n        result: item,\n        headers\n      } = await this.executionContext.nextItem(diagnosticNode);\n      resHeaders = headers;\n      if (item !== undefined) {\n        this.nonStreamingOrderByPQ.enqueue(item);\n      }\n      // If the backend has more results to fetch, return {} to signal that there are more results to fetch.\n      if (this.executionContext.hasMoreResults()) {\n        return {\n          result: {},\n          headers: resHeaders\n        };\n      }\n    }\n    // If all results are fetched from backend, prepare final results\n    if (!this.executionContext.hasMoreResults() && !this.isCompleted) {\n      // Set isCompleted to true.\n      this.isCompleted = true;\n      // Reverse the priority queue to get the results in the correct order\n      this.nonStreamingOrderByPQ = this.nonStreamingOrderByPQ.reverse();\n      // For offset limit case we set the size of priority queue to offset + limit\n      // and we drain offset number of items from the priority queue\n      while (this.offset < this.priorityQueueBufferSize && this.offset > 0 && !this.nonStreamingOrderByPQ.isEmpty()) {\n        this.nonStreamingOrderByPQ.dequeue();\n        this.offset--;\n      }\n    }\n    // If pq is not empty, return the result from pq.\n    if (!this.nonStreamingOrderByPQ.isEmpty()) {\n      let item;\n      if (this.emitRawOrderByPayload) {\n        item = this.nonStreamingOrderByPQ.dequeue();\n      } else {\n        item = (_a = this.nonStreamingOrderByPQ.dequeue()) === null || _a === void 0 ? void 0 : _a.payload;\n      }\n      return {\n        result: item,\n        headers: resHeaders\n      };\n    }\n    // If pq is empty, return undefined to signal that there are no more results.\n    return {\n      result: undefined,\n      headers: resHeaders\n    };\n  }\n  /**\n   * Determine if there are still remaining resources to processs.\n   * @returns true if there is other elements to process in the NonStreamingOrderByEndpointComponent.\n   */\n  hasMoreResults() {\n    return this.priorityQueueBufferSize > 0 && (this.executionContext.hasMoreResults() || !this.nonStreamingOrderByPQ.isEmpty());\n  }\n}","map":{"version":3,"names":["OrderByComparator","FixedSizePriorityQueue","getInitialHeader","NonStreamingOrderByEndpointComponent","constructor","executionContext","sortOrders","priorityQueueBufferSize","offset","emitRawOrderByPayload","isCompleted","comparator","nonStreamingOrderByPQ","a","b","compareItems","nextItem","diagnosticNode","resHeaders","result","undefined","headers","hasMoreResults","item","enqueue","reverse","isEmpty","dequeue","_a","payload"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/EndpointComponent/NonStreamingOrderByEndpointComponent.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport { OrderByComparator } from \"../orderByComparator\";\nimport type { NonStreamingOrderByResult } from \"../nonStreamingOrderByResult\";\nimport { FixedSizePriorityQueue } from \"../../utils/fixedSizePriorityQueue\";\nimport { getInitialHeader } from \"../headerUtils\";\n\n/**\n * @hidden\n * Represents an endpoint in handling an non-streaming order by query.\n */\nexport class NonStreamingOrderByEndpointComponent implements ExecutionContext {\n  /**\n   * A priority queue to store the final sorted results.\n   */\n  private nonStreamingOrderByPQ: FixedSizePriorityQueue<NonStreamingOrderByResult>;\n  /**\n   * Flag to determine if all results are fetched from backend and results can be returned from priority queue.\n   */\n  private isCompleted: boolean = false;\n  /**\n   * Represents an endpoint in handling an non-streaming order by query. For each processed orderby\n   * result it returns 'payload' item of the result\n   *\n   * @param executionContext - Underlying Execution Context\n   * @hidden\n   */\n  constructor(\n    private executionContext: ExecutionContext,\n    private sortOrders: any[],\n    private priorityQueueBufferSize: number,\n    private offset: number = 0,\n    private emitRawOrderByPayload: boolean = false,\n  ) {\n    const comparator = new OrderByComparator(this.sortOrders);\n    this.nonStreamingOrderByPQ = new FixedSizePriorityQueue<NonStreamingOrderByResult>(\n      (a: NonStreamingOrderByResult, b: NonStreamingOrderByResult) => {\n        return comparator.compareItems(b, a);\n      },\n      this.priorityQueueBufferSize,\n    );\n  }\n\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    let resHeaders = getInitialHeader();\n    // if size is 0, just return undefined to signal to more results. Valid if query is TOP 0 or LIMIT 0\n    if (this.priorityQueueBufferSize <= 0) {\n      return {\n        result: undefined,\n        headers: resHeaders,\n      };\n    }\n\n    // If there are more results in backend, keep filling pq.\n    if (this.executionContext.hasMoreResults()) {\n      const { result: item, headers } = await this.executionContext.nextItem(diagnosticNode);\n      resHeaders = headers;\n      if (item !== undefined) {\n        this.nonStreamingOrderByPQ.enqueue(item);\n      }\n\n      // If the backend has more results to fetch, return {} to signal that there are more results to fetch.\n      if (this.executionContext.hasMoreResults()) {\n        return {\n          result: {},\n          headers: resHeaders,\n        };\n      }\n    }\n    // If all results are fetched from backend, prepare final results\n    if (!this.executionContext.hasMoreResults() && !this.isCompleted) {\n      // Set isCompleted to true.\n      this.isCompleted = true;\n      // Reverse the priority queue to get the results in the correct order\n      this.nonStreamingOrderByPQ = this.nonStreamingOrderByPQ.reverse();\n      // For offset limit case we set the size of priority queue to offset + limit\n      // and we drain offset number of items from the priority queue\n      while (\n        this.offset < this.priorityQueueBufferSize &&\n        this.offset > 0 &&\n        !this.nonStreamingOrderByPQ.isEmpty()\n      ) {\n        this.nonStreamingOrderByPQ.dequeue();\n        this.offset--;\n      }\n    }\n    // If pq is not empty, return the result from pq.\n    if (!this.nonStreamingOrderByPQ.isEmpty()) {\n      let item;\n      if (this.emitRawOrderByPayload) {\n        item = this.nonStreamingOrderByPQ.dequeue();\n      } else {\n        item = this.nonStreamingOrderByPQ.dequeue()?.payload;\n      }\n      return {\n        result: item,\n        headers: resHeaders,\n      };\n    }\n    // If pq is empty, return undefined to signal that there are no more results.\n    return {\n      result: undefined,\n      headers: resHeaders,\n    };\n  }\n\n  /**\n   * Determine if there are still remaining resources to processs.\n   * @returns true if there is other elements to process in the NonStreamingOrderByEndpointComponent.\n   */\n  public hasMoreResults(): boolean {\n    return (\n      this.priorityQueueBufferSize > 0 &&\n      (this.executionContext.hasMoreResults() || !this.nonStreamingOrderByPQ.isEmpty())\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}