{"ast":null,"code":"import { QueryRange } from \"../../routing\";\nimport { ChangeFeedStartFrom } from \"./ChangeFeedStartFrom\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { ChangeFeedResourceType } from \"./ChangeFeedEnums\";\nimport { ChangeFeedForPartitionKey } from \"./ChangeFeedForPartitionKey\";\nimport { ErrorResponse } from \"../../request\";\nimport { ChangeFeedForEpkRange } from \"./ChangeFeedForEpkRange\";\nimport { getIdFromLink, getPathFromLink, ResourceType, Constants } from \"../../common\";\nimport { buildInternalChangeFeedOptions, fetchStartTime, isEpkRange } from \"./changeFeedUtils\";\nimport { isPartitionKey } from \"../../utils/typeChecks\";\nexport function changeFeedIteratorBuilder(cfOptions, clientContext, container, partitionKeyRangeCache) {\n  const url = container.url;\n  const path = getPathFromLink(url, ResourceType.item);\n  const id = getIdFromLink(url);\n  let changeFeedStartFrom = cfOptions.changeFeedStartFrom;\n  if (changeFeedStartFrom === undefined) {\n    changeFeedStartFrom = ChangeFeedStartFrom.Now();\n  }\n  if (changeFeedStartFrom instanceof ChangeFeedStartFromContinuation) {\n    const continuationToken = changeFeedStartFrom.getCfResourceJson();\n    const resourceType = changeFeedStartFrom.getResourceType();\n    const internalCfOptions = buildInternalChangeFeedOptions(cfOptions, changeFeedStartFrom.getCfResource());\n    if (resourceType === ChangeFeedResourceType.PartitionKey && isPartitionKey(continuationToken.partitionKey)) {\n      return new ChangeFeedForPartitionKey(clientContext, container, id, path, continuationToken.partitionKey, internalCfOptions);\n    } else if (resourceType === ChangeFeedResourceType.FeedRange) {\n      return new ChangeFeedForEpkRange(clientContext, container, partitionKeyRangeCache, id, path, url, internalCfOptions, undefined);\n    } else {\n      throw new ErrorResponse(\"Invalid continuation token.\");\n    }\n  } else if (changeFeedStartFrom instanceof ChangeFeedStartFromNow || changeFeedStartFrom instanceof ChangeFeedStartFromTime || changeFeedStartFrom instanceof ChangeFeedStartFromBeginning) {\n    const startFromNow = changeFeedStartFrom instanceof ChangeFeedStartFromNow ? true : false;\n    const startTime = startFromNow ? undefined : fetchStartTime(changeFeedStartFrom);\n    const internalCfOptions = buildInternalChangeFeedOptions(cfOptions, undefined, startTime, startFromNow);\n    const cfResource = changeFeedStartFrom.getCfResource();\n    if (isPartitionKey(cfResource)) {\n      return new ChangeFeedForPartitionKey(clientContext, container, id, path, cfResource, internalCfOptions);\n    } else {\n      let internalCfResource;\n      if (cfResource === undefined) {\n        internalCfResource = new QueryRange(Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey, Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey, true, false);\n      } else if (isEpkRange(cfResource)) {\n        internalCfResource = new QueryRange(cfResource.minInclusive, cfResource.maxExclusive, true, false);\n      } else {\n        throw new ErrorResponse(\"Invalid feed range.\");\n      }\n      return new ChangeFeedForEpkRange(clientContext, container, partitionKeyRangeCache, id, path, url, internalCfOptions, internalCfResource);\n    }\n  } else {\n    throw new ErrorResponse(\"Invalid change feed start location.\");\n  }\n}","map":{"version":3,"names":["QueryRange","ChangeFeedStartFrom","ChangeFeedStartFromBeginning","ChangeFeedStartFromContinuation","ChangeFeedStartFromNow","ChangeFeedStartFromTime","ChangeFeedResourceType","ChangeFeedForPartitionKey","ErrorResponse","ChangeFeedForEpkRange","getIdFromLink","getPathFromLink","ResourceType","Constants","buildInternalChangeFeedOptions","fetchStartTime","isEpkRange","isPartitionKey","changeFeedIteratorBuilder","cfOptions","clientContext","container","partitionKeyRangeCache","url","path","item","id","changeFeedStartFrom","undefined","Now","continuationToken","getCfResourceJson","resourceType","getResourceType","internalCfOptions","getCfResource","PartitionKey","partitionKey","FeedRange","startFromNow","startTime","cfResource","internalCfResource","EffectivePartitionKeyConstants","MinimumInclusiveEffectivePartitionKey","MaximumExclusiveEffectivePartitionKey","minInclusive","maxExclusive"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/ChangeFeed/changeFeedIteratorBuilder.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { PartitionKey } from \"../../documents\";\nimport type { PartitionKeyRangeCache } from \"../../routing\";\nimport { QueryRange } from \"../../routing\";\nimport type { ChangeFeedIteratorOptions } from \"./ChangeFeedIteratorOptions\";\nimport { ChangeFeedStartFrom } from \"./ChangeFeedStartFrom\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { ChangeFeedResourceType } from \"./ChangeFeedEnums\";\nimport { ChangeFeedForPartitionKey } from \"./ChangeFeedForPartitionKey\";\nimport { ErrorResponse } from \"../../request\";\nimport { ChangeFeedForEpkRange } from \"./ChangeFeedForEpkRange\";\nimport { getIdFromLink, getPathFromLink, ResourceType, Constants } from \"../../common\";\nimport { buildInternalChangeFeedOptions, fetchStartTime, isEpkRange } from \"./changeFeedUtils\";\nimport { isPartitionKey } from \"../../utils/typeChecks\";\nimport type { Container } from \"../Container\";\nimport type { FeedRangeInternal } from \"./FeedRange\";\n\nexport function changeFeedIteratorBuilder(\n  cfOptions: ChangeFeedIteratorOptions,\n  clientContext: ClientContext,\n  container: Container,\n  partitionKeyRangeCache: PartitionKeyRangeCache,\n): any {\n  const url = container.url;\n  const path = getPathFromLink(url, ResourceType.item);\n  const id = getIdFromLink(url);\n\n  let changeFeedStartFrom = cfOptions.changeFeedStartFrom;\n\n  if (changeFeedStartFrom === undefined) {\n    changeFeedStartFrom = ChangeFeedStartFrom.Now();\n  }\n\n  if (changeFeedStartFrom instanceof ChangeFeedStartFromContinuation) {\n    const continuationToken = changeFeedStartFrom.getCfResourceJson();\n    const resourceType = changeFeedStartFrom.getResourceType();\n    const internalCfOptions = buildInternalChangeFeedOptions(\n      cfOptions,\n      changeFeedStartFrom.getCfResource(),\n    );\n\n    if (\n      resourceType === ChangeFeedResourceType.PartitionKey &&\n      isPartitionKey(continuationToken.partitionKey)\n    ) {\n      return new ChangeFeedForPartitionKey(\n        clientContext,\n        container,\n        id,\n        path,\n        continuationToken.partitionKey,\n        internalCfOptions,\n      );\n    } else if (resourceType === ChangeFeedResourceType.FeedRange) {\n      return new ChangeFeedForEpkRange(\n        clientContext,\n        container,\n        partitionKeyRangeCache,\n        id,\n        path,\n        url,\n        internalCfOptions,\n        undefined,\n      );\n    } else {\n      throw new ErrorResponse(\"Invalid continuation token.\");\n    }\n  } else if (\n    changeFeedStartFrom instanceof ChangeFeedStartFromNow ||\n    changeFeedStartFrom instanceof ChangeFeedStartFromTime ||\n    changeFeedStartFrom instanceof ChangeFeedStartFromBeginning\n  ) {\n    const startFromNow = changeFeedStartFrom instanceof ChangeFeedStartFromNow ? true : false;\n    const startTime = startFromNow ? undefined : fetchStartTime(changeFeedStartFrom);\n\n    const internalCfOptions = buildInternalChangeFeedOptions(\n      cfOptions,\n      undefined,\n      startTime,\n      startFromNow,\n    );\n    const cfResource = changeFeedStartFrom.getCfResource();\n    if (isPartitionKey(cfResource)) {\n      return new ChangeFeedForPartitionKey(\n        clientContext,\n        container,\n        id,\n        path,\n        cfResource as PartitionKey,\n        internalCfOptions,\n      );\n    } else {\n      let internalCfResource: QueryRange;\n      if (cfResource === undefined) {\n        internalCfResource = new QueryRange(\n          Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey,\n          Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey,\n          true,\n          false,\n        );\n      } else if (isEpkRange(cfResource)) {\n        internalCfResource = new QueryRange(\n          (cfResource as FeedRangeInternal).minInclusive,\n          (cfResource as FeedRangeInternal).maxExclusive,\n          true,\n          false,\n        );\n      } else {\n        throw new ErrorResponse(\"Invalid feed range.\");\n      }\n      return new ChangeFeedForEpkRange(\n        clientContext,\n        container,\n        partitionKeyRangeCache,\n        id,\n        path,\n        url,\n        internalCfOptions,\n        internalCfResource,\n      );\n    }\n  } else {\n    throw new ErrorResponse(\"Invalid change feed start location.\");\n  }\n}\n"],"mappings":"AAKA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,4BAA4B,QAAQ,gCAAgC;AAC7E,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,sBAAsB,QAAQ,mBAAmB;AAC1D,SAASC,yBAAyB,QAAQ,6BAA6B;AACvE,SAASC,aAAa,QAAQ,eAAe;AAC7C,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,aAAa,EAAEC,eAAe,EAAEC,YAAY,EAAEC,SAAS,QAAQ,cAAc;AACtF,SAASC,8BAA8B,EAAEC,cAAc,EAAEC,UAAU,QAAQ,mBAAmB;AAC9F,SAASC,cAAc,QAAQ,wBAAwB;AAIvD,OAAM,SAAUC,yBAAyBA,CACvCC,SAAoC,EACpCC,aAA4B,EAC5BC,SAAoB,EACpBC,sBAA8C;EAE9C,MAAMC,GAAG,GAAGF,SAAS,CAACE,GAAG;EACzB,MAAMC,IAAI,GAAGb,eAAe,CAACY,GAAG,EAAEX,YAAY,CAACa,IAAI,CAAC;EACpD,MAAMC,EAAE,GAAGhB,aAAa,CAACa,GAAG,CAAC;EAE7B,IAAII,mBAAmB,GAAGR,SAAS,CAACQ,mBAAmB;EAEvD,IAAIA,mBAAmB,KAAKC,SAAS,EAAE;IACrCD,mBAAmB,GAAG1B,mBAAmB,CAAC4B,GAAG,EAAE;EACjD;EAEA,IAAIF,mBAAmB,YAAYxB,+BAA+B,EAAE;IAClE,MAAM2B,iBAAiB,GAAGH,mBAAmB,CAACI,iBAAiB,EAAE;IACjE,MAAMC,YAAY,GAAGL,mBAAmB,CAACM,eAAe,EAAE;IAC1D,MAAMC,iBAAiB,GAAGpB,8BAA8B,CACtDK,SAAS,EACTQ,mBAAmB,CAACQ,aAAa,EAAE,CACpC;IAED,IACEH,YAAY,KAAK1B,sBAAsB,CAAC8B,YAAY,IACpDnB,cAAc,CAACa,iBAAiB,CAACO,YAAY,CAAC,EAC9C;MACA,OAAO,IAAI9B,yBAAyB,CAClCa,aAAa,EACbC,SAAS,EACTK,EAAE,EACFF,IAAI,EACJM,iBAAiB,CAACO,YAAY,EAC9BH,iBAAiB,CAClB;IACH,CAAC,MAAM,IAAIF,YAAY,KAAK1B,sBAAsB,CAACgC,SAAS,EAAE;MAC5D,OAAO,IAAI7B,qBAAqB,CAC9BW,aAAa,EACbC,SAAS,EACTC,sBAAsB,EACtBI,EAAE,EACFF,IAAI,EACJD,GAAG,EACHW,iBAAiB,EACjBN,SAAS,CACV;IACH,CAAC,MAAM;MACL,MAAM,IAAIpB,aAAa,CAAC,6BAA6B,CAAC;IACxD;EACF,CAAC,MAAM,IACLmB,mBAAmB,YAAYvB,sBAAsB,IACrDuB,mBAAmB,YAAYtB,uBAAuB,IACtDsB,mBAAmB,YAAYzB,4BAA4B,EAC3D;IACA,MAAMqC,YAAY,GAAGZ,mBAAmB,YAAYvB,sBAAsB,GAAG,IAAI,GAAG,KAAK;IACzF,MAAMoC,SAAS,GAAGD,YAAY,GAAGX,SAAS,GAAGb,cAAc,CAACY,mBAAmB,CAAC;IAEhF,MAAMO,iBAAiB,GAAGpB,8BAA8B,CACtDK,SAAS,EACTS,SAAS,EACTY,SAAS,EACTD,YAAY,CACb;IACD,MAAME,UAAU,GAAGd,mBAAmB,CAACQ,aAAa,EAAE;IACtD,IAAIlB,cAAc,CAACwB,UAAU,CAAC,EAAE;MAC9B,OAAO,IAAIlC,yBAAyB,CAClCa,aAAa,EACbC,SAAS,EACTK,EAAE,EACFF,IAAI,EACJiB,UAA0B,EAC1BP,iBAAiB,CAClB;IACH,CAAC,MAAM;MACL,IAAIQ,kBAA8B;MAClC,IAAID,UAAU,KAAKb,SAAS,EAAE;QAC5Bc,kBAAkB,GAAG,IAAI1C,UAAU,CACjCa,SAAS,CAAC8B,8BAA8B,CAACC,qCAAqC,EAC9E/B,SAAS,CAAC8B,8BAA8B,CAACE,qCAAqC,EAC9E,IAAI,EACJ,KAAK,CACN;MACH,CAAC,MAAM,IAAI7B,UAAU,CAACyB,UAAU,CAAC,EAAE;QACjCC,kBAAkB,GAAG,IAAI1C,UAAU,CAChCyC,UAAgC,CAACK,YAAY,EAC7CL,UAAgC,CAACM,YAAY,EAC9C,IAAI,EACJ,KAAK,CACN;MACH,CAAC,MAAM;QACL,MAAM,IAAIvC,aAAa,CAAC,qBAAqB,CAAC;MAChD;MACA,OAAO,IAAIC,qBAAqB,CAC9BW,aAAa,EACbC,SAAS,EACTC,sBAAsB,EACtBI,EAAE,EACFF,IAAI,EACJD,GAAG,EACHW,iBAAiB,EACjBQ,kBAAkB,CACnB;IACH;EACF,CAAC,MAAM;IACL,MAAM,IAAIlC,aAAa,CAAC,qCAAqC,CAAC;EAChE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}