{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport class GlobalStatisticsAggregator {\n  constructor() {\n    this.globalStatistics = {\n      documentCount: 0,\n      fullTextStatistics: []\n    };\n  }\n  aggregate(other) {\n    if (!other) {\n      return;\n    }\n    // Aggregate document count\n    this.globalStatistics.documentCount += other.documentCount;\n    // Ensure `fullTextStatistics` is initialized\n    if (!other.fullTextStatistics || other.fullTextStatistics.length === 0) {\n      return;\n    }\n    // Initialize `this.globalStatistics.fullTextStatistics` if it's empty\n    if (this.globalStatistics.fullTextStatistics.length === 0) {\n      this.globalStatistics.fullTextStatistics = other.fullTextStatistics.map(stat => ({\n        totalWordCount: stat.totalWordCount,\n        hitCounts: [...stat.hitCounts]\n      }));\n    } else {\n      // Loop through `other.fullTextStatistics` to add values to `this.globalStatistics.fullTextStatistics`\n      for (let i = 0; i < other.fullTextStatistics.length; i++) {\n        const otherStat = other.fullTextStatistics[i];\n        // Ensure the index `i` is initialized\n        if (!this.globalStatistics.fullTextStatistics[i]) {\n          this.globalStatistics.fullTextStatistics[i] = {\n            totalWordCount: 0,\n            hitCounts: []\n          };\n        }\n        // Add totalWordCount\n        this.globalStatistics.fullTextStatistics[i].totalWordCount += otherStat.totalWordCount;\n        // Aggregate `hitCounts`\n        for (let j = 0; j < otherStat.hitCounts.length; j++) {\n          // Initialize hit count if necessary\n          if (this.globalStatistics.fullTextStatistics[i].hitCounts.length <= j) {\n            this.globalStatistics.fullTextStatistics[i].hitCounts.push(0);\n          }\n          this.globalStatistics.fullTextStatistics[i].hitCounts[j] += otherStat.hitCounts[j];\n        }\n      }\n    }\n  }\n  getResult() {\n    return this.globalStatistics;\n  }\n}","map":{"version":3,"names":["GlobalStatisticsAggregator","constructor","globalStatistics","documentCount","fullTextStatistics","aggregate","other","length","map","stat","totalWordCount","hitCounts","i","otherStat","j","push","getResult"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/Aggregators/GlobalStatisticsAggregator.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { GlobalStatistics } from \"../../request/globalStatistics\";\nimport { Aggregator } from \"./Aggregator\";\n\nexport class GlobalStatisticsAggregator implements Aggregator {\n  private globalStatistics: GlobalStatistics;\n\n  constructor() {\n    this.globalStatistics = {\n      documentCount: 0,\n      fullTextStatistics: [],\n    };\n  }\n\n  public aggregate(other: GlobalStatistics): void {\n    if (!other) {\n      return;\n    }\n    // Aggregate document count\n    this.globalStatistics.documentCount += other.documentCount;\n    // Ensure `fullTextStatistics` is initialized\n    if (!other.fullTextStatistics || other.fullTextStatistics.length === 0) {\n      return;\n    }\n\n    // Initialize `this.globalStatistics.fullTextStatistics` if it's empty\n    if (this.globalStatistics.fullTextStatistics.length === 0) {\n      this.globalStatistics.fullTextStatistics = other.fullTextStatistics.map((stat) => ({\n        totalWordCount: stat.totalWordCount,\n        hitCounts: [...stat.hitCounts],\n      }));\n    } else {\n      // Loop through `other.fullTextStatistics` to add values to `this.globalStatistics.fullTextStatistics`\n      for (let i = 0; i < other.fullTextStatistics.length; i++) {\n        const otherStat = other.fullTextStatistics[i];\n\n        // Ensure the index `i` is initialized\n        if (!this.globalStatistics.fullTextStatistics[i]) {\n          this.globalStatistics.fullTextStatistics[i] = {\n            totalWordCount: 0,\n            hitCounts: [],\n          };\n        }\n\n        // Add totalWordCount\n        this.globalStatistics.fullTextStatistics[i].totalWordCount += otherStat.totalWordCount;\n\n        // Aggregate `hitCounts`\n        for (let j = 0; j < otherStat.hitCounts.length; j++) {\n          // Initialize hit count if necessary\n          if (this.globalStatistics.fullTextStatistics[i].hitCounts.length <= j) {\n            this.globalStatistics.fullTextStatistics[i].hitCounts.push(0);\n          }\n          this.globalStatistics.fullTextStatistics[i].hitCounts[j] += otherStat.hitCounts[j];\n        }\n      }\n    }\n  }\n\n  public getResult(): GlobalStatistics {\n    return this.globalStatistics;\n  }\n}\n"],"mappings":"AAAA;AACA;AAKA,OAAM,MAAOA,0BAA0B;EAGrCC,YAAA;IACE,IAAI,CAACC,gBAAgB,GAAG;MACtBC,aAAa,EAAE,CAAC;MAChBC,kBAAkB,EAAE;KACrB;EACH;EAEOC,SAASA,CAACC,KAAuB;IACtC,IAAI,CAACA,KAAK,EAAE;MACV;IACF;IACA;IACA,IAAI,CAACJ,gBAAgB,CAACC,aAAa,IAAIG,KAAK,CAACH,aAAa;IAC1D;IACA,IAAI,CAACG,KAAK,CAACF,kBAAkB,IAAIE,KAAK,CAACF,kBAAkB,CAACG,MAAM,KAAK,CAAC,EAAE;MACtE;IACF;IAEA;IACA,IAAI,IAAI,CAACL,gBAAgB,CAACE,kBAAkB,CAACG,MAAM,KAAK,CAAC,EAAE;MACzD,IAAI,CAACL,gBAAgB,CAACE,kBAAkB,GAAGE,KAAK,CAACF,kBAAkB,CAACI,GAAG,CAAEC,IAAI,KAAM;QACjFC,cAAc,EAAED,IAAI,CAACC,cAAc;QACnCC,SAAS,EAAE,CAAC,GAAGF,IAAI,CAACE,SAAS;OAC9B,CAAC,CAAC;IACL,CAAC,MAAM;MACL;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACF,kBAAkB,CAACG,MAAM,EAAEK,CAAC,EAAE,EAAE;QACxD,MAAMC,SAAS,GAAGP,KAAK,CAACF,kBAAkB,CAACQ,CAAC,CAAC;QAE7C;QACA,IAAI,CAAC,IAAI,CAACV,gBAAgB,CAACE,kBAAkB,CAACQ,CAAC,CAAC,EAAE;UAChD,IAAI,CAACV,gBAAgB,CAACE,kBAAkB,CAACQ,CAAC,CAAC,GAAG;YAC5CF,cAAc,EAAE,CAAC;YACjBC,SAAS,EAAE;WACZ;QACH;QAEA;QACA,IAAI,CAACT,gBAAgB,CAACE,kBAAkB,CAACQ,CAAC,CAAC,CAACF,cAAc,IAAIG,SAAS,CAACH,cAAc;QAEtF;QACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACF,SAAS,CAACJ,MAAM,EAAEO,CAAC,EAAE,EAAE;UACnD;UACA,IAAI,IAAI,CAACZ,gBAAgB,CAACE,kBAAkB,CAACQ,CAAC,CAAC,CAACD,SAAS,CAACJ,MAAM,IAAIO,CAAC,EAAE;YACrE,IAAI,CAACZ,gBAAgB,CAACE,kBAAkB,CAACQ,CAAC,CAAC,CAACD,SAAS,CAACI,IAAI,CAAC,CAAC,CAAC;UAC/D;UACA,IAAI,CAACb,gBAAgB,CAACE,kBAAkB,CAACQ,CAAC,CAAC,CAACD,SAAS,CAACG,CAAC,CAAC,IAAID,SAAS,CAACF,SAAS,CAACG,CAAC,CAAC;QACpF;MACF;IACF;EACF;EAEOE,SAASA,CAAA;IACd,OAAO,IAAI,CAACd,gBAAgB;EAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}