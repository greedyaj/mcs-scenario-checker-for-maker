{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// All aggregates are effectively a group by operation\n// The empty group is used for aggregates without a GROUP BY clause\nexport const emptyGroup = \"__empty__\";\n// Newer API versions rewrite the query to return `item2`. It fixes some legacy issues with the original `item` result\n// Aggregator code should use item2 when available\nexport const extractAggregateResult = payload => Object.keys(payload).length > 0 ? payload.item2 ? payload.item2 : payload.item : null;","map":{"version":3,"names":["emptyGroup","extractAggregateResult","payload","Object","keys","length","item2","item"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/EndpointComponent/emptyGroup.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// All aggregates are effectively a group by operation\n// The empty group is used for aggregates without a GROUP BY clause\nexport const emptyGroup = \"__empty__\";\n\n// Newer API versions rewrite the query to return `item2`. It fixes some legacy issues with the original `item` result\n// Aggregator code should use item2 when available\nexport const extractAggregateResult = (payload: { item2?: unknown; item: unknown }): any =>\n  Object.keys(payload).length > 0 ? (payload.item2 ? payload.item2 : payload.item) : null;\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA,OAAO,MAAMA,UAAU,GAAG,WAAW;AAErC;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAIC,OAA2C,IAChFC,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC,CAACG,MAAM,GAAG,CAAC,GAAIH,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAACK,IAAI,GAAI,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}