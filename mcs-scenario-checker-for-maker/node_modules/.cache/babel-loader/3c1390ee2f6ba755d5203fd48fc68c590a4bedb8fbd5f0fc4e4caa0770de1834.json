{"ast":null,"code":"var _jsxFileName = \"/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/src/pages/ExecuteTests.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExecuteTests = () => {\n  _s();\n  const [testResults, setTestResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fetchTestResults = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('https://api.example.com/test-results'); // Replace with actual API endpoint\n      const data = await response.json();\n      setTestResults(data);\n    } catch (error) {\n      console.error('Error fetching test results:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const executeTest = async testId => {\n    try {\n      const response = await fetch(`https://api.example.com/execute-test/${testId}`, {\n        method: 'POST'\n      });\n      const result = await response.json();\n      // Update the testResults state with the new result\n      setTestResults(prevResults => prevResults.map(test => test.id === testId ? {\n        ...test,\n        status: result.status\n      } : test));\n    } catch (error) {\n      console.error('Error executing test:', error);\n    }\n  };\n  useEffect(() => {\n    fetchTestResults();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Execute Tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Test ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: testResults.map(test => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: test.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: test.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: test.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => executeTest(test.id),\n              children: \"Execute\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 33\n          }, this)]\n        }, test.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(ExecuteTests, \"Hw8nS21gkcQt9beSm6Ntm5e7Dyw=\");\n_c = ExecuteTests;\nexport default ExecuteTests;\nvar _c;\n$RefreshReg$(_c, \"ExecuteTests\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ExecuteTests","_s","testResults","setTestResults","loading","setLoading","fetchTestResults","response","fetch","data","json","error","console","executeTest","testId","method","result","prevResults","map","test","id","status","children","fileName","_jsxFileName","lineNumber","columnNumber","description","onClick","_c","$RefreshReg$"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/src/pages/ExecuteTests.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ExecuteTests: React.FC = () => {\n    const [testResults, setTestResults] = useState<any[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const fetchTestResults = async () => {\n        setLoading(true);\n        try {\n            const response = await fetch('https://api.example.com/test-results'); // Replace with actual API endpoint\n            const data = await response.json();\n            setTestResults(data);\n        } catch (error) {\n            console.error('Error fetching test results:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const executeTest = async (testId: string) => {\n        try {\n            const response = await fetch(`https://api.example.com/execute-test/${testId}`, { method: 'POST' });\n            const result = await response.json();\n            // Update the testResults state with the new result\n            setTestResults(prevResults => \n                prevResults.map(test => \n                    test.id === testId ? { ...test, status: result.status } : test\n                )\n            );\n        } catch (error) {\n            console.error('Error executing test:', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchTestResults();\n    }, []);\n\n    return (\n        <div>\n            <h1>Execute Tests</h1>\n            {loading ? (\n                <p>Loading...</p>\n            ) : (\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Test ID</th>\n                            <th>Description</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {testResults.map(test => (\n                            <tr key={test.id}>\n                                <td>{test.id}</td>\n                                <td>{test.description}</td>\n                                <td>{test.status}</td>\n                                <td>\n                                    <button onClick={() => executeTest(test.id)}>Execute</button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            )}\n        </div>\n    );\n};\n\nexport default ExecuteTests;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}