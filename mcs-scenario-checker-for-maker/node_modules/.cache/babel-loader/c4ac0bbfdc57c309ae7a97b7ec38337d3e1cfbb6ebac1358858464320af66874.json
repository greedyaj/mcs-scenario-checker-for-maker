{"ast":null,"code":"import { createDatabaseUri, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { Container, Containers } from \"../Container\";\nimport { User, Users } from \"../User\";\nimport { DatabaseResponse } from \"./DatabaseResponse\";\nimport { OfferResponse, Offer } from \"../Offer\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics, withMetadataDiagnostics } from \"../../utils/diagnostics\";\nimport { MetadataLookUpType } from \"../../CosmosDiagnostics\";\n/**\n * Operations for reading or deleting an existing database.\n *\n * @see {@link Databases} for creating new databases, and reading/querying all databases; use `client.databases`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `database.read()` before every single `item.read()` call, to ensure the database exists;\n * do this once on application start up.\n */\nexport class Database {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  get url() {\n    return createDatabaseUri(this.id);\n  }\n  /** Returns a new {@link Database} instance.\n   *\n   * Note: the intention is to get this object from {@link CosmosClient} via `client.database(id)`, not to instantiate it yourself.\n   */\n  constructor(client, id, clientContext) {\n    this.client = client;\n    this.id = id;\n    this.clientContext = clientContext;\n    this.containers = new Containers(this, this.clientContext);\n    this.users = new Users(this, this.clientContext);\n  }\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * Use `.containers` creating new containers, or querying/reading all containers.\n   *\n   * @example Delete a container\n   * ```typescript\n   * await client.database(\"<db id>\").container(\"<container id>\").delete();\n   * ```\n   */\n  container(id) {\n    return new Container(this, id, this.clientContext);\n  }\n  /**\n   * Used to read, replace, or delete a specific, existing {@link User} by id.\n   *\n   * Use `.users` for creating new users, or querying/reading all users.\n   */\n  user(id) {\n    return new User(this, id, this.clientContext);\n  }\n  /** Read the definition of the given Database. */\n  async read(options) {\n    return withDiagnostics(async diagnosticNode => {\n      return this.readInternal(diagnosticNode, options);\n    }, this.clientContext);\n  }\n  /**\n   * @hidden\n   */\n  async readInternal(diagnosticNode, options) {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read({\n      path,\n      resourceType: ResourceType.database,\n      resourceId: id,\n      options,\n      diagnosticNode\n    });\n    return new DatabaseResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n  }\n  /** Delete the given Database. */\n  async delete(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.delete({\n        path,\n        resourceType: ResourceType.database,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new DatabaseResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Gets offer on database. If none exists, returns an OfferResponse with undefined.\n   */\n  async readOffer(options = {}) {\n    return withDiagnostics(async diagnosticNode => {\n      const {\n        resource: record\n      } = await withMetadataDiagnostics(async node => {\n        return this.readInternal(node);\n      }, diagnosticNode, MetadataLookUpType.DatabaseLookUp);\n      const path = \"/offers\";\n      const url = record._self;\n      const response = await this.clientContext.queryFeed({\n        path,\n        resourceId: \"\",\n        resourceType: ResourceType.offer,\n        query: `SELECT * from root where root.resource = \"${url}\"`,\n        resultFn: result => result.Offers,\n        options,\n        diagnosticNode\n      });\n      const offer = response.result[0] ? new Offer(this.client, response.result[0].id, this.clientContext) : undefined;\n      return new OfferResponse(response.result[0], response.headers, response.code, getEmptyCosmosDiagnostics(), offer);\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["createDatabaseUri","getIdFromLink","getPathFromLink","ResourceType","Container","Containers","User","Users","DatabaseResponse","OfferResponse","Offer","getEmptyCosmosDiagnostics","withDiagnostics","withMetadataDiagnostics","MetadataLookUpType","Database","url","id","constructor","client","clientContext","containers","users","container","user","read","options","diagnosticNode","readInternal","path","response","resourceType","database","resourceId","result","headers","code","delete","readOffer","resource","record","node","DatabaseLookUp","_self","queryFeed","offer","query","resultFn","Offers","undefined"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/Database/Database.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport { createDatabaseUri, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport type { CosmosClient } from \"../../CosmosClient\";\nimport type { RequestOptions } from \"../../request\";\nimport { Container, Containers } from \"../Container\";\nimport { User, Users } from \"../User\";\nimport type { DatabaseDefinition } from \"./DatabaseDefinition\";\nimport { DatabaseResponse } from \"./DatabaseResponse\";\nimport type { OfferDefinition } from \"../Offer\";\nimport { OfferResponse, Offer } from \"../Offer\";\nimport type { Resource } from \"../Resource\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  getEmptyCosmosDiagnostics,\n  withDiagnostics,\n  withMetadataDiagnostics,\n} from \"../../utils/diagnostics\";\nimport { MetadataLookUpType } from \"../../CosmosDiagnostics\";\n\n/**\n * Operations for reading or deleting an existing database.\n *\n * @see {@link Databases} for creating new databases, and reading/querying all databases; use `client.databases`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `database.read()` before every single `item.read()` call, to ensure the database exists;\n * do this once on application start up.\n */\nexport class Database {\n  /**\n   * Used for creating new containers, or querying/reading all containers.\n   *\n   * Use `.database(id)` to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * @example Create a new container\n   * ```typescript\n   * const {body: containerDefinition, container} = await client.database(\"<db id>\").containers.create({id: \"<container id>\"});\n   * ```\n   */\n  public readonly containers: Containers;\n  /**\n   * Used for creating new users, or querying/reading all users.\n   *\n   * Use `.user(id)` to read, replace, or delete a specific, existing {@link User} by id.\n   */\n  public readonly users: Users;\n\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createDatabaseUri(this.id);\n  }\n\n  /** Returns a new {@link Database} instance.\n   *\n   * Note: the intention is to get this object from {@link CosmosClient} via `client.database(id)`, not to instantiate it yourself.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    public readonly id: string,\n    private clientContext: ClientContext,\n  ) {\n    this.containers = new Containers(this, this.clientContext);\n    this.users = new Users(this, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * Use `.containers` creating new containers, or querying/reading all containers.\n   *\n   * @example Delete a container\n   * ```typescript\n   * await client.database(\"<db id>\").container(\"<container id>\").delete();\n   * ```\n   */\n  public container(id: string): Container {\n    return new Container(this, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link User} by id.\n   *\n   * Use `.users` for creating new users, or querying/reading all users.\n   */\n  public user(id: string): User {\n    return new User(this, id, this.clientContext);\n  }\n\n  /** Read the definition of the given Database. */\n  public async read(options?: RequestOptions): Promise<DatabaseResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.readInternal(diagnosticNode, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async readInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    options?: RequestOptions,\n  ): Promise<DatabaseResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<DatabaseDefinition>({\n      path,\n      resourceType: ResourceType.database,\n      resourceId: id,\n      options,\n      diagnosticNode,\n    });\n    return new DatabaseResponse(\n      response.result,\n      response.headers,\n      response.code,\n      this,\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n\n  /** Delete the given Database. */\n  public async delete(options?: RequestOptions): Promise<DatabaseResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<DatabaseDefinition>({\n        path,\n        resourceType: ResourceType.database,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new DatabaseResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets offer on database. If none exists, returns an OfferResponse with undefined.\n   */\n  public async readOffer(options: RequestOptions = {}): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const { resource: record } = await withMetadataDiagnostics(\n        async (node: DiagnosticNodeInternal) => {\n          return this.readInternal(node);\n        },\n        diagnosticNode,\n        MetadataLookUpType.DatabaseLookUp,\n      );\n\n      const path = \"/offers\";\n      const url = record._self;\n\n      const response = await this.clientContext.queryFeed<OfferDefinition & Resource[]>({\n        path,\n        resourceId: \"\",\n        resourceType: ResourceType.offer,\n        query: `SELECT * from root where root.resource = \"${url}\"`,\n        resultFn: (result) => result.Offers,\n        options,\n        diagnosticNode,\n      });\n      const offer = response.result[0]\n        ? new Offer(this.client, response.result[0].id, this.clientContext)\n        : undefined;\n      return new OfferResponse(\n        response.result[0],\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        offer,\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}