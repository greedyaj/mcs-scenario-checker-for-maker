{"ast":null,"code":"import { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation\";\nimport { ErrorResponse } from \"../../request/ErrorResponse\";\nimport { isNullOrEmpty } from \"./changeFeedUtils\";\n/**\n * Base class for where to start a ChangeFeedIterator.\n */\n/* eslint-disable @typescript-eslint/no-extraneous-class */\nexport class ChangeFeedStartFrom {\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start from the beginning of time.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   */\n  static Beginning(cfResource) {\n    return new ChangeFeedStartFromBeginning(cfResource);\n  }\n  /**\n   *  Returns an object that tells the ChangeFeedIterator to start reading changes from this moment onward.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   **/\n  static Now(cfResource) {\n    return new ChangeFeedStartFromNow(cfResource);\n  }\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start reading changes from some point in time onward.\n   * @param startTime - Date object specfiying the time to start reading changes from.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   */\n  static Time(startTime, cfResource) {\n    if (!startTime) {\n      throw new ErrorResponse(\"startTime must be present\");\n    }\n    if (startTime instanceof Date === true) {\n      return new ChangeFeedStartFromTime(startTime, cfResource);\n    } else {\n      throw new ErrorResponse(\"startTime must be a Date object.\");\n    }\n  }\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start reading changes from a save point.\n   * @param continuation - The continuation to resume from.\n   */\n  static Continuation(continuationToken) {\n    if (!continuationToken) {\n      throw new ErrorResponse(\"Argument continuation must be passed.\");\n    }\n    if (isNullOrEmpty(continuationToken)) {\n      throw new ErrorResponse(\"Argument continuationToken must be a non-empty string.\");\n    }\n    return new ChangeFeedStartFromContinuation(continuationToken);\n  }\n}","map":{"version":3,"names":["ChangeFeedStartFromNow","ChangeFeedStartFromBeginning","ChangeFeedStartFromTime","ChangeFeedStartFromContinuation","ErrorResponse","isNullOrEmpty","ChangeFeedStartFrom","Beginning","cfResource","Now","Time","startTime","Date","Continuation","continuationToken"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/ChangeFeed/ChangeFeedStartFrom.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PartitionKey } from \"../../documents\";\nimport type { FeedRange } from \"./FeedRange\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation\";\nimport { ErrorResponse } from \"../../request/ErrorResponse\";\nimport { isNullOrEmpty } from \"./changeFeedUtils\";\n\n/**\n * Base class for where to start a ChangeFeedIterator.\n */\n/* eslint-disable @typescript-eslint/no-extraneous-class */\nexport abstract class ChangeFeedStartFrom {\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start from the beginning of time.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   */\n  public static Beginning(cfResource?: PartitionKey | FeedRange): ChangeFeedStartFromBeginning {\n    return new ChangeFeedStartFromBeginning(cfResource);\n  }\n  /**\n   *  Returns an object that tells the ChangeFeedIterator to start reading changes from this moment onward.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   **/\n  public static Now(cfResource?: PartitionKey | FeedRange): ChangeFeedStartFromNow {\n    return new ChangeFeedStartFromNow(cfResource);\n  }\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start reading changes from some point in time onward.\n   * @param startTime - Date object specfiying the time to start reading changes from.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   */\n  public static Time(\n    startTime: Date,\n    cfResource?: PartitionKey | FeedRange,\n  ): ChangeFeedStartFromTime {\n    if (!startTime) {\n      throw new ErrorResponse(\"startTime must be present\");\n    }\n    if (startTime instanceof Date === true) {\n      return new ChangeFeedStartFromTime(startTime, cfResource);\n    } else {\n      throw new ErrorResponse(\"startTime must be a Date object.\");\n    }\n  }\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start reading changes from a save point.\n   * @param continuation - The continuation to resume from.\n   */\n  public static Continuation(continuationToken: string): ChangeFeedStartFromContinuation {\n    if (!continuationToken) {\n      throw new ErrorResponse(\"Argument continuation must be passed.\");\n    }\n    if (isNullOrEmpty(continuationToken)) {\n      throw new ErrorResponse(\"Argument continuationToken must be a non-empty string.\");\n    }\n    return new ChangeFeedStartFromContinuation(continuationToken);\n  }\n}\n"],"mappings":"AAIA,SAASA,sBAAsB,QAAQ,0BAA0B;AACjE,SAASC,4BAA4B,QAAQ,gCAAgC;AAC7E,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,aAAa,QAAQ,mBAAmB;AAEjD;;;AAGA;AACA,OAAM,MAAgBC,mBAAmB;EACvC;;;;EAIO,OAAOC,SAASA,CAACC,UAAqC;IAC3D,OAAO,IAAIP,4BAA4B,CAACO,UAAU,CAAC;EACrD;EACA;;;;EAIO,OAAOC,GAAGA,CAACD,UAAqC;IACrD,OAAO,IAAIR,sBAAsB,CAACQ,UAAU,CAAC;EAC/C;EACA;;;;;EAKO,OAAOE,IAAIA,CAChBC,SAAe,EACfH,UAAqC;IAErC,IAAI,CAACG,SAAS,EAAE;MACd,MAAM,IAAIP,aAAa,CAAC,2BAA2B,CAAC;IACtD;IACA,IAAIO,SAAS,YAAYC,IAAI,KAAK,IAAI,EAAE;MACtC,OAAO,IAAIV,uBAAuB,CAACS,SAAS,EAAEH,UAAU,CAAC;IAC3D,CAAC,MAAM;MACL,MAAM,IAAIJ,aAAa,CAAC,kCAAkC,CAAC;IAC7D;EACF;EACA;;;;EAIO,OAAOS,YAAYA,CAACC,iBAAyB;IAClD,IAAI,CAACA,iBAAiB,EAAE;MACtB,MAAM,IAAIV,aAAa,CAAC,uCAAuC,CAAC;IAClE;IACA,IAAIC,aAAa,CAACS,iBAAiB,CAAC,EAAE;MACpC,MAAM,IAAIV,aAAa,CAAC,wDAAwD,CAAC;IACnF;IACA,OAAO,IAAID,+BAA+B,CAACW,iBAAiB,CAAC;EAC/D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}