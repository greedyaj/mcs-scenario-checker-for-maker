{"ast":null,"code":"import { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { UserDefinedFunction } from \"./UserDefinedFunction\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * Used to create, upsert, query, or read all User Defined Functions.\n *\n * @see {@link UserDefinedFunction} to read, replace, or delete a given User Defined Function by id.\n */\nexport class UserDefinedFunctions {\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   */\n  constructor(container, clientContext) {\n    this.container = container;\n    this.clientContext = clientContext;\n  }\n  query(query, options) {\n    const path = getPathFromLink(this.container.url, ResourceType.udf);\n    const id = getIdFromLink(this.container.url);\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        resultFn: result => result.UserDefinedFunctions,\n        query,\n        options: innerOptions,\n        diagnosticNode\n      });\n    });\n  }\n  /**\n   * Read all User Defined Functions.\n   * @example Read all User Defined Functions to array.\n   * ```typescript\n   * const {body: udfList} = await container.userDefinedFunctions.readAll().fetchAll();\n   * ```\n   */\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n  /**\n   * Create a UserDefinedFunction.\n   *\n   * Azure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers.\n   *\n   * For additional details, refer to the server-side JavaScript API documentation.\n   *\n   */\n  async create(body, options) {\n    return withDiagnostics(async diagnosticNode => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.container.url, ResourceType.udf);\n      const id = getIdFromLink(this.container.url);\n      const response = await this.clientContext.create({\n        body,\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      const ref = new UserDefinedFunction(this.container, response.result.id, this.clientContext);\n      return new UserDefinedFunctionResponse(response.result, response.headers, response.code, ref, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["getIdFromLink","getPathFromLink","isResourceValid","ResourceType","QueryIterator","UserDefinedFunction","UserDefinedFunctionResponse","getEmptyCosmosDiagnostics","withDiagnostics","UserDefinedFunctions","constructor","container","clientContext","query","options","path","url","udf","id","diagnosticNode","innerOptions","queryFeed","resourceType","resourceId","resultFn","result","readAll","undefined","create","body","toString","err","response","ref","headers","code"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/UserDefinedFunction/UserDefinedFunctions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { Resource } from \"../Resource\";\nimport { UserDefinedFunction } from \"./UserDefinedFunction\";\nimport type { UserDefinedFunctionDefinition } from \"./UserDefinedFunctionDefinition\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to create, upsert, query, or read all User Defined Functions.\n *\n * @see {@link UserDefinedFunction} to read, replace, or delete a given User Defined Function by id.\n */\nexport class UserDefinedFunctions {\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all User Defined Functions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all User Defined Functions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.udf);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        resultFn: (result) => result.UserDefinedFunctions,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all User Defined Functions.\n   * @example Read all User Defined Functions to array.\n   * ```typescript\n   * const {body: udfList} = await container.userDefinedFunctions.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<UserDefinedFunctionDefinition & Resource> {\n    return this.query<UserDefinedFunctionDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a UserDefinedFunction.\n   *\n   * Azure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers.\n   *\n   * For additional details, refer to the server-side JavaScript API documentation.\n   *\n   */\n  public async create(\n    body: UserDefinedFunctionDefinition,\n    options?: RequestOptions,\n  ): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.udf);\n      const id = getIdFromLink(this.container.url);\n\n      const response = await this.clientContext.create<UserDefinedFunctionDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new UserDefinedFunction(this.container, response.result.id, this.clientContext);\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"AAIA,SAASA,aAAa,EAAEC,eAAe,EAAEC,eAAe,EAAEC,YAAY,QAAQ,cAAc;AAE5F,SAASC,aAAa,QAAQ,qBAAqB;AAInD,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,SAASC,2BAA2B,QAAQ,+BAA+B;AAC3E,SAASC,yBAAyB,EAAEC,eAAe,QAAQ,yBAAyB;AAEpF;;;;;AAKA,OAAM,MAAOC,oBAAoB;EAC/B;;;;EAIAC,YACkBC,SAAoB,EACnBC,aAA4B;IAD7B,KAAAD,SAAS,GAATA,SAAS;IACR,KAAAC,aAAa,GAAbA,aAAa;EAC7B;EAYIC,KAAKA,CAAIA,KAAmB,EAAEC,OAAqB;IACxD,MAAMC,IAAI,GAAGd,eAAe,CAAC,IAAI,CAACU,SAAS,CAACK,GAAG,EAAEb,YAAY,CAACc,GAAG,CAAC;IAClE,MAAMC,EAAE,GAAGlB,aAAa,CAAC,IAAI,CAACW,SAAS,CAACK,GAAG,CAAC;IAE5C,OAAO,IAAIZ,aAAa,CAAC,IAAI,CAACQ,aAAa,EAAEC,KAAK,EAAEC,OAAO,EAAE,CAACK,cAAc,EAAEC,YAAY,KAAI;MAC5F,OAAO,IAAI,CAACR,aAAa,CAACS,SAAS,CAAC;QAClCN,IAAI;QACJO,YAAY,EAAEnB,YAAY,CAACc,GAAG;QAC9BM,UAAU,EAAEL,EAAE;QACdM,QAAQ,EAAGC,MAAM,IAAKA,MAAM,CAAChB,oBAAoB;QACjDI,KAAK;QACLC,OAAO,EAAEM,YAAY;QACrBD;OACD,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;;;;;;;EAOOO,OAAOA,CAACZ,OAAqB;IAClC,OAAO,IAAI,CAACD,KAAK,CAA2Cc,SAAS,EAAEb,OAAO,CAAC;EACjF;EAEA;;;;;;;;EAQO,MAAMc,MAAMA,CACjBC,IAAmC,EACnCf,OAAwB;IAExB,OAAON,eAAe,CAAC,MAAOW,cAAsC,IAAI;MACtE,IAAIU,IAAI,CAACA,IAAI,EAAE;QACbA,IAAI,CAACA,IAAI,GAAGA,IAAI,CAACA,IAAI,CAACC,QAAQ,EAAE;MAClC;MAEA,MAAMC,GAAG,GAAG,EAAE;MACd,IAAI,CAAC7B,eAAe,CAAC2B,IAAI,EAAEE,GAAG,CAAC,EAAE;QAC/B,MAAMA,GAAG;MACX;MAEA,MAAMhB,IAAI,GAAGd,eAAe,CAAC,IAAI,CAACU,SAAS,CAACK,GAAG,EAAEb,YAAY,CAACc,GAAG,CAAC;MAClE,MAAMC,EAAE,GAAGlB,aAAa,CAAC,IAAI,CAACW,SAAS,CAACK,GAAG,CAAC;MAE5C,MAAMgB,QAAQ,GAAG,MAAM,IAAI,CAACpB,aAAa,CAACgB,MAAM,CAAgC;QAC9EC,IAAI;QACJd,IAAI;QACJO,YAAY,EAAEnB,YAAY,CAACc,GAAG;QAC9BM,UAAU,EAAEL,EAAE;QACdJ,OAAO;QACPK;OACD,CAAC;MACF,MAAMc,GAAG,GAAG,IAAI5B,mBAAmB,CAAC,IAAI,CAACM,SAAS,EAAEqB,QAAQ,CAACP,MAAM,CAACP,EAAE,EAAE,IAAI,CAACN,aAAa,CAAC;MAC3F,OAAO,IAAIN,2BAA2B,CACpC0B,QAAQ,CAACP,MAAM,EACfO,QAAQ,CAACE,OAAO,EAChBF,QAAQ,CAACG,IAAI,EACbF,GAAG,EACH1B,yBAAyB,EAAE,CAC5B;IACH,CAAC,EAAE,IAAI,CAACK,aAAa,CAAC;EACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}