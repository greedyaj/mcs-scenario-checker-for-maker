{"ast":null,"code":"import { OrderByDocumentProducerComparator } from \"./orderByDocumentProducerComparator\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase\";\n/** @hidden */\nexport class OrderByQueryExecutionContext extends ParallelQueryExecutionContextBase {\n  /**\n   * Provides the OrderByQueryExecutionContext.\n   * This class is capable of handling orderby queries and dervives from ParallelQueryExecutionContextBase.\n   *\n   * When handling a parallelized query, it instantiates one instance of\n   * DocumentProcuder per target partition key range and aggregates the result of each.\n   *\n   * @param clientContext - The service endpoint to use to create the client.\n   * @param collectionLink - The Collection Link\n   * @param options - Represents the feed options.\n   * @param partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo\n   * @hidden\n   */\n  constructor(clientContext, collectionLink, query, options, partitionedQueryExecutionInfo, correlatedActivityId) {\n    // Calling on base class constructor\n    super(clientContext, collectionLink, query, options, partitionedQueryExecutionInfo, correlatedActivityId);\n    this.orderByComparator = new OrderByDocumentProducerComparator(this.sortOrders);\n  }\n  // Instance members are inherited\n  // Overriding documentProducerComparator for OrderByQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers which respects orderby sort order.\n   * @returns Comparator Function\n   * @hidden\n   */\n  documentProducerComparator(docProd1, docProd2) {\n    return this.orderByComparator.compare(docProd1, docProd2);\n  }\n}","map":{"version":3,"names":["OrderByDocumentProducerComparator","ParallelQueryExecutionContextBase","OrderByQueryExecutionContext","constructor","clientContext","collectionLink","query","options","partitionedQueryExecutionInfo","correlatedActivityId","orderByComparator","sortOrders","documentProducerComparator","docProd1","docProd2","compare"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/orderByQueryExecutionContext.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../ClientContext\";\nimport type { PartitionedQueryExecutionInfo } from \"../request/ErrorResponse\";\nimport type { FeedOptions } from \"../request/FeedOptions\";\nimport type { DocumentProducer } from \"./documentProducer\";\nimport type { ExecutionContext } from \"./ExecutionContext\";\nimport { OrderByDocumentProducerComparator } from \"./orderByDocumentProducerComparator\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase\";\nimport type { SqlQuerySpec } from \"./SqlQuerySpec\";\n\n/** @hidden */\nexport class OrderByQueryExecutionContext\n  extends ParallelQueryExecutionContextBase\n  implements ExecutionContext\n{\n  private orderByComparator: any;\n  /**\n   * Provides the OrderByQueryExecutionContext.\n   * This class is capable of handling orderby queries and dervives from ParallelQueryExecutionContextBase.\n   *\n   * When handling a parallelized query, it instantiates one instance of\n   * DocumentProcuder per target partition key range and aggregates the result of each.\n   *\n   * @param clientContext - The service endpoint to use to create the client.\n   * @param collectionLink - The Collection Link\n   * @param options - Represents the feed options.\n   * @param partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo\n   * @hidden\n   */\n  constructor(\n    clientContext: ClientContext,\n    collectionLink: string,\n    query: string | SqlQuerySpec,\n    options: FeedOptions,\n    partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo,\n    correlatedActivityId: string,\n  ) {\n    // Calling on base class constructor\n    super(\n      clientContext,\n      collectionLink,\n      query,\n      options,\n      partitionedQueryExecutionInfo,\n      correlatedActivityId,\n    );\n    this.orderByComparator = new OrderByDocumentProducerComparator(this.sortOrders);\n  }\n  // Instance members are inherited\n\n  // Overriding documentProducerComparator for OrderByQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers which respects orderby sort order.\n   * @returns Comparator Function\n   * @hidden\n   */\n  public documentProducerComparator(docProd1: DocumentProducer, docProd2: DocumentProducer): any {\n    return this.orderByComparator.compare(docProd1, docProd2);\n  }\n}\n"],"mappings":"AAOA,SAASA,iCAAiC,QAAQ,qCAAqC;AACvF,SAASC,iCAAiC,QAAQ,qCAAqC;AAGvF;AACA,OAAM,MAAOC,4BACX,SAAQD,iCAAiC;EAIzC;;;;;;;;;;;;;EAaAE,YACEC,aAA4B,EAC5BC,cAAsB,EACtBC,KAA4B,EAC5BC,OAAoB,EACpBC,6BAA4D,EAC5DC,oBAA4B;IAE5B;IACA,KAAK,CACHL,aAAa,EACbC,cAAc,EACdC,KAAK,EACLC,OAAO,EACPC,6BAA6B,EAC7BC,oBAAoB,CACrB;IACD,IAAI,CAACC,iBAAiB,GAAG,IAAIV,iCAAiC,CAAC,IAAI,CAACW,UAAU,CAAC;EACjF;EACA;EAEA;EACA;;;;;EAKOC,0BAA0BA,CAACC,QAA0B,EAAEC,QAA0B;IACtF,OAAO,IAAI,CAACJ,iBAAiB,CAACK,OAAO,CAACF,QAAQ,EAAEC,QAAQ,CAAC;EAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}