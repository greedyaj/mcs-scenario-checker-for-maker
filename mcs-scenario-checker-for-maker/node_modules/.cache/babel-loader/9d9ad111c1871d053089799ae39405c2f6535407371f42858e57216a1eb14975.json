{"ast":null,"code":"import { createUserDefinedFunctionUri, getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * Used to read, replace, or delete a specified User Definied Function by id.\n *\n * @see {@link UserDefinedFunction} to create, upsert, query, read all User Defined Functions.\n */\nexport class UserDefinedFunction {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  get url() {\n    return createUserDefinedFunctionUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link UserDefinedFunction}.\n   */\n  constructor(container, id, clientContext) {\n    this.container = container;\n    this.id = id;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Read the {@link UserDefinedFunctionDefinition} for the given {@link UserDefinedFunction}.\n   */\n  async read(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.read({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new UserDefinedFunctionResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Replace the given {@link UserDefinedFunction} with the specified {@link UserDefinedFunctionDefinition}.\n   * @param options -\n   */\n  async replace(body, options) {\n    return withDiagnostics(async diagnosticNode => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new UserDefinedFunctionResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Delete the given {@link UserDefined}.\n   */\n  async delete(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.delete({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new UserDefinedFunctionResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["createUserDefinedFunctionUri","getIdFromLink","getPathFromLink","isResourceValid","ResourceType","UserDefinedFunctionResponse","getEmptyCosmosDiagnostics","withDiagnostics","UserDefinedFunction","url","container","database","id","constructor","clientContext","read","options","diagnosticNode","path","response","resourceType","udf","resourceId","result","headers","code","replace","body","toString","err","delete"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/UserDefinedFunction/UserDefinedFunction.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createUserDefinedFunctionUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport type { RequestOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { UserDefinedFunctionDefinition } from \"./UserDefinedFunctionDefinition\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to read, replace, or delete a specified User Definied Function by id.\n *\n * @see {@link UserDefinedFunction} to create, upsert, query, read all User Defined Functions.\n */\nexport class UserDefinedFunction {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createUserDefinedFunctionUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link UserDefinedFunction}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Read the {@link UserDefinedFunctionDefinition} for the given {@link UserDefinedFunction}.\n   */\n  public async read(options?: RequestOptions): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<UserDefinedFunctionDefinition>({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link UserDefinedFunction} with the specified {@link UserDefinedFunctionDefinition}.\n   * @param options -\n   */\n  public async replace(\n    body: UserDefinedFunctionDefinition,\n    options?: RequestOptions,\n  ): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<UserDefinedFunctionDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link UserDefined}.\n   */\n  public async delete(options?: RequestOptions): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}