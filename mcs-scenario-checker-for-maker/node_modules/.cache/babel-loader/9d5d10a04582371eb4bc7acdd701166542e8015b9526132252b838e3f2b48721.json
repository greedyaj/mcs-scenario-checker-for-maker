{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport Constants from \"./Constants\";\nexport class IndexMetricWriter {\n  writeIndexMetrics(indexUtilizationInfo) {\n    let result = \"\";\n    result = this.writeBeforeIndexUtilizationInfo(result);\n    result = this.writeIndexUtilizationInfo(result, indexUtilizationInfo);\n    result = this.writeAfterIndexUtilizationInfo(result);\n    return result;\n  }\n  writeBeforeIndexUtilizationInfo(result) {\n    result = this.appendNewlineToResult(result);\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationInfo, 0);\n    return result;\n  }\n  writeIndexUtilizationInfo(result, indexUtilizationInfo) {\n    result = this.appendHeaderToResult(result, Constants.UtilizedSingleIndexes, 1);\n    for (const indexUtilizationEntity of indexUtilizationInfo.UtilizedSingleIndexes) {\n      result = this.writeSingleIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n    result = this.appendHeaderToResult(result, Constants.PotentialSingleIndexes, 1);\n    for (const indexUtilizationEntity of indexUtilizationInfo.PotentialSingleIndexes) {\n      result = this.writeSingleIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n    result = this.appendHeaderToResult(result, Constants.UtilizedCompositeIndexes, 1);\n    for (const indexUtilizationEntity of indexUtilizationInfo.UtilizedCompositeIndexes) {\n      result = this.writeCompositeIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n    result = this.appendHeaderToResult(result, Constants.PotentialCompositeIndexes, 1);\n    for (const indexUtilizationEntity of indexUtilizationInfo.PotentialCompositeIndexes) {\n      result = this.writeCompositeIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n    return result;\n  }\n  writeAfterIndexUtilizationInfo(result) {\n    return result;\n  }\n  writeSingleIndexUtilizationEntity(result, indexUtilizationEntity) {\n    result = this.appendHeaderToResult(result, `${Constants.IndexExpression}: ${indexUtilizationEntity.IndexSpec}`, 2);\n    result = this.appendHeaderToResult(result, `${Constants.IndexImpactScore}: ${indexUtilizationEntity.IndexImpactScore}`, 2);\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationSeparator, 2);\n    return result;\n  }\n  writeCompositeIndexUtilizationEntity(result, indexUtilizationEntity) {\n    result = this.appendHeaderToResult(result, `${Constants.IndexExpression}: ${indexUtilizationEntity.IndexSpecs.join(\", \")}`, 2);\n    result = this.appendHeaderToResult(result, `${Constants.IndexImpactScore}: ${indexUtilizationEntity.IndexImpactScore}`, 2);\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationSeparator, 2);\n    return result;\n  }\n  appendNewlineToResult(result) {\n    return this.appendHeaderToResult(result, \"\", 0);\n  }\n  appendHeaderToResult(result, headerTitle, indentLevel) {\n    const Indent = \"  \";\n    const header = `${Indent.repeat(indentLevel)}${headerTitle}\\n`;\n    result += header;\n    return result;\n  }\n}","map":{"version":3,"names":["Constants","IndexMetricWriter","writeIndexMetrics","indexUtilizationInfo","result","writeBeforeIndexUtilizationInfo","writeIndexUtilizationInfo","writeAfterIndexUtilizationInfo","appendNewlineToResult","appendHeaderToResult","IndexUtilizationInfo","UtilizedSingleIndexes","indexUtilizationEntity","writeSingleIndexUtilizationEntity","PotentialSingleIndexes","UtilizedCompositeIndexes","writeCompositeIndexUtilizationEntity","PotentialCompositeIndexes","IndexExpression","IndexSpec","IndexImpactScore","IndexUtilizationSeparator","IndexSpecs","join","headerTitle","indentLevel","Indent","header","repeat"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/indexMetrics/IndexMetricWriter.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport Constants from \"./Constants\";\nimport type { CompositeIndexUtilizationEntity } from \"./CompositeIndexUtilizationEntity\";\nimport type { IndexUtilizationInfo } from \"./IndexUtilizationInfo\";\nimport type { SingleIndexUtilizationEntity } from \"./SingleIndexUtilizationEntity\";\n\nexport class IndexMetricWriter {\n  public writeIndexMetrics(indexUtilizationInfo: IndexUtilizationInfo): string {\n    let result = \"\";\n    result = this.writeBeforeIndexUtilizationInfo(result);\n    result = this.writeIndexUtilizationInfo(result, indexUtilizationInfo);\n    result = this.writeAfterIndexUtilizationInfo(result);\n    return result;\n  }\n\n  protected writeBeforeIndexUtilizationInfo(result: string): string {\n    result = this.appendNewlineToResult(result);\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationInfo, 0);\n    return result;\n  }\n\n  protected writeIndexUtilizationInfo(\n    result: string,\n    indexUtilizationInfo: IndexUtilizationInfo,\n  ): string {\n    result = this.appendHeaderToResult(result, Constants.UtilizedSingleIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.UtilizedSingleIndexes) {\n      result = this.writeSingleIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n    result = this.appendHeaderToResult(result, Constants.PotentialSingleIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.PotentialSingleIndexes) {\n      result = this.writeSingleIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n\n    result = this.appendHeaderToResult(result, Constants.UtilizedCompositeIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.UtilizedCompositeIndexes) {\n      result = this.writeCompositeIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n\n    result = this.appendHeaderToResult(result, Constants.PotentialCompositeIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.PotentialCompositeIndexes) {\n      result = this.writeCompositeIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n    return result;\n  }\n\n  protected writeAfterIndexUtilizationInfo(result: string): string {\n    return result;\n  }\n\n  private writeSingleIndexUtilizationEntity(\n    result: string,\n    indexUtilizationEntity: SingleIndexUtilizationEntity,\n  ): string {\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexExpression}: ${indexUtilizationEntity.IndexSpec}`,\n      2,\n    );\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexImpactScore}: ${indexUtilizationEntity.IndexImpactScore}`,\n      2,\n    );\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationSeparator, 2);\n    return result;\n  }\n\n  private writeCompositeIndexUtilizationEntity(\n    result: string,\n    indexUtilizationEntity: CompositeIndexUtilizationEntity,\n  ): string {\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexExpression}: ${indexUtilizationEntity.IndexSpecs.join(\", \")}`,\n      2,\n    );\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexImpactScore}: ${indexUtilizationEntity.IndexImpactScore}`,\n      2,\n    );\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationSeparator, 2);\n    return result;\n  }\n\n  private appendNewlineToResult(result: string): string {\n    return this.appendHeaderToResult(result, \"\", 0);\n  }\n\n  private appendHeaderToResult(result: string, headerTitle: string, indentLevel: number): string {\n    const Indent = \"  \";\n    const header = `${Indent.repeat(indentLevel)}${headerTitle}\\n`;\n    result += header;\n    return result;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}