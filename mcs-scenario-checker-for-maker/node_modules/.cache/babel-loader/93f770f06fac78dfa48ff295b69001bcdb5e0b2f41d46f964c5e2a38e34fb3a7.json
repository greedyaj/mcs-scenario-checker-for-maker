{"ast":null,"code":"import { createDocumentUri, getIdFromLink, getPathFromLink, isItemResourceValid, ResourceType, StatusCodes } from \"../../common\";\nimport { convertToInternalPartitionKey } from \"../../documents\";\nimport { ItemResponse } from \"./ItemResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport { setPartitionKeyIfUndefined } from \"../../extractPartitionKey\";\n/**\n * Used to perform operations on a specific item.\n *\n * @see {@link Items} for operations on all items; see `container.items`.\n */\nexport class Item {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  get url() {\n    return createDocumentUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Item}.\n   * @param partitionKey - The primary key of the given {@link Item} (only for partitioned containers).\n   */\n  constructor(container, id, clientContext, partitionKey) {\n    this.container = container;\n    this.id = id;\n    this.clientContext = clientContext;\n    this.partitionKey = partitionKey === undefined ? undefined : convertToInternalPartitionKey(partitionKey);\n  }\n  /**\n   * Read the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   * If the type, T, is a class, it won't pass `typeof` comparisons, because it won't have a match prototype.\n   * It's recommended to only use interfaces.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options - Additional options for the request\n   *\n   * @example Using custom type for response\n   * ```typescript\n   * interface TodoItem {\n   *   title: string;\n   *   done: bool;\n   *   id: string;\n   * }\n   *\n   * let item: TodoItem;\n   * ({body: item} = await item.read<TodoItem>());\n   * ```\n   */\n  async read(options = {}) {\n    return withDiagnostics(async diagnosticNode => {\n      this.partitionKey = await setPartitionKeyIfUndefined(diagnosticNode, this.container, this.partitionKey);\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      let response;\n      try {\n        response = await this.clientContext.read({\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: this.partitionKey,\n          diagnosticNode\n        });\n      } catch (error) {\n        if (error.code !== StatusCodes.NotFound) {\n          throw error;\n        }\n        response = error;\n      }\n      return new ItemResponse(response.result, response.headers, response.code, response.substatus, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  async replace(body, options = {}) {\n    return withDiagnostics(async diagnosticNode => {\n      this.partitionKey = await setPartitionKeyIfUndefined(diagnosticNode, this.container, this.partitionKey);\n      const err = {};\n      if (!isItemResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode\n      });\n      return new ItemResponse(response.result, response.headers, response.code, response.substatus, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Delete the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options - Additional options for the request\n   */\n  async delete(options = {}) {\n    return withDiagnostics(async diagnosticNode => {\n      this.partitionKey = await setPartitionKeyIfUndefined(diagnosticNode, this.container, this.partitionKey);\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.delete({\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode\n      });\n      return new ItemResponse(response.result, response.headers, response.code, response.substatus, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Perform a JSONPatch on the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options - Additional options for the request\n   */\n  async patch(body, options = {}) {\n    return withDiagnostics(async diagnosticNode => {\n      this.partitionKey = await setPartitionKeyIfUndefined(diagnosticNode, this.container, this.partitionKey);\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.patch({\n        body,\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode\n      });\n      return new ItemResponse(response.result, response.headers, response.code, response.substatus, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["createDocumentUri","getIdFromLink","getPathFromLink","isItemResourceValid","ResourceType","StatusCodes","convertToInternalPartitionKey","ItemResponse","getEmptyCosmosDiagnostics","withDiagnostics","setPartitionKeyIfUndefined","Item","url","container","database","id","constructor","clientContext","partitionKey","undefined","read","options","diagnosticNode","path","response","resourceType","item","resourceId","error","code","NotFound","result","headers","substatus","replace","body","err","delete","patch"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/Item/Item.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createDocumentUri,\n  getIdFromLink,\n  getPathFromLink,\n  isItemResourceValid,\n  ResourceType,\n  StatusCodes,\n} from \"../../common\";\nimport type { PartitionKey, PartitionKeyInternal } from \"../../documents\";\nimport { convertToInternalPartitionKey } from \"../../documents\";\nimport type { RequestOptions, Response } from \"../../request\";\nimport type { PatchRequestBody } from \"../../utils/patch\";\nimport type { Container } from \"../Container\";\nimport type { Resource } from \"../Resource\";\nimport type { ItemDefinition } from \"./ItemDefinition\";\nimport { ItemResponse } from \"./ItemResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport { setPartitionKeyIfUndefined } from \"../../extractPartitionKey\";\n\n/**\n * Used to perform operations on a specific item.\n *\n * @see {@link Items} for operations on all items; see `container.items`.\n */\nexport class Item {\n  private partitionKey: PartitionKeyInternal;\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createDocumentUri(this.container.database.id, this.container.id, this.id);\n  }\n\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Item}.\n   * @param partitionKey - The primary key of the given {@link Item} (only for partitioned containers).\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n    partitionKey?: PartitionKey,\n  ) {\n    this.partitionKey =\n      partitionKey === undefined ? undefined : convertToInternalPartitionKey(partitionKey);\n  }\n\n  /**\n   * Read the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   * If the type, T, is a class, it won't pass `typeof` comparisons, because it won't have a match prototype.\n   * It's recommended to only use interfaces.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options - Additional options for the request\n   *\n   * @example Using custom type for response\n   * ```typescript\n   * interface TodoItem {\n   *   title: string;\n   *   done: bool;\n   *   id: string;\n   * }\n   *\n   * let item: TodoItem;\n   * ({body: item} = await item.read<TodoItem>());\n   * ```\n   */\n  public async read<T extends ItemDefinition = any>(\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      let response: Response<T & Resource>;\n      try {\n        response = await this.clientContext.read<T>({\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: this.partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (error.code !== StatusCodes.NotFound) {\n          throw error;\n        }\n        response = error;\n      }\n\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the item's definition.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - The definition to replace the existing {@link Item}'s definition with.\n   * @param options - Additional options for the request\n   */\n  public replace(\n    body: ItemDefinition,\n    options?: RequestOptions,\n  ): Promise<ItemResponse<ItemDefinition>>;\n  /**\n   * Replace the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - The definition to replace the existing {@link Item}'s definition with.\n   * @param options - Additional options for the request\n   */\n  public replace<T extends ItemDefinition>(\n    body: T,\n    options?: RequestOptions,\n  ): Promise<ItemResponse<T>>;\n  public async replace<T extends ItemDefinition>(\n    body: T,\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      const err = {};\n      if (!isItemResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<T>({\n        body,\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode,\n      });\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options - Additional options for the request\n   */\n  public async delete<T extends ItemDefinition = any>(\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<T>({\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode,\n      });\n\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Perform a JSONPatch on the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options - Additional options for the request\n   */\n  public async patch<T extends ItemDefinition = any>(\n    body: PatchRequestBody,\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.patch<T>({\n        body,\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode,\n      });\n\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}