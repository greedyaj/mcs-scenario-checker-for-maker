{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\nexport class RuntimeExecutionTimes {\n  constructor(queryEngineExecutionTime, systemFunctionExecutionTime, userDefinedFunctionExecutionTime) {\n    this.queryEngineExecutionTime = queryEngineExecutionTime;\n    this.systemFunctionExecutionTime = systemFunctionExecutionTime;\n    this.userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime;\n  }\n  /**\n   * returns a new RuntimeExecutionTimes instance that is the addition of this and the arguments.\n   */\n  add(...runtimeExecutionTimesArray) {\n    let queryEngineExecutionTime = this.queryEngineExecutionTime;\n    let systemFunctionExecutionTime = this.systemFunctionExecutionTime;\n    let userDefinedFunctionExecutionTime = this.userDefinedFunctionExecutionTime;\n    for (const runtimeExecutionTimes of runtimeExecutionTimesArray) {\n      if (runtimeExecutionTimes == null) {\n        throw new Error(\"runtimeExecutionTimes has null or undefined item(s)\");\n      }\n      queryEngineExecutionTime = queryEngineExecutionTime.add(runtimeExecutionTimes.queryEngineExecutionTime);\n      systemFunctionExecutionTime = systemFunctionExecutionTime.add(runtimeExecutionTimes.systemFunctionExecutionTime);\n      userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime.add(runtimeExecutionTimes.userDefinedFunctionExecutionTime);\n    }\n    return new RuntimeExecutionTimes(queryEngineExecutionTime, systemFunctionExecutionTime, userDefinedFunctionExecutionTime);\n  }\n  /**\n   * Output the RuntimeExecutionTimes as a delimited string.\n   */\n  toDelimitedString() {\n    return `${QueryMetricsConstants.SystemFunctionExecuteTimeInMs}=${this.systemFunctionExecutionTime.totalMilliseconds()};` + `${QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs}=${this.userDefinedFunctionExecutionTime.totalMilliseconds()}`;\n  }\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class that is\n   *  the aggregation of an array of RuntimeExecutionTimes.\n   */\n  static createFromArray(runtimeExecutionTimesArray) {\n    if (runtimeExecutionTimesArray == null) {\n      throw new Error(\"runtimeExecutionTimesArray is null or undefined item(s)\");\n    }\n    return RuntimeExecutionTimes.zero.add(...runtimeExecutionTimesArray);\n  }\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class this is deserialized from a delimited string.\n   */\n  static createFromDelimitedString(delimitedString) {\n    const metrics = parseDelimitedString(delimitedString);\n    const vmExecutionTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs);\n    const indexLookupTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs);\n    const documentLoadTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs);\n    const documentWriteTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs);\n    let queryEngineExecutionTime = TimeSpan.zero;\n    queryEngineExecutionTime = queryEngineExecutionTime.add(vmExecutionTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(indexLookupTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentLoadTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentWriteTime);\n    return new RuntimeExecutionTimes(queryEngineExecutionTime, timeSpanFromMetrics(metrics, QueryMetricsConstants.SystemFunctionExecuteTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs));\n  }\n}\nRuntimeExecutionTimes.zero = new RuntimeExecutionTimes(TimeSpan.zero, TimeSpan.zero, TimeSpan.zero);","map":{"version":3,"names":["QueryMetricsConstants","parseDelimitedString","timeSpanFromMetrics","TimeSpan","RuntimeExecutionTimes","constructor","queryEngineExecutionTime","systemFunctionExecutionTime","userDefinedFunctionExecutionTime","add","runtimeExecutionTimesArray","runtimeExecutionTimes","Error","toDelimitedString","SystemFunctionExecuteTimeInMs","totalMilliseconds","UserDefinedFunctionExecutionTimeInMs","createFromArray","zero","createFromDelimitedString","delimitedString","metrics","vmExecutionTime","VMExecutionTimeInMs","indexLookupTime","IndexLookupTimeInMs","documentLoadTime","DocumentLoadTimeInMs","documentWriteTime","DocumentWriteTimeInMs","subtract"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryMetrics/runtimeExecutionTimes.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class RuntimeExecutionTimes {\n  constructor(\n    public readonly queryEngineExecutionTime: TimeSpan,\n    public readonly systemFunctionExecutionTime: TimeSpan,\n    public readonly userDefinedFunctionExecutionTime: TimeSpan,\n  ) {}\n\n  /**\n   * returns a new RuntimeExecutionTimes instance that is the addition of this and the arguments.\n   */\n  public add(...runtimeExecutionTimesArray: RuntimeExecutionTimes[]): RuntimeExecutionTimes {\n    let queryEngineExecutionTime = this.queryEngineExecutionTime;\n    let systemFunctionExecutionTime = this.systemFunctionExecutionTime;\n    let userDefinedFunctionExecutionTime = this.userDefinedFunctionExecutionTime;\n\n    for (const runtimeExecutionTimes of runtimeExecutionTimesArray) {\n      if (runtimeExecutionTimes == null) {\n        throw new Error(\"runtimeExecutionTimes has null or undefined item(s)\");\n      }\n\n      queryEngineExecutionTime = queryEngineExecutionTime.add(\n        runtimeExecutionTimes.queryEngineExecutionTime,\n      );\n      systemFunctionExecutionTime = systemFunctionExecutionTime.add(\n        runtimeExecutionTimes.systemFunctionExecutionTime,\n      );\n      userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime.add(\n        runtimeExecutionTimes.userDefinedFunctionExecutionTime,\n      );\n    }\n\n    return new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      systemFunctionExecutionTime,\n      userDefinedFunctionExecutionTime,\n    );\n  }\n\n  /**\n   * Output the RuntimeExecutionTimes as a delimited string.\n   */\n  public toDelimitedString(): string {\n    return (\n      `${\n        QueryMetricsConstants.SystemFunctionExecuteTimeInMs\n      }=${this.systemFunctionExecutionTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs\n      }=${this.userDefinedFunctionExecutionTime.totalMilliseconds()}`\n    );\n  }\n\n  public static readonly zero = new RuntimeExecutionTimes(\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n  );\n\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class that is\n   *  the aggregation of an array of RuntimeExecutionTimes.\n   */\n  public static createFromArray(\n    runtimeExecutionTimesArray: RuntimeExecutionTimes[],\n  ): RuntimeExecutionTimes {\n    if (runtimeExecutionTimesArray == null) {\n      throw new Error(\"runtimeExecutionTimesArray is null or undefined item(s)\");\n    }\n\n    return RuntimeExecutionTimes.zero.add(...runtimeExecutionTimesArray);\n  }\n\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(delimitedString: string): RuntimeExecutionTimes {\n    const metrics = parseDelimitedString(delimitedString);\n\n    const vmExecutionTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs);\n    const indexLookupTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs);\n    const documentLoadTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.DocumentLoadTimeInMs,\n    );\n    const documentWriteTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.DocumentWriteTimeInMs,\n    );\n\n    let queryEngineExecutionTime = TimeSpan.zero;\n    queryEngineExecutionTime = queryEngineExecutionTime.add(vmExecutionTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(indexLookupTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentLoadTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentWriteTime);\n    return new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.SystemFunctionExecuteTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs),\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}