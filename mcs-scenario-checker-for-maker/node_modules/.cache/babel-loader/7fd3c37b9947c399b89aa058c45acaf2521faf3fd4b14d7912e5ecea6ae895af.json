{"ast":null,"code":"import { hashV2PartitionKey } from \"./v2\";\n/**\n * Generate Hash for a `Multi Hash` type partition.\n * @param partitionKey - to be hashed.\n * @returns\n */\nexport function hashMultiHashPartitionKey(partitionKey) {\n  return partitionKey.map(keys => hashV2PartitionKey([keys])).join(\"\");\n}","map":{"version":3,"names":["hashV2PartitionKey","hashMultiHashPartitionKey","partitionKey","map","keys","join"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/utils/hashing/multiHash.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PrimitivePartitionKeyValue } from \"../../documents\";\nimport { hashV2PartitionKey } from \"./v2\";\n\n/**\n * Generate Hash for a `Multi Hash` type partition.\n * @param partitionKey - to be hashed.\n * @returns\n */\nexport function hashMultiHashPartitionKey(partitionKey: PrimitivePartitionKeyValue[]): string {\n  return partitionKey.map((keys) => hashV2PartitionKey([keys])).join(\"\");\n}\n"],"mappings":"AAGA,SAASA,kBAAkB,QAAQ,MAAM;AAEzC;;;;;AAKA,OAAM,SAAUC,yBAAyBA,CAACC,YAA0C;EAClF,OAAOA,YAAY,CAACC,GAAG,CAAEC,IAAI,IAAKJ,kBAAkB,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}