{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { TimeSpan } from \"./timeSpan\";\n/**\n * @hidden\n */\nexport function parseDelimitedString(delimitedString) {\n  if (delimitedString == null) {\n    throw new Error(\"delimitedString is null or undefined\");\n  }\n  const metrics = {};\n  const headerAttributes = delimitedString.split(\";\");\n  for (const attribute of headerAttributes) {\n    const attributeKeyValue = attribute.split(\"=\");\n    if (attributeKeyValue.length !== 2) {\n      throw new Error(\"recieved a malformed delimited string\");\n    }\n    const attributeKey = attributeKeyValue[0];\n    const attributeValue = parseFloat(attributeKeyValue[1]);\n    metrics[attributeKey] = attributeValue;\n  }\n  return metrics;\n}\n/**\n * @hidden\n */\nexport function timeSpanFromMetrics(metrics /* TODO: any */, key) {\n  if (key in metrics) {\n    return TimeSpan.fromMilliseconds(metrics[key]);\n  }\n  return TimeSpan.zero;\n}\n/**\n * @hidden\n */\nexport function isNumeric(input) {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n}","map":{"version":3,"names":["TimeSpan","parseDelimitedString","delimitedString","Error","metrics","headerAttributes","split","attribute","attributeKeyValue","length","attributeKey","attributeValue","parseFloat","timeSpanFromMetrics","key","fromMilliseconds","zero","isNumeric","input","isNaN","isFinite"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryMetrics/queryMetricsUtils.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { TimeSpan } from \"./timeSpan\";\n\n/**\n * @hidden\n */\nexport function parseDelimitedString(delimitedString: string): {\n  [key: string]: any;\n} {\n  if (delimitedString == null) {\n    throw new Error(\"delimitedString is null or undefined\");\n  }\n\n  const metrics: { [key: string]: any } = {};\n\n  const headerAttributes = delimitedString.split(\";\");\n  for (const attribute of headerAttributes) {\n    const attributeKeyValue = attribute.split(\"=\");\n\n    if (attributeKeyValue.length !== 2) {\n      throw new Error(\"recieved a malformed delimited string\");\n    }\n\n    const attributeKey = attributeKeyValue[0];\n    const attributeValue = parseFloat(attributeKeyValue[1]);\n\n    metrics[attributeKey] = attributeValue;\n  }\n\n  return metrics;\n}\n\n/**\n * @hidden\n */\nexport function timeSpanFromMetrics(\n  metrics: { [key: string]: any } /* TODO: any */,\n  key: string,\n): TimeSpan {\n  if (key in metrics) {\n    return TimeSpan.fromMilliseconds(metrics[key]);\n  }\n\n  return TimeSpan.zero;\n}\n\n/**\n * @hidden\n */\nexport function isNumeric(input: unknown): boolean {\n  return !isNaN(parseFloat(input as string)) && isFinite(input as number);\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,QAAQ,QAAQ,YAAY;AAErC;;;AAGA,OAAM,SAAUC,oBAAoBA,CAACC,eAAuB;EAG1D,IAAIA,eAAe,IAAI,IAAI,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACzD;EAEA,MAAMC,OAAO,GAA2B,EAAE;EAE1C,MAAMC,gBAAgB,GAAGH,eAAe,CAACI,KAAK,CAAC,GAAG,CAAC;EACnD,KAAK,MAAMC,SAAS,IAAIF,gBAAgB,EAAE;IACxC,MAAMG,iBAAiB,GAAGD,SAAS,CAACD,KAAK,CAAC,GAAG,CAAC;IAE9C,IAAIE,iBAAiB,CAACC,MAAM,KAAK,CAAC,EAAE;MAClC,MAAM,IAAIN,KAAK,CAAC,uCAAuC,CAAC;IAC1D;IAEA,MAAMO,YAAY,GAAGF,iBAAiB,CAAC,CAAC,CAAC;IACzC,MAAMG,cAAc,GAAGC,UAAU,CAACJ,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAEvDJ,OAAO,CAACM,YAAY,CAAC,GAAGC,cAAc;EACxC;EAEA,OAAOP,OAAO;AAChB;AAEA;;;AAGA,OAAM,SAAUS,mBAAmBA,CACjCT,OAA+B,CAAC,iBAChCU,GAAW;EAEX,IAAIA,GAAG,IAAIV,OAAO,EAAE;IAClB,OAAOJ,QAAQ,CAACe,gBAAgB,CAACX,OAAO,CAACU,GAAG,CAAC,CAAC;EAChD;EAEA,OAAOd,QAAQ,CAACgB,IAAI;AACtB;AAEA;;;AAGA,OAAM,SAAUC,SAASA,CAACC,KAAc;EACtC,OAAO,CAACC,KAAK,CAACP,UAAU,CAACM,KAAe,CAAC,CAAC,IAAIE,QAAQ,CAACF,KAAe,CAAC;AACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}