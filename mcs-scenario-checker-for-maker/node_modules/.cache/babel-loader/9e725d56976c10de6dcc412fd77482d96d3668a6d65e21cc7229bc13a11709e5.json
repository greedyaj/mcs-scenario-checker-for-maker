{"ast":null,"code":"import { Constants, isResourceValid, ResourceType } from \"../../common\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport { OfferResponse } from \"./OfferResponse\";\n/**\n * Use to read or replace an existing {@link Offer} by id.\n *\n * @see {@link Offers} to query or read all offers.\n */\nexport class Offer {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  get url() {\n    return `/${Constants.Path.OffersPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the Database Account.\n   * @param id - The id of the given {@link Offer}.\n   */\n  constructor(client, id, clientContext) {\n    this.client = client;\n    this.id = id;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Read the {@link OfferDefinition} for the given {@link Offer}.\n   */\n  async read(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const response = await this.clientContext.read({\n        path: this.url,\n        resourceType: ResourceType.offer,\n        resourceId: this.id,\n        options,\n        diagnosticNode\n      });\n      return new OfferResponse(response.result, response.headers, response.code, getEmptyCosmosDiagnostics(), this);\n    }, this.clientContext);\n  }\n  /**\n   * Replace the given {@link Offer} with the specified {@link OfferDefinition}.\n   * @param body - The specified {@link OfferDefinition}\n   */\n  async replace(body, options) {\n    return withDiagnostics(async diagnosticNode => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const response = await this.clientContext.replace({\n        body,\n        path: this.url,\n        resourceType: ResourceType.offer,\n        resourceId: this.id,\n        options,\n        diagnosticNode\n      });\n      return new OfferResponse(response.result, response.headers, response.code, getEmptyCosmosDiagnostics(), this);\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["Constants","isResourceValid","ResourceType","getEmptyCosmosDiagnostics","withDiagnostics","OfferResponse","Offer","url","Path","OffersPathSegment","id","constructor","client","clientContext","read","options","diagnosticNode","response","path","resourceType","offer","resourceId","result","headers","code","replace","body","err"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/Offer/Offer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport { Constants, isResourceValid, ResourceType } from \"../../common\";\nimport type { CosmosClient } from \"../../CosmosClient\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport type { RequestOptions } from \"../../request\";\nimport type { OfferDefinition } from \"./OfferDefinition\";\nimport { OfferResponse } from \"./OfferResponse\";\n\n/**\n * Use to read or replace an existing {@link Offer} by id.\n *\n * @see {@link Offers} to query or read all offers.\n */\nexport class Offer {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return `/${Constants.Path.OffersPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the Database Account.\n   * @param id - The id of the given {@link Offer}.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Read the {@link OfferDefinition} for the given {@link Offer}.\n   */\n  public async read(options?: RequestOptions): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const response = await this.clientContext.read<OfferDefinition>({\n        path: this.url,\n        resourceType: ResourceType.offer,\n        resourceId: this.id,\n        options,\n        diagnosticNode,\n      });\n      return new OfferResponse(\n        response.result,\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        this,\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link Offer} with the specified {@link OfferDefinition}.\n   * @param body - The specified {@link OfferDefinition}\n   */\n  public async replace(body: OfferDefinition, options?: RequestOptions): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const response = await this.clientContext.replace<OfferDefinition>({\n        body,\n        path: this.url,\n        resourceType: ResourceType.offer,\n        resourceId: this.id,\n        options,\n        diagnosticNode,\n      });\n      return new OfferResponse(\n        response.result,\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        this,\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"AAGA,SAASA,SAAS,EAAEC,eAAe,EAAEC,YAAY,QAAQ,cAAc;AAEvE,SAASC,yBAAyB,EAAEC,eAAe,QAAQ,yBAAyB;AAIpF,SAASC,aAAa,QAAQ,iBAAiB;AAE/C;;;;;AAKA,OAAM,MAAOC,KAAK;EAChB;;;EAGA,IAAWC,GAAGA,CAAA;IACZ,OAAO,IAAIP,SAAS,CAACQ,IAAI,CAACC,iBAAiB,IAAI,IAAI,CAACC,EAAE,EAAE;EAC1D;EACA;;;;;EAKAC,YACkBC,MAAoB,EACpBF,EAAU,EACTG,aAA4B;IAF7B,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAF,EAAE,GAAFA,EAAE;IACD,KAAAG,aAAa,GAAbA,aAAa;EAC7B;EAEH;;;EAGO,MAAMC,IAAIA,CAACC,OAAwB;IACxC,OAAOX,eAAe,CAAC,MAAOY,cAAsC,IAAI;MACtE,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACJ,aAAa,CAACC,IAAI,CAAkB;QAC9DI,IAAI,EAAE,IAAI,CAACX,GAAG;QACdY,YAAY,EAAEjB,YAAY,CAACkB,KAAK;QAChCC,UAAU,EAAE,IAAI,CAACX,EAAE;QACnBK,OAAO;QACPC;OACD,CAAC;MACF,OAAO,IAAIX,aAAa,CACtBY,QAAQ,CAACK,MAAM,EACfL,QAAQ,CAACM,OAAO,EAChBN,QAAQ,CAACO,IAAI,EACbrB,yBAAyB,EAAE,EAC3B,IAAI,CACL;IACH,CAAC,EAAE,IAAI,CAACU,aAAa,CAAC;EACxB;EAEA;;;;EAIO,MAAMY,OAAOA,CAACC,IAAqB,EAAEX,OAAwB;IAClE,OAAOX,eAAe,CAAC,MAAOY,cAAsC,IAAI;MACtE,MAAMW,GAAG,GAAG,EAAE;MACd,IAAI,CAAC1B,eAAe,CAACyB,IAAI,EAAEC,GAAG,CAAC,EAAE;QAC/B,MAAMA,GAAG;MACX;MACA,MAAMV,QAAQ,GAAG,MAAM,IAAI,CAACJ,aAAa,CAACY,OAAO,CAAkB;QACjEC,IAAI;QACJR,IAAI,EAAE,IAAI,CAACX,GAAG;QACdY,YAAY,EAAEjB,YAAY,CAACkB,KAAK;QAChCC,UAAU,EAAE,IAAI,CAACX,EAAE;QACnBK,OAAO;QACPC;OACD,CAAC;MACF,OAAO,IAAIX,aAAa,CACtBY,QAAQ,CAACK,MAAM,EACfL,QAAQ,CAACM,OAAO,EAChBN,QAAQ,CAACO,IAAI,EACbrB,yBAAyB,EAAE,EAC3B,IAAI,CACL;IACH,CAAC,EAAE,IAAI,CAACU,aAAa,CAAC;EACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}