{"ast":null,"code":"import { Constants } from \"../../common\";\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\nexport class ChangeFeedIteratorResponse {\n  /**\n   * @internal\n   */\n  constructor(\n  /**\n   * Gets the items returned in the response from Azure Cosmos DB\n   */\n  result,\n  /**\n   * Gets the number of items returned in the response from Azure Cosmos DB\n   */\n  count,\n  /**\n   * Gets the status code of the response from Azure Cosmos DB\n   */\n  statusCode,\n  /**\n   * Headers related to cosmos DB and change feed.\n   */\n  headers,\n  /**\n   * Cosmos Diagnostic Object.\n   */\n  diagnostics,\n  /**\n   * Gets the subStatusCodes of the response from Azure Cosmos DB. Useful in partition split or partition gone.\n   */\n  subStatusCode) {\n    this.result = result;\n    this.count = count;\n    this.statusCode = statusCode;\n    this.diagnostics = diagnostics;\n    this.subStatusCode = subStatusCode;\n    this.headers = headers;\n  }\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n  get requestCharge() {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n  get activityId() {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   */\n  get continuationToken() {\n    return this.headers[Constants.HttpHeaders.ContinuationToken];\n  }\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n  get sessionToken() {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n}","map":{"version":3,"names":["Constants","ChangeFeedIteratorResponse","constructor","result","count","statusCode","headers","diagnostics","subStatusCode","requestCharge","rus","HttpHeaders","RequestCharge","parseInt","activityId","ActivityId","continuationToken","ContinuationToken","sessionToken","SessionToken"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/ChangeFeed/ChangeFeedIteratorResponse.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { Constants } from \"../../common\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\n\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\nexport class ChangeFeedIteratorResponse<T> {\n  /**\n   * @internal\n   */\n  constructor(\n    /**\n     * Gets the items returned in the response from Azure Cosmos DB\n     */\n    public readonly result: T,\n    /**\n     * Gets the number of items returned in the response from Azure Cosmos DB\n     */\n    public readonly count: number,\n    /**\n     * Gets the status code of the response from Azure Cosmos DB\n     */\n    public readonly statusCode: number,\n    /**\n     * Headers related to cosmos DB and change feed.\n     */\n    headers: CosmosHeaders,\n    /**\n     * Cosmos Diagnostic Object.\n     */\n    public readonly diagnostics: CosmosDiagnostics,\n    /**\n     * Gets the subStatusCodes of the response from Azure Cosmos DB. Useful in partition split or partition gone.\n     */\n    public readonly subStatusCode?: number,\n  ) {\n    this.headers = headers;\n  }\n\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n  public get requestCharge(): number {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   */\n  public get continuationToken(): string {\n    return this.headers[Constants.HttpHeaders.ContinuationToken];\n  }\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n  public get sessionToken(): string {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n  /**\n   * Response headers of the response from Azure Cosmos DB\n   */\n  public headers: CosmosHeaders;\n}\n"],"mappings":"AAGA,SAASA,SAAS,QAAQ,cAAc;AAGxC;;;AAGA,OAAM,MAAOC,0BAA0B;EACrC;;;EAGAC;EACE;;;EAGgBC,MAAS;EACzB;;;EAGgBC,KAAa;EAC7B;;;EAGgBC,UAAkB;EAClC;;;EAGAC,OAAsB;EACtB;;;EAGgBC,WAA8B;EAC9C;;;EAGgBC,aAAsB;IApBtB,KAAAL,MAAM,GAANA,MAAM;IAIN,KAAAC,KAAK,GAALA,KAAK;IAIL,KAAAC,UAAU,GAAVA,UAAU;IAQV,KAAAE,WAAW,GAAXA,WAAW;IAIX,KAAAC,aAAa,GAAbA,aAAa;IAE7B,IAAI,CAACF,OAAO,GAAGA,OAAO;EACxB;EAEA;;;EAGA,IAAWG,aAAaA,CAAA;IACtB,MAAMC,GAAG,GAAG,IAAI,CAACJ,OAAO,CAACN,SAAS,CAACW,WAAW,CAACC,aAAa,CAAC;IAC7D,OAAOF,GAAG,GAAGG,QAAQ,CAACH,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI;EACvC;EAEA;;;EAGA,IAAWI,UAAUA,CAAA;IACnB,OAAO,IAAI,CAACR,OAAO,CAACN,SAAS,CAACW,WAAW,CAACI,UAAU,CAAC;EACvD;EAEA;;;EAGA,IAAWC,iBAAiBA,CAAA;IAC1B,OAAO,IAAI,CAACV,OAAO,CAACN,SAAS,CAACW,WAAW,CAACM,iBAAiB,CAAC;EAC9D;EACA;;;EAGA,IAAWC,YAAYA,CAAA;IACrB,OAAO,IAAI,CAACZ,OAAO,CAACN,SAAS,CAACW,WAAW,CAACQ,YAAY,CAAC;EACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}