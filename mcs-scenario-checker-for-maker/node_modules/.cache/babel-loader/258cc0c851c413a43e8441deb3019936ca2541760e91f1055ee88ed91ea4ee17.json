{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AverageAggregator } from \"./AverageAggregator\";\nimport { CountAggregator } from \"./CountAggregator\";\nimport { MaxAggregator } from \"./MaxAggregator\";\nimport { MinAggregator } from \"./MinAggregator\";\nimport { SumAggregator } from \"./SumAggregator\";\nimport { StaticValueAggregator } from \"./StaticValueAggregator\";\nimport { MakeListAggregator } from \"./MakeListAggregator\";\nimport { MakeSetAggregator } from \"./MakeSetAggregator\";\nexport function createAggregator(aggregateType) {\n  switch (aggregateType) {\n    case \"Average\":\n      return new AverageAggregator();\n    case \"Count\":\n      return new CountAggregator();\n    case \"Max\":\n      return new MaxAggregator();\n    case \"Min\":\n      return new MinAggregator();\n    case \"Sum\":\n      return new SumAggregator();\n    case \"MakeList\":\n      return new MakeListAggregator();\n    case \"MakeSet\":\n      return new MakeSetAggregator();\n    default:\n      return new StaticValueAggregator();\n  }\n}\nexport { AverageAggregator, CountAggregator, MaxAggregator, MinAggregator, SumAggregator };","map":{"version":3,"names":["AverageAggregator","CountAggregator","MaxAggregator","MinAggregator","SumAggregator","StaticValueAggregator","MakeListAggregator","MakeSetAggregator","createAggregator","aggregateType"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/Aggregators/index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AverageAggregator } from \"./AverageAggregator\";\nimport { CountAggregator } from \"./CountAggregator\";\nimport { MaxAggregator } from \"./MaxAggregator\";\nimport { MinAggregator } from \"./MinAggregator\";\nimport { SumAggregator } from \"./SumAggregator\";\nimport { StaticValueAggregator } from \"./StaticValueAggregator\";\nimport type { AggregateType } from \"../../request/ErrorResponse\";\nimport { MakeListAggregator } from \"./MakeListAggregator\";\nimport { MakeSetAggregator } from \"./MakeSetAggregator\";\n\nexport function createAggregator(\n  aggregateType: AggregateType,\n):\n  | AverageAggregator\n  | CountAggregator\n  | MaxAggregator\n  | MinAggregator\n  | SumAggregator\n  | StaticValueAggregator {\n  switch (aggregateType) {\n    case \"Average\":\n      return new AverageAggregator();\n    case \"Count\":\n      return new CountAggregator();\n    case \"Max\":\n      return new MaxAggregator();\n    case \"Min\":\n      return new MinAggregator();\n    case \"Sum\":\n      return new SumAggregator();\n    case \"MakeList\":\n      return new MakeListAggregator();\n    case \"MakeSet\":\n      return new MakeSetAggregator();\n    default:\n      return new StaticValueAggregator();\n  }\n}\n\nexport { AverageAggregator, CountAggregator, MaxAggregator, MinAggregator, SumAggregator };\nexport { Aggregator } from \"./Aggregator\";\n"],"mappings":"AAAA;AACA;AACA,SAASA,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,qBAAqB,QAAQ,yBAAyB;AAE/D,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD,OAAM,SAAUC,gBAAgBA,CAC9BC,aAA4B;EAQ5B,QAAQA,aAAa;IACnB,KAAK,SAAS;MACZ,OAAO,IAAIT,iBAAiB,EAAE;IAChC,KAAK,OAAO;MACV,OAAO,IAAIC,eAAe,EAAE;IAC9B,KAAK,KAAK;MACR,OAAO,IAAIC,aAAa,EAAE;IAC5B,KAAK,KAAK;MACR,OAAO,IAAIC,aAAa,EAAE;IAC5B,KAAK,KAAK;MACR,OAAO,IAAIC,aAAa,EAAE;IAC5B,KAAK,UAAU;MACb,OAAO,IAAIE,kBAAkB,EAAE;IACjC,KAAK,SAAS;MACZ,OAAO,IAAIC,iBAAiB,EAAE;IAChC;MACE,OAAO,IAAIF,qBAAqB,EAAE;EACtC;AACF;AAEA,SAASL,iBAAiB,EAAEC,eAAe,EAAEC,aAAa,EAAEC,aAAa,EAAEC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}