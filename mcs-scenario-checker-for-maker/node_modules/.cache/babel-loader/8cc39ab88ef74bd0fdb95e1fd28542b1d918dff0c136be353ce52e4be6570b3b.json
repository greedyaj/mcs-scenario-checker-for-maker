{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\n/**\n * @hidden\n */\nexport const CosmosDbDiagnosticLevelOrder = [CosmosDbDiagnosticLevel.info, CosmosDbDiagnosticLevel.debug, CosmosDbDiagnosticLevel.debugUnsafe];\n/**\n * @hidden\n */\nexport function allowTracing(levelToCheck, clientDiagnosticLevel) {\n  const indexOfDiagnosticLevelToCheck = CosmosDbDiagnosticLevelOrder.indexOf(levelToCheck);\n  const indexOfClientDiagnosticLevel = CosmosDbDiagnosticLevelOrder.indexOf(clientDiagnosticLevel);\n  if (indexOfDiagnosticLevelToCheck === -1 || indexOfClientDiagnosticLevel === -1) {\n    return false;\n  }\n  return indexOfDiagnosticLevelToCheck <= indexOfClientDiagnosticLevel;\n}","map":{"version":3,"names":["CosmosDbDiagnosticLevel","CosmosDbDiagnosticLevelOrder","info","debug","debugUnsafe","allowTracing","levelToCheck","clientDiagnosticLevel","indexOfDiagnosticLevelToCheck","indexOf","indexOfClientDiagnosticLevel"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/diagnostics/diagnosticLevelComparator.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\n\n/**\n * @hidden\n */\nexport const CosmosDbDiagnosticLevelOrder = [\n  CosmosDbDiagnosticLevel.info,\n  CosmosDbDiagnosticLevel.debug,\n  CosmosDbDiagnosticLevel.debugUnsafe,\n];\n\n/**\n * @hidden\n */\nexport function allowTracing(\n  levelToCheck: CosmosDbDiagnosticLevel,\n  clientDiagnosticLevel: CosmosDbDiagnosticLevel,\n): boolean {\n  const indexOfDiagnosticLevelToCheck = CosmosDbDiagnosticLevelOrder.indexOf(levelToCheck);\n  const indexOfClientDiagnosticLevel = CosmosDbDiagnosticLevelOrder.indexOf(clientDiagnosticLevel);\n  if (indexOfDiagnosticLevelToCheck === -1 || indexOfClientDiagnosticLevel === -1) {\n    return false;\n  }\n  return indexOfDiagnosticLevelToCheck <= indexOfClientDiagnosticLevel;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,uBAAuB,QAAQ,2BAA2B;AAEnE;;;AAGA,OAAO,MAAMC,4BAA4B,GAAG,CAC1CD,uBAAuB,CAACE,IAAI,EAC5BF,uBAAuB,CAACG,KAAK,EAC7BH,uBAAuB,CAACI,WAAW,CACpC;AAED;;;AAGA,OAAM,SAAUC,YAAYA,CAC1BC,YAAqC,EACrCC,qBAA8C;EAE9C,MAAMC,6BAA6B,GAAGP,4BAA4B,CAACQ,OAAO,CAACH,YAAY,CAAC;EACxF,MAAMI,4BAA4B,GAAGT,4BAA4B,CAACQ,OAAO,CAACF,qBAAqB,CAAC;EAChG,IAAIC,6BAA6B,KAAK,CAAC,CAAC,IAAIE,4BAA4B,KAAK,CAAC,CAAC,EAAE;IAC/E,OAAO,KAAK;EACd;EACA,OAAOF,6BAA6B,IAAIE,4BAA4B;AACtE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}