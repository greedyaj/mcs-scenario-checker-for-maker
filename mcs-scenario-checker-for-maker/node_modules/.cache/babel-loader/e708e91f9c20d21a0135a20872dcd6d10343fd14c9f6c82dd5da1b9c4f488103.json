{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { NonePartitionKeyLiteral, NullPartitionKeyLiteral } from \"../documents\";\n/**\n * Utility function to avoid writing boilder plate code while checking for\n * undefined values. It throws Error if the input value is undefined.\n * @param value - Value which is potentially undefined.\n * @param msg - Error Message to throw if value is undefined.\n * @returns\n */\nexport function assertNotUndefined(value, msg) {\n  if (value !== undefined) {\n    return value;\n  }\n  throw new Error(msg || \"Unexpected 'undefined' value encountered\");\n}\n/**\n * Check for value being PrimitivePartitionKeyValue.\n * @internal\n */\nexport function isPrimitivePartitionKeyValue(value) {\n  return isWellDefinedPartitionKeyValue(value) || isNonePartitionKeyValue(value) || isNullPartitionKeyValue(value);\n}\n/**\n * Check for value being string, number or boolean.\n * @internal\n */\nexport function isWellDefinedPartitionKeyValue(value) {\n  return typeof value === \"string\" || typeof value === \"boolean\" || typeof value === \"number\";\n}\n/**\n * Check for value being NonePartitionKeyType.\n * @internal\n */\nexport function isNonePartitionKeyValue(value) {\n  return value !== undefined && JSON.stringify(value) === JSON.stringify(NonePartitionKeyLiteral);\n}\n/**\n * Check for value being NullPartitionKeyType.\n * @internal\n */\nexport function isNullPartitionKeyValue(value) {\n  return value === NullPartitionKeyLiteral;\n}\n/**\n * Verify validity of partition key.\n * @internal\n */\nexport function isPartitionKey(partitionKey) {\n  return isPrimitivePartitionKeyValue(partitionKey) || Array.isArray(partitionKey);\n}","map":{"version":3,"names":["NonePartitionKeyLiteral","NullPartitionKeyLiteral","assertNotUndefined","value","msg","undefined","Error","isPrimitivePartitionKeyValue","isWellDefinedPartitionKeyValue","isNonePartitionKeyValue","isNullPartitionKeyValue","JSON","stringify","isPartitionKey","partitionKey","Array","isArray"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/utils/typeChecks.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  NonePartitionKeyType,\n  NullPartitionKeyType,\n  PrimitivePartitionKeyValue,\n} from \"../documents\";\nimport { NonePartitionKeyLiteral, NullPartitionKeyLiteral } from \"../documents\";\n\n/**\n * A type which could be any type but undefined\n */\nexport type NonUndefinable<T> = T extends undefined ? never : T;\n\n/**\n * Utility function to avoid writing boilder plate code while checking for\n * undefined values. It throws Error if the input value is undefined.\n * @param value - Value which is potentially undefined.\n * @param msg - Error Message to throw if value is undefined.\n * @returns\n */\nexport function assertNotUndefined<T>(value: T, msg?: string): NonUndefinable<T> {\n  if (value !== undefined) {\n    return value as NonUndefinable<T>;\n  }\n  throw new Error(msg || \"Unexpected 'undefined' value encountered\");\n}\n\n/**\n * Check for value being PrimitivePartitionKeyValue.\n * @internal\n */\nexport function isPrimitivePartitionKeyValue(value: unknown): value is PrimitivePartitionKeyValue {\n  return (\n    isWellDefinedPartitionKeyValue(value) ||\n    isNonePartitionKeyValue(value) ||\n    isNullPartitionKeyValue(value)\n  );\n}\n\n/**\n * Check for value being string, number or boolean.\n * @internal\n */\nexport function isWellDefinedPartitionKeyValue(value: unknown): value is string | number | boolean {\n  return typeof value === \"string\" || typeof value === \"boolean\" || typeof value === \"number\";\n}\n\n/**\n * Check for value being NonePartitionKeyType.\n * @internal\n */\nexport function isNonePartitionKeyValue(value: unknown): value is NonePartitionKeyType {\n  return value !== undefined && JSON.stringify(value) === JSON.stringify(NonePartitionKeyLiteral);\n}\n\n/**\n * Check for value being NullPartitionKeyType.\n * @internal\n */\nexport function isNullPartitionKeyValue(value: unknown): value is NullPartitionKeyType {\n  return value === NullPartitionKeyLiteral;\n}\n/**\n * Verify validity of partition key.\n * @internal\n */\nexport function isPartitionKey(partitionKey: unknown): boolean {\n  return isPrimitivePartitionKeyValue(partitionKey) || Array.isArray(partitionKey);\n}\n"],"mappings":"AAAA;AACA;AAOA,SAASA,uBAAuB,EAAEC,uBAAuB,QAAQ,cAAc;AAO/E;;;;;;;AAOA,OAAM,SAAUC,kBAAkBA,CAAIC,KAAQ,EAAEC,GAAY;EAC1D,IAAID,KAAK,KAAKE,SAAS,EAAE;IACvB,OAAOF,KAA0B;EACnC;EACA,MAAM,IAAIG,KAAK,CAACF,GAAG,IAAI,0CAA0C,CAAC;AACpE;AAEA;;;;AAIA,OAAM,SAAUG,4BAA4BA,CAACJ,KAAc;EACzD,OACEK,8BAA8B,CAACL,KAAK,CAAC,IACrCM,uBAAuB,CAACN,KAAK,CAAC,IAC9BO,uBAAuB,CAACP,KAAK,CAAC;AAElC;AAEA;;;;AAIA,OAAM,SAAUK,8BAA8BA,CAACL,KAAc;EAC3D,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,SAAS,IAAI,OAAOA,KAAK,KAAK,QAAQ;AAC7F;AAEA;;;;AAIA,OAAM,SAAUM,uBAAuBA,CAACN,KAAc;EACpD,OAAOA,KAAK,KAAKE,SAAS,IAAIM,IAAI,CAACC,SAAS,CAACT,KAAK,CAAC,KAAKQ,IAAI,CAACC,SAAS,CAACZ,uBAAuB,CAAC;AACjG;AAEA;;;;AAIA,OAAM,SAAUU,uBAAuBA,CAACP,KAAc;EACpD,OAAOA,KAAK,KAAKF,uBAAuB;AAC1C;AACA;;;;AAIA,OAAM,SAAUY,cAAcA,CAACC,YAAqB;EAClD,OAAOP,4BAA4B,CAACO,YAAY,CAAC,IAAIC,KAAK,CAACC,OAAO,CAACF,YAAY,CAAC;AAClF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}