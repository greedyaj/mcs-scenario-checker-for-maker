{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport PriorityQueue from \"priorityqueuejs\";\nexport class FixedSizePriorityQueue {\n  constructor(compareFn, pqMaxSize) {\n    this.compareFn = compareFn;\n    this.pq = new PriorityQueue(this.compareFn);\n    this.pqMaxSize = pqMaxSize;\n  }\n  enqueue(item) {\n    if (this.pq.size() < this.pqMaxSize) {\n      this.pq.enq(item);\n    } else {\n      const topItem = this.pq.peek();\n      if (this.compareFn(topItem, item) > 0) {\n        this.pq.deq();\n        this.pq.enq(item);\n      }\n    }\n  }\n  dequeue() {\n    return this.pq.deq();\n  }\n  size() {\n    return this.pq.size();\n  }\n  isEmpty() {\n    return this.pq.isEmpty();\n  }\n  peek() {\n    return this.pq.peek();\n  }\n  getTopElements() {\n    const elements = [];\n    while (!this.pq.isEmpty()) {\n      elements.unshift(this.pq.deq());\n    }\n    return elements;\n  }\n  // Create a new instance of FixedSizePriorityQueue with a reversed compare function and the same maximum size.\n  // Enqueue all elements from the current priority queue into the reverse priority queue.\n  reverse() {\n    const reversePQ = new FixedSizePriorityQueue((a, b) => -this.compareFn(a, b), this.pqMaxSize);\n    while (!this.pq.isEmpty()) {\n      reversePQ.enqueue(this.pq.deq());\n    }\n    return reversePQ;\n  }\n}","map":{"version":3,"names":["PriorityQueue","FixedSizePriorityQueue","constructor","compareFn","pqMaxSize","pq","enqueue","item","size","enq","topItem","peek","deq","dequeue","isEmpty","getTopElements","elements","unshift","reverse","reversePQ","a","b"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/utils/fixedSizePriorityQueue.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport PriorityQueue from \"priorityqueuejs\";\n\nexport class FixedSizePriorityQueue<T> {\n  private pq: PriorityQueue<T>;\n  // The compare function should return a positive number if a is greater than b, a negative number if a is less than b, and 0 if a is equal to b.\n  private compareFn: (a: T, b: T) => number;\n  private pqMaxSize: number;\n\n  constructor(compareFn: (a: T, b: T) => number, pqMaxSize: number) {\n    this.compareFn = compareFn;\n    this.pq = new PriorityQueue<T>(this.compareFn);\n    this.pqMaxSize = pqMaxSize;\n  }\n\n  public enqueue(item: T): void {\n    if (this.pq.size() < this.pqMaxSize) {\n      this.pq.enq(item);\n    } else {\n      const topItem = this.pq.peek();\n      if (this.compareFn(topItem, item) > 0) {\n        this.pq.deq();\n        this.pq.enq(item);\n      }\n    }\n  }\n\n  public dequeue(): T {\n    return this.pq.deq();\n  }\n\n  public size(): number {\n    return this.pq.size();\n  }\n\n  public isEmpty(): boolean {\n    return this.pq.isEmpty();\n  }\n\n  public peek(): T {\n    return this.pq.peek();\n  }\n\n  public getTopElements(): T[] {\n    const elements: T[] = [];\n    while (!this.pq.isEmpty()) {\n      elements.unshift(this.pq.deq());\n    }\n    return elements;\n  }\n\n  // Create a new instance of FixedSizePriorityQueue with a reversed compare function and the same maximum size.\n  // Enqueue all elements from the current priority queue into the reverse priority queue.\n  public reverse(): FixedSizePriorityQueue<T> {\n    const reversePQ = new FixedSizePriorityQueue<T>(\n      (a: T, b: T) => -this.compareFn(a, b),\n      this.pqMaxSize,\n    );\n    while (!this.pq.isEmpty()) {\n      reversePQ.enqueue(this.pq.deq());\n    }\n    return reversePQ;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,aAAa,MAAM,iBAAiB;AAE3C,OAAM,MAAOC,sBAAsB;EAMjCC,YAAYC,SAAiC,EAAEC,SAAiB;IAC9D,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,EAAE,GAAG,IAAIL,aAAa,CAAI,IAAI,CAACG,SAAS,CAAC;IAC9C,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAEOE,OAAOA,CAACC,IAAO;IACpB,IAAI,IAAI,CAACF,EAAE,CAACG,IAAI,EAAE,GAAG,IAAI,CAACJ,SAAS,EAAE;MACnC,IAAI,CAACC,EAAE,CAACI,GAAG,CAACF,IAAI,CAAC;IACnB,CAAC,MAAM;MACL,MAAMG,OAAO,GAAG,IAAI,CAACL,EAAE,CAACM,IAAI,EAAE;MAC9B,IAAI,IAAI,CAACR,SAAS,CAACO,OAAO,EAAEH,IAAI,CAAC,GAAG,CAAC,EAAE;QACrC,IAAI,CAACF,EAAE,CAACO,GAAG,EAAE;QACb,IAAI,CAACP,EAAE,CAACI,GAAG,CAACF,IAAI,CAAC;MACnB;IACF;EACF;EAEOM,OAAOA,CAAA;IACZ,OAAO,IAAI,CAACR,EAAE,CAACO,GAAG,EAAE;EACtB;EAEOJ,IAAIA,CAAA;IACT,OAAO,IAAI,CAACH,EAAE,CAACG,IAAI,EAAE;EACvB;EAEOM,OAAOA,CAAA;IACZ,OAAO,IAAI,CAACT,EAAE,CAACS,OAAO,EAAE;EAC1B;EAEOH,IAAIA,CAAA;IACT,OAAO,IAAI,CAACN,EAAE,CAACM,IAAI,EAAE;EACvB;EAEOI,cAAcA,CAAA;IACnB,MAAMC,QAAQ,GAAQ,EAAE;IACxB,OAAO,CAAC,IAAI,CAACX,EAAE,CAACS,OAAO,EAAE,EAAE;MACzBE,QAAQ,CAACC,OAAO,CAAC,IAAI,CAACZ,EAAE,CAACO,GAAG,EAAE,CAAC;IACjC;IACA,OAAOI,QAAQ;EACjB;EAEA;EACA;EACOE,OAAOA,CAAA;IACZ,MAAMC,SAAS,GAAG,IAAIlB,sBAAsB,CAC1C,CAACmB,CAAI,EAAEC,CAAI,KAAK,CAAC,IAAI,CAAClB,SAAS,CAACiB,CAAC,EAAEC,CAAC,CAAC,EACrC,IAAI,CAACjB,SAAS,CACf;IACD,OAAO,CAAC,IAAI,CAACC,EAAE,CAACS,OAAO,EAAE,EAAE;MACzBK,SAAS,CAACb,OAAO,CAAC,IAAI,CAACD,EAAE,CAACO,GAAG,EAAE,CAAC;IAClC;IACA,OAAOO,SAAS;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}