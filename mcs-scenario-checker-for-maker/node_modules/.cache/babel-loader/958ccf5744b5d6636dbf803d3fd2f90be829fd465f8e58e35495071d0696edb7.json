{"ast":null,"code":"/** @hidden */\nexport class OrderByEndpointComponent {\n  /**\n   * Represents an endpoint in handling an order by query. For each processed orderby\n   * result it returns 'payload' item of the result\n   *\n   * @param executionContext - Underlying Execution Context\n   * @hidden\n   */\n  constructor(executionContext, emitRawOrderByPayload = false) {\n    this.executionContext = executionContext;\n    this.emitRawOrderByPayload = emitRawOrderByPayload;\n  }\n  /**\n   * Execute a provided function on the next element in the OrderByEndpointComponent.\n   */\n  async nextItem(diagnosticNode) {\n    const {\n      result: item,\n      headers\n    } = await this.executionContext.nextItem(diagnosticNode);\n    if (this.emitRawOrderByPayload) {\n      return {\n        result: item !== undefined ? item : undefined,\n        headers\n      };\n    } else {\n      return {\n        result: item !== undefined ? item.payload : undefined,\n        headers\n      };\n    }\n  }\n  /**\n   * Determine if there are still remaining resources to processs.\n   * @returns true if there is other elements to process in the OrderByEndpointComponent.\n   */\n  hasMoreResults() {\n    return this.executionContext.hasMoreResults();\n  }\n}","map":{"version":3,"names":["OrderByEndpointComponent","constructor","executionContext","emitRawOrderByPayload","nextItem","diagnosticNode","result","item","headers","undefined","payload","hasMoreResults"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/EndpointComponent/OrderByEndpointComponent.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\n\n/** @hidden */\nexport class OrderByEndpointComponent implements ExecutionContext {\n  /**\n   * Represents an endpoint in handling an order by query. For each processed orderby\n   * result it returns 'payload' item of the result\n   *\n   * @param executionContext - Underlying Execution Context\n   * @hidden\n   */\n  constructor(\n    private executionContext: ExecutionContext,\n    private emitRawOrderByPayload: boolean = false,\n  ) {}\n  /**\n   * Execute a provided function on the next element in the OrderByEndpointComponent.\n   */\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    const { result: item, headers } = await this.executionContext.nextItem(diagnosticNode);\n    if (this.emitRawOrderByPayload) {\n      return {\n        result: item !== undefined ? item : undefined,\n        headers,\n      };\n    } else {\n      return {\n        result: item !== undefined ? item.payload : undefined,\n        headers,\n      };\n    }\n  }\n\n  /**\n   * Determine if there are still remaining resources to processs.\n   * @returns true if there is other elements to process in the OrderByEndpointComponent.\n   */\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n}\n"],"mappings":"AAMA;AACA,OAAM,MAAOA,wBAAwB;EACnC;;;;;;;EAOAC,YACUC,gBAAkC,EAClCC,qBAAA,GAAiC,KAAK;IADtC,KAAAD,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,qBAAqB,GAArBA,qBAAqB;EAC5B;EACH;;;EAGO,MAAMC,QAAQA,CAACC,cAAsC;IAC1D,MAAM;MAAEC,MAAM,EAAEC,IAAI;MAAEC;IAAO,CAAE,GAAG,MAAM,IAAI,CAACN,gBAAgB,CAACE,QAAQ,CAACC,cAAc,CAAC;IACtF,IAAI,IAAI,CAACF,qBAAqB,EAAE;MAC9B,OAAO;QACLG,MAAM,EAAEC,IAAI,KAAKE,SAAS,GAAGF,IAAI,GAAGE,SAAS;QAC7CD;OACD;IACH,CAAC,MAAM;MACL,OAAO;QACLF,MAAM,EAAEC,IAAI,KAAKE,SAAS,GAAGF,IAAI,CAACG,OAAO,GAAGD,SAAS;QACrDD;OACD;IACH;EACF;EAEA;;;;EAIOG,cAAcA,CAAA;IACnB,OAAO,IAAI,CAACT,gBAAgB,CAACS,cAAc,EAAE;EAC/C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}