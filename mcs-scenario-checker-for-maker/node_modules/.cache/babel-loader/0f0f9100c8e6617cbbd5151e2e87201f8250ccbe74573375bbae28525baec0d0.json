{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// Ported this implementation to javascript:\n// https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,83e476c1ae112117\n/** @hidden */\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst ticksPerMillisecond = 10000;\n/** @hidden */\nconst millisecondsPerTick = 1.0 / ticksPerMillisecond;\n/** @hidden */\nconst ticksPerSecond = ticksPerMillisecond * 1000; // 10,000,000\n/** @hidden */\nconst secondsPerTick = 1.0 / ticksPerSecond; // 0.0001\n/** @hidden */\nconst ticksPerMinute = ticksPerSecond * 60; // 600,000,000\n/** @hidden */\nconst minutesPerTick = 1.0 / ticksPerMinute; // 1.6666666666667e-9\n/** @hidden */\nconst ticksPerHour = ticksPerMinute * 60; // 36,000,000,000\n/** @hidden */\nconst hoursPerTick = 1.0 / ticksPerHour; // 2.77777777777777778e-11\n/** @hidden */\nconst ticksPerDay = ticksPerHour * 24; // 864,000,000,000\n/** @hidden */\nconst daysPerTick = 1.0 / ticksPerDay; // 1.1574074074074074074e-12\n/** @hidden */\nconst millisPerSecond = 1000;\n/** @hidden */\nconst millisPerMinute = millisPerSecond * 60; //     60,000\n/** @hidden */\nconst millisPerHour = millisPerMinute * 60; //  3,600,000\n/** @hidden */\nconst millisPerDay = millisPerHour * 24; // 86,400,000\n/** @hidden */\nconst maxMilliSeconds = Number.MAX_SAFE_INTEGER / ticksPerMillisecond;\n/** @hidden */\nconst minMilliSeconds = Number.MIN_SAFE_INTEGER / ticksPerMillisecond;\n/**\n * Represents a time interval.\n *\n * @param days                 - Number of days.\n * @param hours                - Number of hours.\n * @param minutes              - Number of minutes.\n * @param seconds              - Number of seconds.\n * @param milliseconds         - Number of milliseconds.\n * @hidden\n */\nexport class TimeSpan {\n  constructor(days, hours, minutes, seconds, milliseconds) {\n    // Constructor\n    if (!Number.isInteger(days)) {\n      throw new Error(\"days is not an integer\");\n    }\n    if (!Number.isInteger(hours)) {\n      throw new Error(\"hours is not an integer\");\n    }\n    if (!Number.isInteger(minutes)) {\n      throw new Error(\"minutes is not an integer\");\n    }\n    if (!Number.isInteger(seconds)) {\n      throw new Error(\"seconds is not an integer\");\n    }\n    if (!Number.isInteger(milliseconds)) {\n      throw new Error(\"milliseconds is not an integer\");\n    }\n    const totalMilliSeconds = (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;\n    if (totalMilliSeconds > maxMilliSeconds || totalMilliSeconds < minMilliSeconds) {\n      throw new Error(\"Total number of milliseconds was either too large or too small\");\n    }\n    this._ticks = totalMilliSeconds * ticksPerMillisecond;\n  }\n  /**\n   * Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance.\n   * @param ts - The time interval to add.\n   */\n  add(ts) {\n    if (TimeSpan.additionDoesOverflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Adding the two timestamps causes an overflow.\");\n    }\n    const results = this._ticks + ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n  /**\n   * Returns a new TimeSpan object whose value is the difference of the specified TimeSpan object and this instance.\n   * @param ts - The time interval to subtract.\n   */\n  subtract(ts) {\n    if (TimeSpan.subtractionDoesUnderflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Subtracting the two timestamps causes an underflow.\");\n    }\n    const results = this._ticks - ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n  /**\n   * Compares this instance to a specified object and returns an integer that indicates whether this\n   * instance is shorter than, equal to, or longer than the specified object.\n   * @param value - The time interval to add.\n   */\n  compareTo(value) {\n    if (value == null) {\n      return 1;\n    }\n    if (!TimeSpan.isTimeSpan(value)) {\n      throw new Error(\"Argument must be a TimeSpan object\");\n    }\n    return TimeSpan.compare(this, value);\n  }\n  /**\n   * Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object.\n   */\n  duration() {\n    return TimeSpan.fromTicks(this._ticks >= 0 ? this._ticks : -this._ticks);\n  }\n  /**\n   * Returns a value indicating whether this instance is equal to a specified object.\n   * @param value - The time interval to check for equality.\n   */\n  equals(value) {\n    if (TimeSpan.isTimeSpan(value)) {\n      return this._ticks === value._ticks;\n    }\n    return false;\n  }\n  /**\n   * Returns a new TimeSpan object whose value is the negated value of this instance.\n   * @param value - The time interval to check for equality.\n   */\n  negate() {\n    return TimeSpan.fromTicks(-this._ticks);\n  }\n  days() {\n    return Math.floor(this._ticks / ticksPerDay);\n  }\n  hours() {\n    return Math.floor(this._ticks / ticksPerHour);\n  }\n  milliseconds() {\n    return Math.floor(this._ticks / ticksPerMillisecond);\n  }\n  seconds() {\n    return Math.floor(this._ticks / ticksPerSecond);\n  }\n  ticks() {\n    return this._ticks;\n  }\n  totalDays() {\n    return this._ticks * daysPerTick;\n  }\n  totalHours() {\n    return this._ticks * hoursPerTick;\n  }\n  totalMilliseconds() {\n    return this._ticks * millisecondsPerTick;\n  }\n  totalMinutes() {\n    return this._ticks * minutesPerTick;\n  }\n  totalSeconds() {\n    return this._ticks * secondsPerTick;\n  }\n  static fromTicks(value) {\n    const timeSpan = new TimeSpan(0, 0, 0, 0, 0);\n    timeSpan._ticks = value;\n    return timeSpan;\n  }\n  static isTimeSpan(timespan) {\n    return timespan._ticks;\n  }\n  static additionDoesOverflow(a, b) {\n    const c = a + b;\n    return a !== c - b || b !== c - a;\n  }\n  static subtractionDoesUnderflow(a, b) {\n    const c = a - b;\n    return a !== c + b || b !== a - c;\n  }\n  static compare(t1, t2) {\n    if (t1._ticks > t2._ticks) {\n      return 1;\n    }\n    if (t1._ticks < t2._ticks) {\n      return -1;\n    }\n    return 0;\n  }\n  static interval(value, scale) {\n    if (isNaN(value)) {\n      throw new Error(\"value must be a number\");\n    }\n    const milliseconds = value * scale;\n    if (milliseconds > maxMilliSeconds || milliseconds < minMilliSeconds) {\n      throw new Error(\"timespan too long\");\n    }\n    return TimeSpan.fromTicks(Math.floor(milliseconds * ticksPerMillisecond));\n  }\n  static fromMilliseconds(value) {\n    return TimeSpan.interval(value, 1);\n  }\n  static fromSeconds(value) {\n    return TimeSpan.interval(value, millisPerSecond);\n  }\n  static fromMinutes(value) {\n    return TimeSpan.interval(value, millisPerMinute);\n  }\n  static fromHours(value) {\n    return TimeSpan.interval(value, millisPerHour);\n  }\n  static fromDays(value) {\n    return TimeSpan.interval(value, millisPerDay);\n  }\n}\nTimeSpan.zero = new TimeSpan(0, 0, 0, 0, 0);\nTimeSpan.maxValue = TimeSpan.fromTicks(Number.MAX_SAFE_INTEGER);\nTimeSpan.minValue = TimeSpan.fromTicks(Number.MIN_SAFE_INTEGER);","map":{"version":3,"names":["ticksPerMillisecond","millisecondsPerTick","ticksPerSecond","secondsPerTick","ticksPerMinute","minutesPerTick","ticksPerHour","hoursPerTick","ticksPerDay","daysPerTick","millisPerSecond","millisPerMinute","millisPerHour","millisPerDay","maxMilliSeconds","Number","MAX_SAFE_INTEGER","minMilliSeconds","MIN_SAFE_INTEGER","TimeSpan","constructor","days","hours","minutes","seconds","milliseconds","isInteger","Error","totalMilliSeconds","_ticks","add","ts","additionDoesOverflow","results","fromTicks","subtract","subtractionDoesUnderflow","compareTo","value","isTimeSpan","compare","duration","equals","negate","Math","floor","ticks","totalDays","totalHours","totalMilliseconds","totalMinutes","totalSeconds","timeSpan","timespan","a","b","c","t1","t2","interval","scale","isNaN","fromMilliseconds","fromSeconds","fromMinutes","fromHours","fromDays","zero","maxValue","minValue"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryMetrics/timeSpan.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// Ported this implementation to javascript:\n// https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,83e476c1ae112117\n/** @hidden */\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst ticksPerMillisecond = 10000;\n/** @hidden */\nconst millisecondsPerTick = 1.0 / ticksPerMillisecond;\n\n/** @hidden */\nconst ticksPerSecond = ticksPerMillisecond * 1000; // 10,000,000\n/** @hidden */\nconst secondsPerTick = 1.0 / ticksPerSecond; // 0.0001\n\n/** @hidden */\nconst ticksPerMinute = ticksPerSecond * 60; // 600,000,000\n/** @hidden */\nconst minutesPerTick = 1.0 / ticksPerMinute; // 1.6666666666667e-9\n\n/** @hidden */\nconst ticksPerHour = ticksPerMinute * 60; // 36,000,000,000\n/** @hidden */\nconst hoursPerTick = 1.0 / ticksPerHour; // 2.77777777777777778e-11\n\n/** @hidden */\nconst ticksPerDay = ticksPerHour * 24; // 864,000,000,000\n/** @hidden */\nconst daysPerTick = 1.0 / ticksPerDay; // 1.1574074074074074074e-12\n\n/** @hidden */\nconst millisPerSecond = 1000;\n/** @hidden */\nconst millisPerMinute = millisPerSecond * 60; //     60,000\n/** @hidden */\nconst millisPerHour = millisPerMinute * 60; //  3,600,000\n/** @hidden */\nconst millisPerDay = millisPerHour * 24; // 86,400,000\n\n/** @hidden */\nconst maxMilliSeconds = Number.MAX_SAFE_INTEGER / ticksPerMillisecond;\n/** @hidden */\nconst minMilliSeconds = Number.MIN_SAFE_INTEGER / ticksPerMillisecond;\n\n/**\n * Represents a time interval.\n *\n * @param days                 - Number of days.\n * @param hours                - Number of hours.\n * @param minutes              - Number of minutes.\n * @param seconds              - Number of seconds.\n * @param milliseconds         - Number of milliseconds.\n * @hidden\n */\nexport class TimeSpan {\n  protected _ticks: number;\n  constructor(days: number, hours: number, minutes: number, seconds: number, milliseconds: number) {\n    // Constructor\n    if (!Number.isInteger(days)) {\n      throw new Error(\"days is not an integer\");\n    }\n\n    if (!Number.isInteger(hours)) {\n      throw new Error(\"hours is not an integer\");\n    }\n\n    if (!Number.isInteger(minutes)) {\n      throw new Error(\"minutes is not an integer\");\n    }\n\n    if (!Number.isInteger(seconds)) {\n      throw new Error(\"seconds is not an integer\");\n    }\n\n    if (!Number.isInteger(milliseconds)) {\n      throw new Error(\"milliseconds is not an integer\");\n    }\n\n    const totalMilliSeconds =\n      (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;\n    if (totalMilliSeconds > maxMilliSeconds || totalMilliSeconds < minMilliSeconds) {\n      throw new Error(\"Total number of milliseconds was either too large or too small\");\n    }\n\n    this._ticks = totalMilliSeconds * ticksPerMillisecond;\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance.\n   * @param ts - The time interval to add.\n   */\n  public add(ts: TimeSpan): TimeSpan {\n    if (TimeSpan.additionDoesOverflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Adding the two timestamps causes an overflow.\");\n    }\n\n    const results = this._ticks + ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the difference of the specified TimeSpan object and this instance.\n   * @param ts - The time interval to subtract.\n   */\n  public subtract(ts: TimeSpan): TimeSpan {\n    if (TimeSpan.subtractionDoesUnderflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Subtracting the two timestamps causes an underflow.\");\n    }\n\n    const results = this._ticks - ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n\n  /**\n   * Compares this instance to a specified object and returns an integer that indicates whether this\n   * instance is shorter than, equal to, or longer than the specified object.\n   * @param value - The time interval to add.\n   */\n  public compareTo(value: TimeSpan): 1 | -1 | 0 {\n    if (value == null) {\n      return 1;\n    }\n\n    if (!TimeSpan.isTimeSpan(value)) {\n      throw new Error(\"Argument must be a TimeSpan object\");\n    }\n\n    return TimeSpan.compare(this, value);\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object.\n   */\n  public duration(): TimeSpan {\n    return TimeSpan.fromTicks(this._ticks >= 0 ? this._ticks : -this._ticks);\n  }\n\n  /**\n   * Returns a value indicating whether this instance is equal to a specified object.\n   * @param value - The time interval to check for equality.\n   */\n  public equals(value: TimeSpan): boolean {\n    if (TimeSpan.isTimeSpan(value)) {\n      return this._ticks === value._ticks;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the negated value of this instance.\n   * @param value - The time interval to check for equality.\n   */\n  public negate(): TimeSpan {\n    return TimeSpan.fromTicks(-this._ticks);\n  }\n\n  public days(): number {\n    return Math.floor(this._ticks / ticksPerDay);\n  }\n\n  public hours(): number {\n    return Math.floor(this._ticks / ticksPerHour);\n  }\n\n  public milliseconds(): number {\n    return Math.floor(this._ticks / ticksPerMillisecond);\n  }\n\n  public seconds(): number {\n    return Math.floor(this._ticks / ticksPerSecond);\n  }\n\n  public ticks(): number {\n    return this._ticks;\n  }\n\n  public totalDays(): number {\n    return this._ticks * daysPerTick;\n  }\n  public totalHours(): number {\n    return this._ticks * hoursPerTick;\n  }\n\n  public totalMilliseconds(): number {\n    return this._ticks * millisecondsPerTick;\n  }\n\n  public totalMinutes(): number {\n    return this._ticks * minutesPerTick;\n  }\n\n  public totalSeconds(): number {\n    return this._ticks * secondsPerTick;\n  }\n\n  public static fromTicks(value: number): TimeSpan {\n    const timeSpan = new TimeSpan(0, 0, 0, 0, 0);\n    timeSpan._ticks = value;\n    return timeSpan;\n  }\n\n  public static readonly zero = new TimeSpan(0, 0, 0, 0, 0);\n  public static readonly maxValue = TimeSpan.fromTicks(Number.MAX_SAFE_INTEGER);\n  public static readonly minValue = TimeSpan.fromTicks(Number.MIN_SAFE_INTEGER);\n\n  public static isTimeSpan(timespan: TimeSpan): number {\n    return timespan._ticks;\n  }\n\n  public static additionDoesOverflow(a: number, b: number): boolean {\n    const c = a + b;\n    return a !== c - b || b !== c - a;\n  }\n\n  public static subtractionDoesUnderflow(a: number, b: number): boolean {\n    const c = a - b;\n    return a !== c + b || b !== a - c;\n  }\n\n  public static compare(t1: TimeSpan, t2: TimeSpan): 1 | 0 | -1 {\n    if (t1._ticks > t2._ticks) {\n      return 1;\n    }\n    if (t1._ticks < t2._ticks) {\n      return -1;\n    }\n    return 0;\n  }\n\n  public static interval(value: number, scale: number): TimeSpan {\n    if (isNaN(value)) {\n      throw new Error(\"value must be a number\");\n    }\n\n    const milliseconds = value * scale;\n    if (milliseconds > maxMilliSeconds || milliseconds < minMilliSeconds) {\n      throw new Error(\"timespan too long\");\n    }\n\n    return TimeSpan.fromTicks(Math.floor(milliseconds * ticksPerMillisecond));\n  }\n\n  public static fromMilliseconds(value: number): TimeSpan {\n    return TimeSpan.interval(value, 1);\n  }\n\n  public static fromSeconds(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerSecond);\n  }\n\n  public static fromMinutes(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerMinute);\n  }\n\n  public static fromHours(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerHour);\n  }\n\n  public static fromDays(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerDay);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}