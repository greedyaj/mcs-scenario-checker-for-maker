{"ast":null,"code":"import { createStoredProcedureUri, getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { ResourceResponse } from \"../../request\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * Operations for reading, replacing, deleting, or executing a specific, existing stored procedure by id.\n *\n * For operations to create, read all, or query Stored Procedures,\n */\nexport class StoredProcedure {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  get url() {\n    return createStoredProcedureUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * Creates a new instance of {@link StoredProcedure} linked to the parent {@link Container}.\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link StoredProcedure}.\n   * @hidden\n   */\n  constructor(container, id, clientContext) {\n    this.container = container;\n    this.id = id;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Read the {@link StoredProcedureDefinition} for the given {@link StoredProcedure}.\n   */\n  async read(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.read({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new StoredProcedureResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Replace the given {@link StoredProcedure} with the specified {@link StoredProcedureDefinition}.\n   * @param body - The specified {@link StoredProcedureDefinition} to replace the existing definition.\n   */\n  async replace(body, options) {\n    return withDiagnostics(async diagnosticNode => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new StoredProcedureResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Delete the given {@link StoredProcedure}.\n   */\n  async delete(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.delete({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new StoredProcedureResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Execute the given {@link StoredProcedure}.\n   *\n   * The specified type, T, is not enforced by the client.\n   * Be sure to validate the response from the stored procedure matches the type, T, you provide.\n   *\n   * @param partitionKey - The partition key to use when executing the stored procedure\n   * @param params - Array of parameters to pass as arguments to the given {@link StoredProcedure}.\n   * @param options - Additional options, such as the partition key to invoke the {@link StoredProcedure} on.\n   */\n  async execute(partitionKey, params, options) {\n    return withDiagnostics(async diagnosticNode => {\n      if (partitionKey === undefined) {\n        const partitionKeyResponse = await readPartitionKeyDefinition(diagnosticNode, this.container);\n        partitionKey = undefinedPartitionKey(partitionKeyResponse);\n      }\n      const response = await this.clientContext.execute({\n        sprocLink: this.url,\n        params,\n        options,\n        partitionKey,\n        diagnosticNode\n      });\n      return new ResourceResponse(response.result, response.headers, response.code, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["createStoredProcedureUri","getIdFromLink","getPathFromLink","isResourceValid","ResourceType","undefinedPartitionKey","ResourceResponse","readPartitionKeyDefinition","StoredProcedureResponse","getEmptyCosmosDiagnostics","withDiagnostics","StoredProcedure","url","container","database","id","constructor","clientContext","read","options","diagnosticNode","path","response","resourceType","sproc","resourceId","result","headers","code","replace","body","toString","err","delete","execute","partitionKey","params","undefined","partitionKeyResponse","sprocLink"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/StoredProcedure/StoredProcedure.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createStoredProcedureUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport type { PartitionKey } from \"../../documents/PartitionKey\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport type { RequestOptions } from \"../../request\";\nimport { ResourceResponse } from \"../../request\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport type { Container } from \"../Container\";\nimport type { StoredProcedureDefinition } from \"./StoredProcedureDefinition\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations for reading, replacing, deleting, or executing a specific, existing stored procedure by id.\n *\n * For operations to create, read all, or query Stored Procedures,\n */\nexport class StoredProcedure {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createStoredProcedureUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * Creates a new instance of {@link StoredProcedure} linked to the parent {@link Container}.\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link StoredProcedure}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Read the {@link StoredProcedureDefinition} for the given {@link StoredProcedure}.\n   */\n  public async read(options?: RequestOptions): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<StoredProcedureDefinition>({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link StoredProcedure} with the specified {@link StoredProcedureDefinition}.\n   * @param body - The specified {@link StoredProcedureDefinition} to replace the existing definition.\n   */\n  public async replace(\n    body: StoredProcedureDefinition,\n    options?: RequestOptions,\n  ): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<StoredProcedureDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link StoredProcedure}.\n   */\n  public async delete(options?: RequestOptions): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<StoredProcedureDefinition>({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Execute the given {@link StoredProcedure}.\n   *\n   * The specified type, T, is not enforced by the client.\n   * Be sure to validate the response from the stored procedure matches the type, T, you provide.\n   *\n   * @param partitionKey - The partition key to use when executing the stored procedure\n   * @param params - Array of parameters to pass as arguments to the given {@link StoredProcedure}.\n   * @param options - Additional options, such as the partition key to invoke the {@link StoredProcedure} on.\n   */\n  public async execute<T = any>(\n    partitionKey: PartitionKey,\n    params?: any[],\n    options?: RequestOptions,\n  ): Promise<ResourceResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (partitionKey === undefined) {\n        const partitionKeyResponse = await readPartitionKeyDefinition(\n          diagnosticNode,\n          this.container,\n        );\n        partitionKey = undefinedPartitionKey(partitionKeyResponse);\n      }\n      const response = await this.clientContext.execute<T>({\n        sprocLink: this.url,\n        params,\n        options,\n        partitionKey,\n        diagnosticNode,\n      });\n      return new ResourceResponse<T>(\n        response.result,\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}