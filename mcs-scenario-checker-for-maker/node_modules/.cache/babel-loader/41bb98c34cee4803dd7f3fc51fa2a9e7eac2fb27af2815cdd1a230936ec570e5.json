{"ast":null,"code":"import { __asyncGenerator, __await } from \"tslib\";\nimport { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse\";\nimport { Constants, ResourceType, StatusCodes } from \"../../common\";\nimport { ErrorResponse } from \"../../request\";\nimport { ContinuationTokenForPartitionKey } from \"./ContinuationTokenForPartitionKey\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport { ChangeFeedMode } from \"./ChangeFeedMode\";\n/**\n * @hidden\n * Provides iterator for change feed for one partition key.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\nexport class ChangeFeedForPartitionKey {\n  /**\n   * @internal\n   */\n  constructor(clientContext, container, resourceId, resourceLink, partitionKey, changeFeedOptions) {\n    this.clientContext = clientContext;\n    this.container = container;\n    this.resourceId = resourceId;\n    this.resourceLink = resourceLink;\n    this.partitionKey = partitionKey;\n    this.changeFeedOptions = changeFeedOptions;\n    this.continuationToken = changeFeedOptions.continuationToken ? JSON.parse(changeFeedOptions.continuationToken) : undefined;\n    this.isInstantiated = false;\n    // startTime is used to store and specify time from which change feed should start reading new changes. StartFromNow flag is used to indicate fetching changes from now.\n    if (changeFeedOptions.startFromNow) {\n      this.startFromNow = true;\n    } else if (changeFeedOptions.startTime) {\n      this.startTime = changeFeedOptions.startTime.toUTCString();\n    }\n  }\n  async instantiateIterator(diagnosticNode) {\n    await this.setIteratorRid(diagnosticNode);\n    if (this.continuationToken) {\n      if (!this.continuationTokenRidMatchContainerRid()) {\n        throw new ErrorResponse(\"The continuation is not for the current container definition.\");\n      }\n    } else {\n      this.continuationToken = new ContinuationTokenForPartitionKey(this.rId, this.partitionKey, \"\");\n    }\n    this.isInstantiated = true;\n  }\n  continuationTokenRidMatchContainerRid() {\n    if (this.continuationToken.rid !== this.rId) {\n      return false;\n    }\n    return true;\n  }\n  async setIteratorRid(diagnosticNode) {\n    const {\n      resource\n    } = await this.container.readInternal(diagnosticNode);\n    this.rId = resource._rid;\n  }\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults() {\n    return true;\n  }\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  getAsyncIterator() {\n    return __asyncGenerator(this, arguments, function* getAsyncIterator_1() {\n      do {\n        const result = yield __await(this.readNext());\n        yield yield __await(result);\n      } while (this.hasMoreResults);\n    });\n  }\n  /**\n   * Returns the result of change feed from Azure Cosmos DB.\n   */\n  async readNext() {\n    return withDiagnostics(async diagnosticNode => {\n      if (!this.isInstantiated) {\n        await this.instantiateIterator(diagnosticNode);\n      }\n      const result = await this.fetchNext(diagnosticNode);\n      return result;\n    }, this.clientContext);\n  }\n  /**\n   * Read feed and retrieves the next set of results in Azure Cosmos DB.\n   */\n  async fetchNext(diagnosticNode) {\n    const response = await this.getFeedResponse(diagnosticNode);\n    this.continuationToken.Continuation = response.headers[Constants.HttpHeaders.ETag];\n    response.headers[Constants.HttpHeaders.ContinuationToken] = JSON.stringify(this.continuationToken);\n    return response;\n  }\n  async getFeedResponse(diagnosticNode) {\n    const feedOptions = {\n      initialHeaders: {},\n      useLatestVersionFeed: true,\n      useAllVersionsAndDeletesFeed: false\n    };\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n    const continuation = this.continuationToken.Continuation;\n    if (continuation) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: continuation\n      };\n    } else if (this.startFromNow) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfNoneMatch] = Constants.ChangeFeedIfNoneMatchStartFromNowHeader;\n    }\n    if (this.startTime) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.startTime;\n    }\n    if (this.changeFeedOptions.changeFeedMode && this.changeFeedOptions.changeFeedMode === ChangeFeedMode.AllVersionsAndDeletes) {\n      feedOptions.useAllVersionsAndDeletesFeed = true;\n      feedOptions.useLatestVersionFeed = false;\n    }\n    try {\n      const response = await this.clientContext.queryFeed({\n        path: this.resourceLink,\n        resourceType: ResourceType.item,\n        resourceId: this.resourceId,\n        resultFn: result => result ? result.Documents : [],\n        diagnosticNode,\n        query: undefined,\n        options: feedOptions,\n        partitionKey: this.partitionKey\n      });\n      return new ChangeFeedIteratorResponse(response.result, response.result ? response.result.length : 0, response.code, response.headers, getEmptyCosmosDiagnostics());\n    } catch (err) {\n      if (err.code >= StatusCodes.BadRequest && err.code !== StatusCodes.Gone) {\n        const errorResponse = new ErrorResponse(err.message);\n        errorResponse.code = err.code;\n        errorResponse.headers = err.headers;\n        throw errorResponse;\n      }\n      return new ChangeFeedIteratorResponse([], 0, err.code, err.headers, getEmptyCosmosDiagnostics());\n    }\n  }\n}","map":{"version":3,"names":["ChangeFeedIteratorResponse","Constants","ResourceType","StatusCodes","ErrorResponse","ContinuationTokenForPartitionKey","getEmptyCosmosDiagnostics","withDiagnostics","ChangeFeedMode","ChangeFeedForPartitionKey","constructor","clientContext","container","resourceId","resourceLink","partitionKey","changeFeedOptions","continuationToken","JSON","parse","undefined","isInstantiated","startFromNow","startTime","toUTCString","instantiateIterator","diagnosticNode","setIteratorRid","continuationTokenRidMatchContainerRid","rId","rid","resource","readInternal","_rid","hasMoreResults","getAsyncIterator","result","__await","readNext","fetchNext","response","getFeedResponse","Continuation","headers","HttpHeaders","ETag","ContinuationToken","stringify","feedOptions","initialHeaders","useLatestVersionFeed","useAllVersionsAndDeletesFeed","maxItemCount","sessionToken","continuation","accessCondition","type","IfNoneMatch","condition","ChangeFeedIfNoneMatchStartFromNowHeader","IfModifiedSince","changeFeedMode","AllVersionsAndDeletes","queryFeed","path","resourceType","item","resultFn","Documents","query","options","length","code","err","BadRequest","Gone","errorResponse","message"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/ChangeFeed/ChangeFeedForPartitionKey.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { InternalChangeFeedIteratorOptions } from \"./InternalChangeFeedOptions\";\nimport { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse\";\nimport type { Container, Resource } from \"../../client\";\nimport type { ClientContext } from \"../../ClientContext\";\nimport { Constants, ResourceType, StatusCodes } from \"../../common\";\nimport type { FeedOptions, Response } from \"../../request\";\nimport { ErrorResponse } from \"../../request\";\nimport { ContinuationTokenForPartitionKey } from \"./ContinuationTokenForPartitionKey\";\nimport type { ChangeFeedPullModelIterator } from \"./ChangeFeedPullModelIterator\";\nimport type { PartitionKey } from \"../../documents\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport { ChangeFeedMode } from \"./ChangeFeedMode\";\n/**\n * @hidden\n * Provides iterator for change feed for one partition key.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\nexport class ChangeFeedForPartitionKey<T> implements ChangeFeedPullModelIterator<T> {\n  private continuationToken: ContinuationTokenForPartitionKey;\n  private startTime: string;\n  private rId: string;\n  private isInstantiated: boolean;\n  private startFromNow: boolean;\n  /**\n   * @internal\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private container: Container,\n    private resourceId: string,\n    private resourceLink: string,\n    private partitionKey: PartitionKey,\n    private changeFeedOptions: InternalChangeFeedIteratorOptions,\n  ) {\n    this.continuationToken = changeFeedOptions.continuationToken\n      ? JSON.parse(changeFeedOptions.continuationToken)\n      : undefined;\n    this.isInstantiated = false;\n    // startTime is used to store and specify time from which change feed should start reading new changes. StartFromNow flag is used to indicate fetching changes from now.\n    if (changeFeedOptions.startFromNow) {\n      this.startFromNow = true;\n    } else if (changeFeedOptions.startTime) {\n      this.startTime = changeFeedOptions.startTime.toUTCString();\n    }\n  }\n\n  private async instantiateIterator(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    await this.setIteratorRid(diagnosticNode);\n    if (this.continuationToken) {\n      if (!this.continuationTokenRidMatchContainerRid()) {\n        throw new ErrorResponse(\"The continuation is not for the current container definition.\");\n      }\n    } else {\n      this.continuationToken = new ContinuationTokenForPartitionKey(\n        this.rId,\n        this.partitionKey,\n        \"\",\n      );\n    }\n\n    this.isInstantiated = true;\n  }\n\n  private continuationTokenRidMatchContainerRid(): boolean {\n    if (this.continuationToken.rid !== this.rId) {\n      return false;\n    }\n    return true;\n  }\n\n  private async setIteratorRid(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    const { resource } = await this.container.readInternal(diagnosticNode);\n    this.rId = resource._rid;\n  }\n\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults(): boolean {\n    return true;\n  }\n\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.readNext();\n      yield result;\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Returns the result of change feed from Azure Cosmos DB.\n   */\n  public async readNext(): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (!this.isInstantiated) {\n        await this.instantiateIterator(diagnosticNode);\n      }\n      const result = await this.fetchNext(diagnosticNode);\n      return result;\n    }, this.clientContext);\n  }\n\n  /**\n   * Read feed and retrieves the next set of results in Azure Cosmos DB.\n   */\n  private async fetchNext(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    const response = await this.getFeedResponse(diagnosticNode);\n    this.continuationToken.Continuation = response.headers[Constants.HttpHeaders.ETag];\n    response.headers[Constants.HttpHeaders.ContinuationToken] = JSON.stringify(\n      this.continuationToken,\n    );\n    return response;\n  }\n\n  private async getFeedResponse(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    const feedOptions: FeedOptions = {\n      initialHeaders: {},\n      useLatestVersionFeed: true,\n      useAllVersionsAndDeletesFeed: false,\n    };\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    const continuation = this.continuationToken.Continuation;\n    if (continuation) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: continuation,\n      };\n    } else if (this.startFromNow) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfNoneMatch] =\n        Constants.ChangeFeedIfNoneMatchStartFromNowHeader;\n    }\n\n    if (this.startTime) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.startTime;\n    }\n    if (\n      this.changeFeedOptions.changeFeedMode &&\n      this.changeFeedOptions.changeFeedMode === ChangeFeedMode.AllVersionsAndDeletes\n    ) {\n      feedOptions.useAllVersionsAndDeletesFeed = true;\n      feedOptions.useLatestVersionFeed = false;\n    }\n    try {\n      const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n        path: this.resourceLink,\n        resourceType: ResourceType.item,\n        resourceId: this.resourceId,\n        resultFn: (result) => (result ? result.Documents : []),\n        diagnosticNode,\n        query: undefined,\n        options: feedOptions,\n        partitionKey: this.partitionKey,\n      }) as Promise<any>);\n      return new ChangeFeedIteratorResponse(\n        response.result,\n        response.result ? response.result.length : 0,\n        response.code,\n        response.headers,\n        getEmptyCosmosDiagnostics(),\n      );\n    } catch (err) {\n      if (err.code >= StatusCodes.BadRequest && err.code !== StatusCodes.Gone) {\n        const errorResponse = new ErrorResponse(err.message);\n        errorResponse.code = err.code;\n        errorResponse.headers = err.headers;\n        throw errorResponse;\n      }\n      return new ChangeFeedIteratorResponse(\n        [],\n        0,\n        err.code,\n        err.headers,\n        getEmptyCosmosDiagnostics(),\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}