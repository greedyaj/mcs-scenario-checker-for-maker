{"ast":null,"code":"import { createPermissionUri, getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { PermissionResponse } from \"./PermissionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * Use to read, replace, or delete a given {@link Permission} by id.\n *\n * @see {@link Permissions} to create, upsert, query, or read all Permissions.\n */\nexport class Permission {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  get url() {\n    return createPermissionUri(this.user.database.id, this.user.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param user - The parent {@link User}.\n   * @param id - The id of the given {@link Permission}.\n   */\n  constructor(user, id, clientContext) {\n    this.user = user;\n    this.id = id;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Read the {@link PermissionDefinition} of the given {@link Permission}.\n   */\n  async read(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.read({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new PermissionResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Replace the given {@link Permission} with the specified {@link PermissionDefinition}.\n   * @param body - The specified {@link PermissionDefinition}.\n   */\n  async replace(body, options) {\n    return withDiagnostics(async diagnosticNode => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new PermissionResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Delete the given {@link Permission}.\n   */\n  async delete(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.delete({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new PermissionResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["createPermissionUri","getIdFromLink","getPathFromLink","isResourceValid","ResourceType","PermissionResponse","getEmptyCosmosDiagnostics","withDiagnostics","Permission","url","user","database","id","constructor","clientContext","read","options","diagnosticNode","path","response","resourceType","permission","resourceId","result","headers","code","replace","body","err","delete"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/Permission/Permission.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createPermissionUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport type { RequestOptions } from \"../../request/RequestOptions\";\nimport type { User } from \"../User\";\nimport type { PermissionBody } from \"./PermissionBody\";\nimport type { PermissionDefinition } from \"./PermissionDefinition\";\nimport { PermissionResponse } from \"./PermissionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Use to read, replace, or delete a given {@link Permission} by id.\n *\n * @see {@link Permissions} to create, upsert, query, or read all Permissions.\n */\nexport class Permission {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createPermissionUri(this.user.database.id, this.user.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param user - The parent {@link User}.\n   * @param id - The id of the given {@link Permission}.\n   */\n  constructor(\n    public readonly user: User,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Read the {@link PermissionDefinition} of the given {@link Permission}.\n   */\n  public async read(options?: RequestOptions): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<PermissionDefinition & PermissionBody>({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link Permission} with the specified {@link PermissionDefinition}.\n   * @param body - The specified {@link PermissionDefinition}.\n   */\n  public async replace(\n    body: PermissionDefinition,\n    options?: RequestOptions,\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.replace<PermissionDefinition & PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link Permission}.\n   */\n  public async delete(options?: RequestOptions): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.delete<PermissionDefinition & PermissionBody>({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}