{"ast":null,"code":"import { Constants, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { ConflictResponse } from \"./ConflictResponse\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * Use to read or delete a given {@link Conflict} by id.\n *\n * @see {@link Conflicts} to query or read all conflicts.\n */\nexport class Conflict {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  get url() {\n    return `/${this.container.url}/${Constants.Path.ConflictsPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Conflict}.\n   */\n  constructor(container, id, clientContext, partitionKey) {\n    this.container = container;\n    this.id = id;\n    this.clientContext = clientContext;\n    this.partitionKey = partitionKey;\n    this.partitionKey = partitionKey;\n  }\n  /**\n   * Read the {@link ConflictDefinition} for the given {@link Conflict}.\n   */\n  async read(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const path = getPathFromLink(this.url, ResourceType.conflicts);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.read({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new ConflictResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Delete the given {@link ConflictDefinition}.\n   */\n  async delete(options) {\n    return withDiagnostics(async diagnosticNode => {\n      if (this.partitionKey === undefined) {\n        const partitionKeyDefinition = await readPartitionKeyDefinition(diagnosticNode, this.container);\n        this.partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.delete({\n        path,\n        resourceType: ResourceType.conflicts,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode\n      });\n      return new ConflictResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["Constants","getIdFromLink","getPathFromLink","ResourceType","ConflictResponse","undefinedPartitionKey","readPartitionKeyDefinition","getEmptyCosmosDiagnostics","withDiagnostics","Conflict","url","container","Path","ConflictsPathSegment","id","constructor","clientContext","partitionKey","read","options","diagnosticNode","path","conflicts","response","resourceType","user","resourceId","result","headers","code","delete","undefined","partitionKeyDefinition"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/Conflict/Conflict.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport { Constants, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport type { RequestOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { ConflictDefinition } from \"./ConflictDefinition\";\nimport { ConflictResponse } from \"./ConflictResponse\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport type { PartitionKey } from \"../../documents\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Use to read or delete a given {@link Conflict} by id.\n *\n * @see {@link Conflicts} to query or read all conflicts.\n */\nexport class Conflict {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return `/${this.container.url}/${Constants.Path.ConflictsPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Conflict}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n    private partitionKey?: PartitionKey,\n  ) {\n    this.partitionKey = partitionKey;\n  }\n\n  /**\n   * Read the {@link ConflictDefinition} for the given {@link Conflict}.\n   */\n  public async read(options?: RequestOptions): Promise<ConflictResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url, ResourceType.conflicts);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<ConflictDefinition>({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n\n      return new ConflictResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link ConflictDefinition}.\n   */\n  public async delete(options?: RequestOptions): Promise<ConflictResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (this.partitionKey === undefined) {\n        const partitionKeyDefinition = await readPartitionKeyDefinition(\n          diagnosticNode,\n          this.container,\n        );\n        this.partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<ConflictDefinition>({\n        path,\n        resourceType: ResourceType.conflicts,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode,\n      });\n      return new ConflictResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"AAGA,SAASA,SAAS,EAAEC,aAAa,EAAEC,eAAe,EAAEC,YAAY,QAAQ,cAAc;AAItF,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,qBAAqB,QAAQ,2BAA2B;AAGjE,SAASC,0BAA0B,QAAQ,gBAAgB;AAC3D,SAASC,yBAAyB,EAAEC,eAAe,QAAQ,yBAAyB;AAEpF;;;;;AAKA,OAAM,MAAOC,QAAQ;EACnB;;;EAGA,IAAWC,GAAGA,CAAA;IACZ,OAAO,IAAI,IAAI,CAACC,SAAS,CAACD,GAAG,IAAIV,SAAS,CAACY,IAAI,CAACC,oBAAoB,IAAI,IAAI,CAACC,EAAE,EAAE;EACnF;EACA;;;;;EAKAC,YACkBJ,SAAoB,EACpBG,EAAU,EACTE,aAA4B,EACrCC,YAA2B;IAHnB,KAAAN,SAAS,GAATA,SAAS;IACT,KAAAG,EAAE,GAAFA,EAAE;IACD,KAAAE,aAAa,GAAbA,aAAa;IACtB,KAAAC,YAAY,GAAZA,YAAY;IAEpB,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;EAEA;;;EAGO,MAAMC,IAAIA,CAACC,OAAwB;IACxC,OAAOX,eAAe,CAAC,MAAOY,cAAsC,IAAI;MACtE,MAAMC,IAAI,GAAGnB,eAAe,CAAC,IAAI,CAACQ,GAAG,EAAEP,YAAY,CAACmB,SAAS,CAAC;MAC9D,MAAMR,EAAE,GAAGb,aAAa,CAAC,IAAI,CAACS,GAAG,CAAC;MAElC,MAAMa,QAAQ,GAAG,MAAM,IAAI,CAACP,aAAa,CAACE,IAAI,CAAqB;QACjEG,IAAI;QACJG,YAAY,EAAErB,YAAY,CAACsB,IAAI;QAC/BC,UAAU,EAAEZ,EAAE;QACdK,OAAO;QACPC;OACD,CAAC;MAEF,OAAO,IAAIhB,gBAAgB,CACzBmB,QAAQ,CAACI,MAAM,EACfJ,QAAQ,CAACK,OAAO,EAChBL,QAAQ,CAACM,IAAI,EACb,IAAI,EACJtB,yBAAyB,EAAE,CAC5B;IACH,CAAC,EAAE,IAAI,CAACS,aAAa,CAAC;EACxB;EAEA;;;EAGO,MAAMc,MAAMA,CAACX,OAAwB;IAC1C,OAAOX,eAAe,CAAC,MAAOY,cAAsC,IAAI;MACtE,IAAI,IAAI,CAACH,YAAY,KAAKc,SAAS,EAAE;QACnC,MAAMC,sBAAsB,GAAG,MAAM1B,0BAA0B,CAC7Dc,cAAc,EACd,IAAI,CAACT,SAAS,CACf;QACD,IAAI,CAACM,YAAY,GAAGZ,qBAAqB,CAAC2B,sBAAsB,CAAC;MACnE;MACA,MAAMX,IAAI,GAAGnB,eAAe,CAAC,IAAI,CAACQ,GAAG,CAAC;MACtC,MAAMI,EAAE,GAAGb,aAAa,CAAC,IAAI,CAACS,GAAG,CAAC;MAElC,MAAMa,QAAQ,GAAG,MAAM,IAAI,CAACP,aAAa,CAACc,MAAM,CAAqB;QACnET,IAAI;QACJG,YAAY,EAAErB,YAAY,CAACmB,SAAS;QACpCI,UAAU,EAAEZ,EAAE;QACdK,OAAO;QACPF,YAAY,EAAE,IAAI,CAACA,YAAY;QAC/BG;OACD,CAAC;MACF,OAAO,IAAIhB,gBAAgB,CACzBmB,QAAQ,CAACI,MAAM,EACfJ,QAAQ,CAACK,OAAO,EAChBL,QAAQ,CAACM,IAAI,EACb,IAAI,EACJtB,yBAAyB,EAAE,CAC5B;IACH,CAAC,EAAE,IAAI,CAACS,aAAa,CAAC;EACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}