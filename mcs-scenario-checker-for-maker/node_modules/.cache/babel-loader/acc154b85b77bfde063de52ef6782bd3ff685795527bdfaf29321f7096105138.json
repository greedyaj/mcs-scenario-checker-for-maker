{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst FieldNames = {\n  Rid: \"_rid\",\n  Payload: \"payload\",\n  ComponentScores: \"componentScores\"\n};\nexport class HybridSearchQueryResult {\n  constructor(rid, componentScores, data) {\n    this.rid = rid;\n    this.componentScores = componentScores;\n    this.data = data;\n  }\n  static create(document) {\n    const rid = document[FieldNames.Rid];\n    if (!rid) {\n      throw new Error(`${FieldNames.Rid} must exist.`);\n    }\n    const outerPayload = document[FieldNames.Payload];\n    if (!outerPayload || typeof outerPayload !== \"object\") {\n      throw new Error(`${FieldNames.Payload} must exist.`);\n    }\n    const innerPayload = outerPayload[FieldNames.Payload];\n    if (!innerPayload || typeof innerPayload !== \"object\") {\n      throw new Error(`${FieldNames.Payload} must exist nested within the outer payload field.`);\n    }\n    const componentScores = outerPayload[FieldNames.ComponentScores];\n    if (!Array.isArray(componentScores)) {\n      throw new Error(`${FieldNames.ComponentScores} must exist.`);\n    }\n    return new HybridSearchQueryResult(rid, componentScores, innerPayload);\n  }\n}","map":{"version":3,"names":["FieldNames","Rid","Payload","ComponentScores","HybridSearchQueryResult","constructor","rid","componentScores","data","create","document","Error","outerPayload","innerPayload","Array","isArray"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/request/hybridSearchQueryResult.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ItemDefinition } from \"../client\";\n\nconst FieldNames = {\n  Rid: \"_rid\",\n  Payload: \"payload\",\n  ComponentScores: \"componentScores\",\n};\n\nexport class HybridSearchQueryResult {\n  rid: string;\n  componentScores: number[];\n  data: any;\n  score: number;\n  ranks: number[];\n\n  constructor(rid: string, componentScores: number[], data: Record<string, unknown>) {\n    this.rid = rid;\n    this.componentScores = componentScores;\n    this.data = data;\n  }\n\n  public static create<T extends ItemDefinition>(document: T): HybridSearchQueryResult {\n    const rid = document[FieldNames.Rid];\n    if (!rid) {\n      throw new Error(`${FieldNames.Rid} must exist.`);\n    }\n\n    const outerPayload = document[FieldNames.Payload];\n    if (!outerPayload || typeof outerPayload !== \"object\") {\n      throw new Error(`${FieldNames.Payload} must exist.`);\n    }\n\n    const innerPayload = outerPayload[FieldNames.Payload];\n    if (!innerPayload || typeof innerPayload !== \"object\") {\n      throw new Error(`${FieldNames.Payload} must exist nested within the outer payload field.`);\n    }\n\n    const componentScores = outerPayload[FieldNames.ComponentScores];\n    if (!Array.isArray(componentScores)) {\n      throw new Error(`${FieldNames.ComponentScores} must exist.`);\n    }\n\n    return new HybridSearchQueryResult(rid, componentScores, innerPayload);\n  }\n}\n"],"mappings":"AAAA;AACA;AAIA,MAAMA,UAAU,GAAG;EACjBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAE,SAAS;EAClBC,eAAe,EAAE;CAClB;AAED,OAAM,MAAOC,uBAAuB;EAOlCC,YAAYC,GAAW,EAAEC,eAAyB,EAAEC,IAA6B;IAC/E,IAAI,CAACF,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;EAEO,OAAOC,MAAMA,CAA2BC,QAAW;IACxD,MAAMJ,GAAG,GAAGI,QAAQ,CAACV,UAAU,CAACC,GAAG,CAAC;IACpC,IAAI,CAACK,GAAG,EAAE;MACR,MAAM,IAAIK,KAAK,CAAC,GAAGX,UAAU,CAACC,GAAG,cAAc,CAAC;IAClD;IAEA,MAAMW,YAAY,GAAGF,QAAQ,CAACV,UAAU,CAACE,OAAO,CAAC;IACjD,IAAI,CAACU,YAAY,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;MACrD,MAAM,IAAID,KAAK,CAAC,GAAGX,UAAU,CAACE,OAAO,cAAc,CAAC;IACtD;IAEA,MAAMW,YAAY,GAAGD,YAAY,CAACZ,UAAU,CAACE,OAAO,CAAC;IACrD,IAAI,CAACW,YAAY,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;MACrD,MAAM,IAAIF,KAAK,CAAC,GAAGX,UAAU,CAACE,OAAO,oDAAoD,CAAC;IAC5F;IAEA,MAAMK,eAAe,GAAGK,YAAY,CAACZ,UAAU,CAACG,eAAe,CAAC;IAChE,IAAI,CAACW,KAAK,CAACC,OAAO,CAACR,eAAe,CAAC,EAAE;MACnC,MAAM,IAAII,KAAK,CAAC,GAAGX,UAAU,CAACG,eAAe,cAAc,CAAC;IAC9D;IAEA,OAAO,IAAIC,uBAAuB,CAACE,GAAG,EAAEC,eAAe,EAAEM,YAAY,CAAC;EACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}