{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** @hidden */\nexport var FetchResultType;\n(function (FetchResultType) {\n  FetchResultType[FetchResultType[\"Done\"] = 0] = \"Done\";\n  FetchResultType[FetchResultType[\"Exception\"] = 1] = \"Exception\";\n  FetchResultType[FetchResultType[\"Result\"] = 2] = \"Result\";\n})(FetchResultType || (FetchResultType = {}));\n/** @hidden */\nexport class FetchResult {\n  /**\n   * Wraps fetch results for the document producer.\n   * This allows the document producer to buffer exceptions so that actual results don't get flushed during splits.\n   *\n   * @param feedReponse - The response the document producer got back on a successful fetch\n   * @param error - The exception meant to be buffered on an unsuccessful fetch\n   * @hidden\n   */\n  constructor(feedResponse, error) {\n    // TODO: feedResponse/error\n    if (feedResponse !== undefined) {\n      this.feedResponse = feedResponse;\n      this.fetchResultType = FetchResultType.Result;\n    } else {\n      this.error = error;\n      this.fetchResultType = FetchResultType.Exception;\n    }\n  }\n}","map":{"version":3,"names":["FetchResultType","FetchResult","constructor","feedResponse","error","undefined","fetchResultType","Result","Exception"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/FetchResult.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** @hidden */\nexport enum FetchResultType {\n  \"Done\" = 0,\n  \"Exception\" = 1,\n  \"Result\" = 2,\n}\n\n/** @hidden */\nexport class FetchResult {\n  public feedResponse: any;\n  public fetchResultType: FetchResultType;\n  public error: any;\n  /**\n   * Wraps fetch results for the document producer.\n   * This allows the document producer to buffer exceptions so that actual results don't get flushed during splits.\n   *\n   * @param feedReponse - The response the document producer got back on a successful fetch\n   * @param error - The exception meant to be buffered on an unsuccessful fetch\n   * @hidden\n   */\n  constructor(feedResponse: unknown, error: unknown) {\n    // TODO: feedResponse/error\n    if (feedResponse !== undefined) {\n      this.feedResponse = feedResponse;\n      this.fetchResultType = FetchResultType.Result;\n    } else {\n      this.error = error;\n      this.fetchResultType = FetchResultType.Exception;\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,WAAYA,eAIX;AAJD,WAAYA,eAAe;EACzBA,eAAA,CAAAA,eAAA,sBAAU;EACVA,eAAA,CAAAA,eAAA,gCAAe;EACfA,eAAA,CAAAA,eAAA,0BAAY;AACd,CAAC,EAJWA,eAAe,KAAfA,eAAe;AAM3B;AACA,OAAM,MAAOC,WAAW;EAItB;;;;;;;;EAQAC,YAAYC,YAAqB,EAAEC,KAAc;IAC/C;IACA,IAAID,YAAY,KAAKE,SAAS,EAAE;MAC9B,IAAI,CAACF,YAAY,GAAGA,YAAY;MAChC,IAAI,CAACG,eAAe,GAAGN,eAAe,CAACO,MAAM;IAC/C,CAAC,MAAM;MACL,IAAI,CAACH,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACE,eAAe,GAAGN,eAAe,CAACQ,SAAS;IAClD;EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}