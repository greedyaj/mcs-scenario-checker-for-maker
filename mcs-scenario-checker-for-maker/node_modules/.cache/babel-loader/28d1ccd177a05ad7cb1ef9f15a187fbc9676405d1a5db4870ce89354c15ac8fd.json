{"ast":null,"code":"import { Constants } from \"./common\";\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\nexport class ChangeFeedResponse {\n  /**\n   * @internal\n   */\n  constructor(\n  /**\n   * Gets the items returned in the response from Azure Cosmos DB\n   */\n  result,\n  /**\n   * Gets the number of items returned in the response from Azure Cosmos DB\n   */\n  count,\n  /**\n   * Gets the status code of the response from Azure Cosmos DB\n   */\n  statusCode, headers, diagnostics) {\n    this.result = result;\n    this.count = count;\n    this.statusCode = statusCode;\n    this.diagnostics = diagnostics;\n    this.headers = Object.freeze(headers);\n  }\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n  get requestCharge() {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n  get activityId() {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   *\n   * This is equivalent to the `etag` property.\n   */\n  get continuation() {\n    return this.etag;\n  }\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n  get sessionToken() {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n  /**\n   * Gets the entity tag associated with last transaction in the Azure Cosmos DB service,\n   * which can be used as If-Non-Match Access condition for ReadFeed REST request or\n   * `continuation` property of `ChangeFeedOptions` parameter for\n   * `Items.changeFeed()`\n   * to get feed changes since the transaction specified by this entity tag.\n   *\n   * This is equivalent to the `continuation` property.\n   */\n  get etag() {\n    return this.headers[Constants.HttpHeaders.ETag];\n  }\n}","map":{"version":3,"names":["Constants","ChangeFeedResponse","constructor","result","count","statusCode","headers","diagnostics","Object","freeze","requestCharge","rus","HttpHeaders","RequestCharge","parseInt","activityId","ActivityId","continuation","etag","sessionToken","SessionToken","ETag"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/ChangeFeedResponse.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"./CosmosDiagnostics\";\nimport { Constants } from \"./common\";\nimport type { CosmosHeaders } from \"./queryExecutionContext\";\n\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\nexport class ChangeFeedResponse<T> {\n  /**\n   * @internal\n   */\n  constructor(\n    /**\n     * Gets the items returned in the response from Azure Cosmos DB\n     */\n    public readonly result: T,\n    /**\n     * Gets the number of items returned in the response from Azure Cosmos DB\n     */\n    public readonly count: number,\n    /**\n     * Gets the status code of the response from Azure Cosmos DB\n     */\n    public readonly statusCode: number,\n    headers: CosmosHeaders,\n    public readonly diagnostics: CosmosDiagnostics,\n  ) {\n    this.headers = Object.freeze(headers);\n  }\n\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n  public get requestCharge(): number {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   *\n   * This is equivalent to the `etag` property.\n   */\n  public get continuation(): string {\n    return this.etag;\n  }\n\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n  public get sessionToken(): string {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n\n  /**\n   * Gets the entity tag associated with last transaction in the Azure Cosmos DB service,\n   * which can be used as If-Non-Match Access condition for ReadFeed REST request or\n   * `continuation` property of `ChangeFeedOptions` parameter for\n   * `Items.changeFeed()`\n   * to get feed changes since the transaction specified by this entity tag.\n   *\n   * This is equivalent to the `continuation` property.\n   */\n  public get etag(): string {\n    return this.headers[Constants.HttpHeaders.ETag];\n  }\n\n  /**\n   * Response headers of the response from Azure Cosmos DB\n   */\n  public headers: CosmosHeaders;\n}\n"],"mappings":"AAGA,SAASA,SAAS,QAAQ,UAAU;AAGpC;;;AAGA,OAAM,MAAOC,kBAAkB;EAC7B;;;EAGAC;EACE;;;EAGgBC,MAAS;EACzB;;;EAGgBC,KAAa;EAC7B;;;EAGgBC,UAAkB,EAClCC,OAAsB,EACNC,WAA8B;IAV9B,KAAAJ,MAAM,GAANA,MAAM;IAIN,KAAAC,KAAK,GAALA,KAAK;IAIL,KAAAC,UAAU,GAAVA,UAAU;IAEV,KAAAE,WAAW,GAAXA,WAAW;IAE3B,IAAI,CAACD,OAAO,GAAGE,MAAM,CAACC,MAAM,CAACH,OAAO,CAAC;EACvC;EAEA;;;EAGA,IAAWI,aAAaA,CAAA;IACtB,MAAMC,GAAG,GAAG,IAAI,CAACL,OAAO,CAACN,SAAS,CAACY,WAAW,CAACC,aAAa,CAAC;IAC7D,OAAOF,GAAG,GAAGG,QAAQ,CAACH,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI;EACvC;EAEA;;;EAGA,IAAWI,UAAUA,CAAA;IACnB,OAAO,IAAI,CAACT,OAAO,CAACN,SAAS,CAACY,WAAW,CAACI,UAAU,CAAC;EACvD;EAEA;;;;;EAKA,IAAWC,YAAYA,CAAA;IACrB,OAAO,IAAI,CAACC,IAAI;EAClB;EAEA;;;EAGA,IAAWC,YAAYA,CAAA;IACrB,OAAO,IAAI,CAACb,OAAO,CAACN,SAAS,CAACY,WAAW,CAACQ,YAAY,CAAC;EACzD;EAEA;;;;;;;;;EASA,IAAWF,IAAIA,CAAA;IACb,OAAO,IAAI,CAACZ,OAAO,CAACN,SAAS,CAACY,WAAW,CAACS,IAAI,CAAC;EACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}