{"ast":null,"code":"/**\n * Represents the data type of the vector.\n */\nexport var VectorEmbeddingDataType;\n(function (VectorEmbeddingDataType) {\n  /**\n   * 32-bit floating point number.\n   */\n  VectorEmbeddingDataType[\"Float32\"] = \"float32\";\n  /**\n   * 8-bit unsigned integer.\n   */\n  VectorEmbeddingDataType[\"UInt8\"] = \"uint8\";\n  /**\n   * 8-bit signed integer.\n   */\n  VectorEmbeddingDataType[\"Int8\"] = \"int8\";\n})(VectorEmbeddingDataType || (VectorEmbeddingDataType = {}));\n/**\n * Represents the distance function to use for distance calculation in between vectors.\n */\nexport var VectorEmbeddingDistanceFunction;\n(function (VectorEmbeddingDistanceFunction) {\n  /**\n   * Represents euclidean distance function.\n   */\n  VectorEmbeddingDistanceFunction[\"Euclidean\"] = \"euclidean\";\n  /**\n   * Represents cosine distance function.\n   */\n  VectorEmbeddingDistanceFunction[\"Cosine\"] = \"cosine\";\n  /**\n   * Represents dot product distance function.\n   */\n  VectorEmbeddingDistanceFunction[\"DotProduct\"] = \"dotproduct\";\n})(VectorEmbeddingDistanceFunction || (VectorEmbeddingDistanceFunction = {}));","map":{"version":3,"names":["VectorEmbeddingDataType","VectorEmbeddingDistanceFunction"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/documents/VectorEmbeddingPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Represents the policy configuration for vector embeddings in the Azure Cosmos DB service.\n */\nexport interface VectorEmbeddingPolicy {\n  /**\n   * The vector embeddings to be configured.\n   */\n  vectorEmbeddings: VectorEmbedding[];\n}\n/**\n * Represents a vector embedding.\n * A vector embedding is used to define a vector field in the documents.\n */\nexport interface VectorEmbedding {\n  /**\n   * The path to the vector field in the document.\n   */\n  path: string;\n  /**\n   * The number of dimensions in the vector.\n   */\n  dimensions: number;\n  /**\n   * The data type of the vector.\n   */\n  dataType: VectorEmbeddingDataType;\n  /**\n   * The distance function to use for distance calculation in between vectors.\n   */\n  distanceFunction: VectorEmbeddingDistanceFunction;\n}\n\n/**\n * Represents the data type of the vector.\n */\nexport enum VectorEmbeddingDataType {\n  /**\n   * 32-bit floating point number.\n   */\n  Float32 = \"float32\",\n  /**\n   * 8-bit unsigned integer.\n   */\n  UInt8 = \"uint8\",\n  /**\n   * 8-bit signed integer.\n   */\n  Int8 = \"int8\",\n}\n/**\n * Represents the distance function to use for distance calculation in between vectors.\n */\nexport enum VectorEmbeddingDistanceFunction {\n  /**\n   * Represents euclidean distance function.\n   */\n  Euclidean = \"euclidean\",\n  /**\n   * Represents cosine distance function.\n   */\n  Cosine = \"cosine\",\n  /**\n   * Represents dot product distance function.\n   */\n  DotProduct = \"dotproduct\",\n}\n"],"mappings":"AAkCA;;;AAGA,WAAYA,uBAaX;AAbD,WAAYA,uBAAuB;EACjC;;;EAGAA,uBAAA,uBAAmB;EACnB;;;EAGAA,uBAAA,mBAAe;EACf;;;EAGAA,uBAAA,iBAAa;AACf,CAAC,EAbWA,uBAAuB,KAAvBA,uBAAuB;AAcnC;;;AAGA,WAAYC,+BAaX;AAbD,WAAYA,+BAA+B;EACzC;;;EAGAA,+BAAA,2BAAuB;EACvB;;;EAGAA,+BAAA,qBAAiB;EACjB;;;EAGAA,+BAAA,6BAAyB;AAC3B,CAAC,EAbWA,+BAA+B,KAA/BA,+BAA+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}