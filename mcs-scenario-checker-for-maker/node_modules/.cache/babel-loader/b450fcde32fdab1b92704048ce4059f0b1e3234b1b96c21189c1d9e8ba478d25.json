{"ast":null,"code":"import { OperationType } from \"../common\";\nimport { TimeoutErrorCode } from \"../request/TimeoutError\";\n/**\n * @hidden\n */\n// Windows Socket Error Codes\nconst WindowsInterruptedFunctionCall = 10004;\n/**\n * @hidden\n */\nconst WindowsFileHandleNotValid = 10009;\n/**\n * @hidden\n */\nconst WindowsPermissionDenied = 10013;\n/**\n * @hidden\n */\nconst WindowsBadAddress = 10014;\n/**\n * @hidden\n */\nconst WindowsInvalidArgumnet = 10022;\n/**\n * @hidden\n */\nconst WindowsResourceTemporarilyUnavailable = 10035;\n/**\n * @hidden\n */\nconst WindowsOperationNowInProgress = 10036;\n/**\n * @hidden\n */\nconst WindowsAddressAlreadyInUse = 10048;\n/**\n * @hidden\n */\nconst WindowsConnectionResetByPeer = 10054;\n/**\n * @hidden\n */\nconst WindowsCannotSendAfterSocketShutdown = 10058;\n/**\n * @hidden\n */\nconst WindowsConnectionTimedOut = 10060;\n/**\n * @hidden\n */\nconst WindowsConnectionRefused = 10061;\n/**\n * @hidden\n */\nconst WindowsNameTooLong = 10063;\n/**\n * @hidden\n */\nconst WindowsHostIsDown = 10064;\n/**\n * @hidden\n */\nconst WindowsNoRouteTohost = 10065;\n/**\n * @hidden\n */\n// Linux Error Codes\n/**\n * @hidden\n */\nconst LinuxConnectionReset = \"ECONNRESET\";\n// Node Error Codes\n/**\n * @hidden\n */\nconst BrokenPipe = \"EPIPE\";\n/**\n * @hidden\n */\nconst CONNECTION_ERROR_CODES = [WindowsInterruptedFunctionCall, WindowsFileHandleNotValid, WindowsPermissionDenied, WindowsBadAddress, WindowsInvalidArgumnet, WindowsResourceTemporarilyUnavailable, WindowsOperationNowInProgress, WindowsAddressAlreadyInUse, WindowsConnectionResetByPeer, WindowsCannotSendAfterSocketShutdown, WindowsConnectionTimedOut, WindowsConnectionRefused, WindowsNameTooLong, WindowsHostIsDown, WindowsNoRouteTohost, LinuxConnectionReset, TimeoutErrorCode, BrokenPipe];\n/**\n * @hidden\n */\nfunction needsRetry(operationType, code) {\n  if ((operationType === OperationType.Read || operationType === OperationType.Query) && CONNECTION_ERROR_CODES.indexOf(code) !== -1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n/**\n * This class implements the default connection retry policy for requests.\n * @hidden\n */\nexport class DefaultRetryPolicy {\n  constructor(operationType) {\n    this.operationType = operationType;\n    this.maxTries = 10;\n    this.currentRetryAttemptCount = 0;\n    this.retryAfterInMs = 1000;\n  }\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   */\n  async shouldRetry(err, diagnosticNode) {\n    if (err) {\n      if (this.currentRetryAttemptCount < this.maxTries && needsRetry(this.operationType, err.code)) {\n        diagnosticNode.addData({\n          successfulRetryPolicy: \"default\"\n        });\n        this.currentRetryAttemptCount++;\n        return true;\n      }\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["OperationType","TimeoutErrorCode","WindowsInterruptedFunctionCall","WindowsFileHandleNotValid","WindowsPermissionDenied","WindowsBadAddress","WindowsInvalidArgumnet","WindowsResourceTemporarilyUnavailable","WindowsOperationNowInProgress","WindowsAddressAlreadyInUse","WindowsConnectionResetByPeer","WindowsCannotSendAfterSocketShutdown","WindowsConnectionTimedOut","WindowsConnectionRefused","WindowsNameTooLong","WindowsHostIsDown","WindowsNoRouteTohost","LinuxConnectionReset","BrokenPipe","CONNECTION_ERROR_CODES","needsRetry","operationType","code","Read","Query","indexOf","DefaultRetryPolicy","constructor","maxTries","currentRetryAttemptCount","retryAfterInMs","shouldRetry","err","diagnosticNode","addData","successfulRetryPolicy"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/retry/defaultRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { OperationType } from \"../common\";\nimport type { ErrorResponse } from \"../request\";\nimport { TimeoutErrorCode } from \"../request/TimeoutError\";\nimport type { RetryPolicy } from \"./RetryPolicy\";\n\n/**\n * @hidden\n */\n// Windows Socket Error Codes\nconst WindowsInterruptedFunctionCall = 10004;\n/**\n * @hidden\n */\nconst WindowsFileHandleNotValid = 10009;\n/**\n * @hidden\n */\nconst WindowsPermissionDenied = 10013;\n/**\n * @hidden\n */\nconst WindowsBadAddress = 10014;\n/**\n * @hidden\n */\nconst WindowsInvalidArgumnet = 10022;\n/**\n * @hidden\n */\nconst WindowsResourceTemporarilyUnavailable = 10035;\n/**\n * @hidden\n */\nconst WindowsOperationNowInProgress = 10036;\n/**\n * @hidden\n */\nconst WindowsAddressAlreadyInUse = 10048;\n/**\n * @hidden\n */\nconst WindowsConnectionResetByPeer = 10054;\n/**\n * @hidden\n */\nconst WindowsCannotSendAfterSocketShutdown = 10058;\n/**\n * @hidden\n */\nconst WindowsConnectionTimedOut = 10060;\n/**\n * @hidden\n */\nconst WindowsConnectionRefused = 10061;\n/**\n * @hidden\n */\nconst WindowsNameTooLong = 10063;\n/**\n * @hidden\n */\nconst WindowsHostIsDown = 10064;\n/**\n * @hidden\n */\nconst WindowsNoRouteTohost = 10065;\n/**\n * @hidden\n */\n\n// Linux Error Codes\n/**\n * @hidden\n */\nconst LinuxConnectionReset = \"ECONNRESET\";\n\n// Node Error Codes\n/**\n * @hidden\n */\nconst BrokenPipe = \"EPIPE\";\n\n/**\n * @hidden\n */\nconst CONNECTION_ERROR_CODES = [\n  WindowsInterruptedFunctionCall,\n  WindowsFileHandleNotValid,\n  WindowsPermissionDenied,\n  WindowsBadAddress,\n  WindowsInvalidArgumnet,\n  WindowsResourceTemporarilyUnavailable,\n  WindowsOperationNowInProgress,\n  WindowsAddressAlreadyInUse,\n  WindowsConnectionResetByPeer,\n  WindowsCannotSendAfterSocketShutdown,\n  WindowsConnectionTimedOut,\n  WindowsConnectionRefused,\n  WindowsNameTooLong,\n  WindowsHostIsDown,\n  WindowsNoRouteTohost,\n  LinuxConnectionReset,\n  TimeoutErrorCode,\n  BrokenPipe,\n];\n\n/**\n * @hidden\n */\nfunction needsRetry(operationType: OperationType, code: number | string): boolean {\n  if (\n    (operationType === OperationType.Read || operationType === OperationType.Query) &&\n    CONNECTION_ERROR_CODES.indexOf(code) !== -1\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * This class implements the default connection retry policy for requests.\n * @hidden\n */\nexport class DefaultRetryPolicy implements RetryPolicy {\n  private maxTries: number = 10;\n  private currentRetryAttemptCount: number = 0;\n  public retryAfterInMs: number = 1000;\n\n  constructor(private operationType: OperationType) {}\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<boolean> {\n    if (err) {\n      if (\n        this.currentRetryAttemptCount < this.maxTries &&\n        needsRetry(this.operationType, err.code)\n      ) {\n        diagnosticNode.addData({ successfulRetryPolicy: \"default\" });\n        this.currentRetryAttemptCount++;\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"AAGA,SAASA,aAAa,QAAQ,WAAW;AAEzC,SAASC,gBAAgB,QAAQ,yBAAyB;AAG1D;;;AAGA;AACA,MAAMC,8BAA8B,GAAG,KAAK;AAC5C;;;AAGA,MAAMC,yBAAyB,GAAG,KAAK;AACvC;;;AAGA,MAAMC,uBAAuB,GAAG,KAAK;AACrC;;;AAGA,MAAMC,iBAAiB,GAAG,KAAK;AAC/B;;;AAGA,MAAMC,sBAAsB,GAAG,KAAK;AACpC;;;AAGA,MAAMC,qCAAqC,GAAG,KAAK;AACnD;;;AAGA,MAAMC,6BAA6B,GAAG,KAAK;AAC3C;;;AAGA,MAAMC,0BAA0B,GAAG,KAAK;AACxC;;;AAGA,MAAMC,4BAA4B,GAAG,KAAK;AAC1C;;;AAGA,MAAMC,oCAAoC,GAAG,KAAK;AAClD;;;AAGA,MAAMC,yBAAyB,GAAG,KAAK;AACvC;;;AAGA,MAAMC,wBAAwB,GAAG,KAAK;AACtC;;;AAGA,MAAMC,kBAAkB,GAAG,KAAK;AAChC;;;AAGA,MAAMC,iBAAiB,GAAG,KAAK;AAC/B;;;AAGA,MAAMC,oBAAoB,GAAG,KAAK;AAClC;;;AAIA;AACA;;;AAGA,MAAMC,oBAAoB,GAAG,YAAY;AAEzC;AACA;;;AAGA,MAAMC,UAAU,GAAG,OAAO;AAE1B;;;AAGA,MAAMC,sBAAsB,GAAG,CAC7BjB,8BAA8B,EAC9BC,yBAAyB,EACzBC,uBAAuB,EACvBC,iBAAiB,EACjBC,sBAAsB,EACtBC,qCAAqC,EACrCC,6BAA6B,EAC7BC,0BAA0B,EAC1BC,4BAA4B,EAC5BC,oCAAoC,EACpCC,yBAAyB,EACzBC,wBAAwB,EACxBC,kBAAkB,EAClBC,iBAAiB,EACjBC,oBAAoB,EACpBC,oBAAoB,EACpBhB,gBAAgB,EAChBiB,UAAU,CACX;AAED;;;AAGA,SAASE,UAAUA,CAACC,aAA4B,EAAEC,IAAqB;EACrE,IACE,CAACD,aAAa,KAAKrB,aAAa,CAACuB,IAAI,IAAIF,aAAa,KAAKrB,aAAa,CAACwB,KAAK,KAC9EL,sBAAsB,CAACM,OAAO,CAACH,IAAI,CAAC,KAAK,CAAC,CAAC,EAC3C;IACA,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACF;AAEA;;;;AAIA,OAAM,MAAOI,kBAAkB;EAK7BC,YAAoBN,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IAJzB,KAAAO,QAAQ,GAAW,EAAE;IACrB,KAAAC,wBAAwB,GAAW,CAAC;IACrC,KAAAC,cAAc,GAAW,IAAI;EAEe;EACnD;;;;EAIO,MAAMC,WAAWA,CACtBC,GAAkB,EAClBC,cAAsC;IAEtC,IAAID,GAAG,EAAE;MACP,IACE,IAAI,CAACH,wBAAwB,GAAG,IAAI,CAACD,QAAQ,IAC7CR,UAAU,CAAC,IAAI,CAACC,aAAa,EAAEW,GAAG,CAACV,IAAI,CAAC,EACxC;QACAW,cAAc,CAACC,OAAO,CAAC;UAAEC,qBAAqB,EAAE;QAAS,CAAE,CAAC;QAC5D,IAAI,CAACN,wBAAwB,EAAE;QAC/B,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}