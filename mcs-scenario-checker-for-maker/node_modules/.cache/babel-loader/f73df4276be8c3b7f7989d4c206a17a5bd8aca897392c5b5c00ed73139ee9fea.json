{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common\";\nimport { QueryMetrics } from \"../queryMetrics/queryMetrics\";\n/** @hidden */\n// TODO: docs\nexport function getRequestChargeIfAny(headers) {\n  if (typeof headers === \"number\") {\n    return headers;\n  } else if (typeof headers === \"string\") {\n    return parseFloat(headers);\n  }\n  if (headers) {\n    const rc = headers[Constants.HttpHeaders.RequestCharge];\n    if (rc) {\n      return parseFloat(rc);\n    } else {\n      return 0;\n    }\n  } else {\n    return 0;\n  }\n}\n/**\n * @hidden\n */\nexport function getInitialHeader() {\n  const headers = {};\n  headers[Constants.HttpHeaders.RequestCharge] = 0;\n  headers[Constants.HttpHeaders.QueryMetrics] = {};\n  return headers;\n}\n/**\n * @hidden\n */\n// TODO: The name of this method isn't very accurate to what it does\nexport function mergeHeaders(headers, toBeMergedHeaders) {\n  if (headers[Constants.HttpHeaders.RequestCharge] === undefined) {\n    headers[Constants.HttpHeaders.RequestCharge] = 0;\n  }\n  if (headers[Constants.HttpHeaders.QueryMetrics] === undefined) {\n    headers[Constants.HttpHeaders.QueryMetrics] = QueryMetrics.zero;\n  }\n  if (!toBeMergedHeaders) {\n    return;\n  }\n  headers[Constants.HttpHeaders.RequestCharge] += getRequestChargeIfAny(toBeMergedHeaders);\n  if (toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed]) {\n    headers[Constants.HttpHeaders.IsRUPerMinuteUsed] = toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed];\n  }\n  if (Constants.HttpHeaders.QueryMetrics in toBeMergedHeaders) {\n    const headerQueryMetrics = headers[Constants.HttpHeaders.QueryMetrics];\n    const toBeMergedHeaderQueryMetrics = toBeMergedHeaders[Constants.HttpHeaders.QueryMetrics];\n    for (const partitionId in toBeMergedHeaderQueryMetrics) {\n      if (headerQueryMetrics[partitionId]) {\n        const combinedQueryMetrics = headerQueryMetrics[partitionId].add([toBeMergedHeaderQueryMetrics[partitionId]]);\n        headerQueryMetrics[partitionId] = combinedQueryMetrics;\n      } else {\n        headerQueryMetrics[partitionId] = toBeMergedHeaderQueryMetrics[partitionId];\n      }\n    }\n  }\n  if (Constants.HttpHeaders.IndexUtilization in toBeMergedHeaders) {\n    headers[Constants.HttpHeaders.IndexUtilization] = toBeMergedHeaders[Constants.HttpHeaders.IndexUtilization];\n  }\n  if (Constants.HttpHeaders.CorrelatedActivityId in toBeMergedHeaders) {\n    headers[Constants.HttpHeaders.CorrelatedActivityId] = toBeMergedHeaders[Constants.HttpHeaders.CorrelatedActivityId];\n  }\n}","map":{"version":3,"names":["Constants","QueryMetrics","getRequestChargeIfAny","headers","parseFloat","rc","HttpHeaders","RequestCharge","getInitialHeader","mergeHeaders","toBeMergedHeaders","undefined","zero","IsRUPerMinuteUsed","headerQueryMetrics","toBeMergedHeaderQueryMetrics","partitionId","combinedQueryMetrics","add","IndexUtilization","CorrelatedActivityId"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/headerUtils.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common\";\nimport { QueryMetrics } from \"../queryMetrics/queryMetrics\";\n\nexport interface CosmosHeaders {\n  [key: string]: any;\n}\n\n/** @hidden */\n// TODO: docs\nexport function getRequestChargeIfAny(headers: CosmosHeaders | number): number {\n  if (typeof headers === \"number\") {\n    return headers;\n  } else if (typeof headers === \"string\") {\n    return parseFloat(headers);\n  }\n\n  if (headers) {\n    const rc = headers[Constants.HttpHeaders.RequestCharge];\n    if (rc) {\n      return parseFloat(rc as string);\n    } else {\n      return 0;\n    }\n  } else {\n    return 0;\n  }\n}\n\n/**\n * @hidden\n */\nexport function getInitialHeader(): CosmosHeaders {\n  const headers: CosmosHeaders = {};\n  headers[Constants.HttpHeaders.RequestCharge] = 0;\n  headers[Constants.HttpHeaders.QueryMetrics] = {};\n  return headers;\n}\n\n/**\n * @hidden\n */\n// TODO: The name of this method isn't very accurate to what it does\nexport function mergeHeaders(headers: CosmosHeaders, toBeMergedHeaders: CosmosHeaders): void {\n  if (headers[Constants.HttpHeaders.RequestCharge] === undefined) {\n    headers[Constants.HttpHeaders.RequestCharge] = 0;\n  }\n\n  if (headers[Constants.HttpHeaders.QueryMetrics] === undefined) {\n    headers[Constants.HttpHeaders.QueryMetrics] = QueryMetrics.zero;\n  }\n\n  if (!toBeMergedHeaders) {\n    return;\n  }\n\n  headers[Constants.HttpHeaders.RequestCharge] += getRequestChargeIfAny(toBeMergedHeaders);\n  if (toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed]) {\n    headers[Constants.HttpHeaders.IsRUPerMinuteUsed] =\n      toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed];\n  }\n\n  if (Constants.HttpHeaders.QueryMetrics in toBeMergedHeaders) {\n    const headerQueryMetrics = headers[Constants.HttpHeaders.QueryMetrics];\n    const toBeMergedHeaderQueryMetrics = toBeMergedHeaders[Constants.HttpHeaders.QueryMetrics];\n\n    for (const partitionId in toBeMergedHeaderQueryMetrics) {\n      if (headerQueryMetrics[partitionId]) {\n        const combinedQueryMetrics = headerQueryMetrics[partitionId].add([\n          toBeMergedHeaderQueryMetrics[partitionId],\n        ]);\n        headerQueryMetrics[partitionId] = combinedQueryMetrics;\n      } else {\n        headerQueryMetrics[partitionId] = toBeMergedHeaderQueryMetrics[partitionId];\n      }\n    }\n  }\n\n  if (Constants.HttpHeaders.IndexUtilization in toBeMergedHeaders) {\n    headers[Constants.HttpHeaders.IndexUtilization] =\n      toBeMergedHeaders[Constants.HttpHeaders.IndexUtilization];\n  }\n\n  if (Constants.HttpHeaders.CorrelatedActivityId in toBeMergedHeaders) {\n    headers[Constants.HttpHeaders.CorrelatedActivityId] =\n      toBeMergedHeaders[Constants.HttpHeaders.CorrelatedActivityId];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}