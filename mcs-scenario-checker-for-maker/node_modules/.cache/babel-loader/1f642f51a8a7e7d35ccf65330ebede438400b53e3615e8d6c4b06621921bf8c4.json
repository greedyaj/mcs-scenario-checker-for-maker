{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants, CosmosKeyType, SasTokenPermissionKind } from \"../common\";\nimport { encodeUTF8 } from \"./encode\";\nimport { hmac } from \"./hmac\";\n/**\n * Experimental internal only\n * Generates the payload representing the permission configuration for the sas token.\n */\nexport async function createAuthorizationSasToken(masterKey, sasTokenProperties) {\n  let resourcePrefixPath = \"\";\n  if (typeof sasTokenProperties.databaseName === \"string\" && sasTokenProperties.databaseName !== \"\") {\n    resourcePrefixPath += `/${Constants.Path.DatabasesPathSegment}/${sasTokenProperties.databaseName}`;\n  }\n  if (typeof sasTokenProperties.containerName === \"string\" && sasTokenProperties.containerName !== \"\") {\n    if (sasTokenProperties.databaseName === \"\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.databaseName} \\\n                          is an invalid database name`);\n    }\n    resourcePrefixPath += `/${Constants.Path.CollectionsPathSegment}/${sasTokenProperties.containerName}`;\n  }\n  if (typeof sasTokenProperties.resourceName === \"string\" && sasTokenProperties.resourceName !== \"\") {\n    if (sasTokenProperties.containerName === \"\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.containerName} \\\n                          is an invalid container name`);\n    }\n    switch (sasTokenProperties.resourceKind) {\n      case \"ITEM\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.DocumentsPathSegment}`;\n        break;\n      case \"STORED_PROCEDURE\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.StoredProceduresPathSegment}`;\n        break;\n      case \"USER_DEFINED_FUNCTION\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.UserDefinedFunctionsPathSegment}`;\n        break;\n      case \"TRIGGER\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.TriggersPathSegment}`;\n        break;\n      default:\n        throw new Error(`illegalArgumentException : ${sasTokenProperties.resourceKind} \\\n                          is an invalid resource kind`);\n        break;\n    }\n    resourcePrefixPath += `${Constants.Path.Root}${sasTokenProperties.resourceName}${Constants.Path.Root}`;\n  }\n  sasTokenProperties.resourcePath = resourcePrefixPath.toString();\n  let partitionRanges = \"\";\n  if (sasTokenProperties.partitionKeyValueRanges !== undefined && sasTokenProperties.partitionKeyValueRanges.length > 0) {\n    if (typeof sasTokenProperties.resourceKind !== \"string\" && sasTokenProperties.resourceKind !== \"ITEM\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.resourceKind} \\\n                          is an invalid partition key value range`);\n    }\n    sasTokenProperties.partitionKeyValueRanges.forEach(range => {\n      partitionRanges += `${encodeUTF8(range)},`;\n    });\n  }\n  if (sasTokenProperties.controlPlaneReaderScope === 0) {\n    sasTokenProperties.controlPlaneReaderScope += SasTokenPermissionKind.ContainerReadAny;\n    sasTokenProperties.controlPlaneWriterScope += SasTokenPermissionKind.ContainerReadAny;\n  }\n  if (sasTokenProperties.dataPlaneReaderScope === 0 && sasTokenProperties.dataPlaneWriterScope === 0) {\n    sasTokenProperties.dataPlaneReaderScope = SasTokenPermissionKind.ContainerFullAccess;\n    sasTokenProperties.dataPlaneWriterScope = SasTokenPermissionKind.ContainerFullAccess;\n  }\n  if (typeof sasTokenProperties.keyType !== \"number\" || typeof sasTokenProperties.keyType === \"undefined\") {\n    switch (sasTokenProperties.keyType) {\n      case CosmosKeyType.PrimaryMaster:\n        sasTokenProperties.keyType = 1;\n        break;\n      case CosmosKeyType.SecondaryMaster:\n        sasTokenProperties.keyType = 2;\n        break;\n      case CosmosKeyType.PrimaryReadOnly:\n        sasTokenProperties.keyType = 3;\n        break;\n      case CosmosKeyType.SecondaryReadOnly:\n        sasTokenProperties.keyType = 4;\n        break;\n      default:\n        throw new Error(`illegalArgumentException : ${sasTokenProperties.keyType} \\\n                          is an invalid key type`);\n        break;\n    }\n  }\n  const payload = sasTokenProperties.user + \"\\n\" + sasTokenProperties.userTag + \"\\n\" + sasTokenProperties.resourcePath + \"\\n\" + partitionRanges + \"\\n\" + utcsecondsSinceEpoch(sasTokenProperties.startTime).toString(16) + \"\\n\" + utcsecondsSinceEpoch(sasTokenProperties.expiryTime).toString(16) + \"\\n\" + sasTokenProperties.keyType + \"\\n\" + sasTokenProperties.controlPlaneReaderScope.toString(16) + \"\\n\" + sasTokenProperties.controlPlaneWriterScope.toString(16) + \"\\n\" + sasTokenProperties.dataPlaneReaderScope.toString(16) + \"\\n\" + sasTokenProperties.dataPlaneWriterScope.toString(16) + \"\\n\";\n  const signedPayload = await hmac(masterKey, Buffer.from(payload).toString(\"base64\"));\n  return \"type=sas&ver=1.0&sig=\" + signedPayload + \";\" + Buffer.from(payload).toString(\"base64\");\n}\n/**\n * @hidden\n */\n// TODO: utcMilllisecondsSinceEpoch\nexport function utcsecondsSinceEpoch(date) {\n  return Math.round(date.getTime() / 1000);\n}","map":{"version":3,"names":["Constants","CosmosKeyType","SasTokenPermissionKind","encodeUTF8","hmac","createAuthorizationSasToken","masterKey","sasTokenProperties","resourcePrefixPath","databaseName","Path","DatabasesPathSegment","containerName","Error","CollectionsPathSegment","resourceName","resourceKind","Root","DocumentsPathSegment","StoredProceduresPathSegment","UserDefinedFunctionsPathSegment","TriggersPathSegment","resourcePath","toString","partitionRanges","partitionKeyValueRanges","undefined","length","forEach","range","controlPlaneReaderScope","ContainerReadAny","controlPlaneWriterScope","dataPlaneReaderScope","dataPlaneWriterScope","ContainerFullAccess","keyType","PrimaryMaster","SecondaryMaster","PrimaryReadOnly","SecondaryReadOnly","payload","user","userTag","utcsecondsSinceEpoch","startTime","expiryTime","signedPayload","Buffer","from","date","Math","round","getTime"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/utils/SasToken.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { SasTokenProperties } from \"../client/SasToken/SasTokenProperties\";\nimport { Constants, CosmosKeyType, SasTokenPermissionKind } from \"../common\";\nimport { encodeUTF8 } from \"./encode\";\nimport { hmac } from \"./hmac\";\n\n/**\n * Experimental internal only\n * Generates the payload representing the permission configuration for the sas token.\n */\n\nexport async function createAuthorizationSasToken(\n  masterKey: string,\n  sasTokenProperties: SasTokenProperties,\n): Promise<string> {\n  let resourcePrefixPath = \"\";\n  if (\n    typeof sasTokenProperties.databaseName === \"string\" &&\n    sasTokenProperties.databaseName !== \"\"\n  ) {\n    resourcePrefixPath += `/${Constants.Path.DatabasesPathSegment}/${sasTokenProperties.databaseName}`;\n  }\n\n  if (\n    typeof sasTokenProperties.containerName === \"string\" &&\n    sasTokenProperties.containerName !== \"\"\n  ) {\n    if (sasTokenProperties.databaseName === \"\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.databaseName} \\\n                          is an invalid database name`);\n    }\n    resourcePrefixPath += `/${Constants.Path.CollectionsPathSegment}/${sasTokenProperties.containerName}`;\n  }\n\n  if (\n    typeof sasTokenProperties.resourceName === \"string\" &&\n    sasTokenProperties.resourceName !== \"\"\n  ) {\n    if (sasTokenProperties.containerName === \"\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.containerName} \\\n                          is an invalid container name`);\n    }\n    switch (sasTokenProperties.resourceKind) {\n      case \"ITEM\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.DocumentsPathSegment}`;\n        break;\n      case \"STORED_PROCEDURE\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.StoredProceduresPathSegment}`;\n        break;\n      case \"USER_DEFINED_FUNCTION\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.UserDefinedFunctionsPathSegment}`;\n        break;\n      case \"TRIGGER\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.TriggersPathSegment}`;\n        break;\n      default:\n        throw new Error(`illegalArgumentException : ${sasTokenProperties.resourceKind} \\\n                          is an invalid resource kind`);\n        break;\n    }\n    resourcePrefixPath += `${Constants.Path.Root}${sasTokenProperties.resourceName}${Constants.Path.Root}`;\n  }\n  sasTokenProperties.resourcePath = resourcePrefixPath.toString();\n\n  let partitionRanges = \"\";\n\n  if (\n    sasTokenProperties.partitionKeyValueRanges !== undefined &&\n    sasTokenProperties.partitionKeyValueRanges.length > 0\n  ) {\n    if (\n      typeof sasTokenProperties.resourceKind !== \"string\" &&\n      sasTokenProperties.resourceKind !== \"ITEM\"\n    ) {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.resourceKind} \\\n                          is an invalid partition key value range`);\n    }\n    sasTokenProperties.partitionKeyValueRanges.forEach((range) => {\n      partitionRanges += `${encodeUTF8(range)},`;\n    });\n  }\n\n  if (sasTokenProperties.controlPlaneReaderScope === 0) {\n    sasTokenProperties.controlPlaneReaderScope += SasTokenPermissionKind.ContainerReadAny;\n    sasTokenProperties.controlPlaneWriterScope += SasTokenPermissionKind.ContainerReadAny;\n  }\n\n  if (\n    sasTokenProperties.dataPlaneReaderScope === 0 &&\n    sasTokenProperties.dataPlaneWriterScope === 0\n  ) {\n    sasTokenProperties.dataPlaneReaderScope = SasTokenPermissionKind.ContainerFullAccess;\n    sasTokenProperties.dataPlaneWriterScope = SasTokenPermissionKind.ContainerFullAccess;\n  }\n\n  if (\n    typeof sasTokenProperties.keyType !== \"number\" ||\n    typeof sasTokenProperties.keyType === \"undefined\"\n  ) {\n    switch (sasTokenProperties.keyType) {\n      case CosmosKeyType.PrimaryMaster:\n        sasTokenProperties.keyType = 1;\n        break;\n      case CosmosKeyType.SecondaryMaster:\n        sasTokenProperties.keyType = 2;\n        break;\n      case CosmosKeyType.PrimaryReadOnly:\n        sasTokenProperties.keyType = 3;\n        break;\n      case CosmosKeyType.SecondaryReadOnly:\n        sasTokenProperties.keyType = 4;\n        break;\n      default:\n        throw new Error(`illegalArgumentException : ${sasTokenProperties.keyType} \\\n                          is an invalid key type`);\n        break;\n    }\n  }\n\n  const payload =\n    sasTokenProperties.user +\n    \"\\n\" +\n    sasTokenProperties.userTag +\n    \"\\n\" +\n    sasTokenProperties.resourcePath +\n    \"\\n\" +\n    partitionRanges +\n    \"\\n\" +\n    utcsecondsSinceEpoch(sasTokenProperties.startTime).toString(16) +\n    \"\\n\" +\n    utcsecondsSinceEpoch(sasTokenProperties.expiryTime).toString(16) +\n    \"\\n\" +\n    sasTokenProperties.keyType +\n    \"\\n\" +\n    sasTokenProperties.controlPlaneReaderScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.controlPlaneWriterScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.dataPlaneReaderScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.dataPlaneWriterScope.toString(16) +\n    \"\\n\";\n\n  const signedPayload = await hmac(masterKey, Buffer.from(payload).toString(\"base64\"));\n  return \"type=sas&ver=1.0&sig=\" + signedPayload + \";\" + Buffer.from(payload).toString(\"base64\");\n}\n/**\n * @hidden\n */\n// TODO: utcMilllisecondsSinceEpoch\nexport function utcsecondsSinceEpoch(date: Date): number {\n  return Math.round(date.getTime() / 1000);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}