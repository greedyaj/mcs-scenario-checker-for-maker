{"ast":null,"code":"import { __asyncGenerator, __await } from \"tslib\";\nimport { ChangeFeedResponse } from \"./ChangeFeedResponse\";\nimport { Constants, ResourceType, StatusCodes } from \"./common\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"./utils/diagnostics\";\n/**\n * Provides iterator for change feed.\n *\n * Use `Items.changeFeed()` to get an instance of the iterator.\n */\nexport class ChangeFeedIterator {\n  /**\n   * @internal\n   */\n  constructor(clientContext, resourceId, resourceLink, partitionKey, changeFeedOptions) {\n    this.clientContext = clientContext;\n    this.resourceId = resourceId;\n    this.resourceLink = resourceLink;\n    this.partitionKey = partitionKey;\n    this.changeFeedOptions = changeFeedOptions;\n    // partition key XOR partition key range id\n    const partitionKeyValid = partitionKey !== undefined;\n    this.isPartitionSpecified = partitionKeyValid;\n    let canUseStartFromBeginning = true;\n    if (changeFeedOptions.continuation) {\n      this.nextIfNoneMatch = changeFeedOptions.continuation;\n      canUseStartFromBeginning = false;\n    }\n    if (changeFeedOptions.startTime) {\n      // .toUTCString() is platform specific, but most platforms use RFC 1123.\n      // In ECMAScript 2018, this was standardized to RFC 1123.\n      // See for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n      this.ifModifiedSince = changeFeedOptions.startTime.toUTCString();\n      canUseStartFromBeginning = false;\n    }\n    if (canUseStartFromBeginning && !changeFeedOptions.startFromBeginning) {\n      this.nextIfNoneMatch = ChangeFeedIterator.IfNoneMatchAllHeaderValue;\n    }\n  }\n  /**\n   * Gets a value indicating whether there are potentially additional results that can be retrieved.\n   *\n   * Initially returns true. This value is set based on whether the last execution returned a continuation token.\n   *\n   * @returns Boolean value representing if whether there are potentially additional results that can be retrieved.\n   */\n  get hasMoreResults() {\n    return this.lastStatusCode !== StatusCodes.NotModified;\n  }\n  /**\n   * Gets an async iterator which will yield pages of results from Azure Cosmos DB.\n   */\n  getAsyncIterator() {\n    return __asyncGenerator(this, arguments, function* getAsyncIterator_1() {\n      do {\n        const result = yield __await(this.fetchNext());\n        if (result.count > 0) {\n          yield yield __await(result);\n        }\n      } while (this.hasMoreResults);\n    });\n  }\n  /**\n   * Read feed and retrieves the next page of results in Azure Cosmos DB.\n   */\n  async fetchNext() {\n    return withDiagnostics(async diagnosticNode => {\n      const response = await this.getFeedResponse(diagnosticNode);\n      this.lastStatusCode = response.statusCode;\n      this.nextIfNoneMatch = response.headers[Constants.HttpHeaders.ETag];\n      return response;\n    }, this.clientContext);\n  }\n  async getFeedResponse(diagnosticNode) {\n    if (!this.isPartitionSpecified) {\n      throw new Error(\"Container is partitioned, but no partition key or partition key range id was specified.\");\n    }\n    const feedOptions = {\n      initialHeaders: {},\n      useIncrementalFeed: true\n    };\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n    if (this.nextIfNoneMatch) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: this.nextIfNoneMatch\n      };\n    }\n    if (this.ifModifiedSince) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.ifModifiedSince;\n    }\n    const response = await this.clientContext.queryFeed({\n      path: this.resourceLink,\n      resourceType: ResourceType.item,\n      resourceId: this.resourceId,\n      resultFn: result => result ? result.Documents : [],\n      query: undefined,\n      options: feedOptions,\n      partitionKey: this.partitionKey,\n      diagnosticNode: diagnosticNode\n    }); // TODO: some funky issues with query feed. Probably need to change it up.\n    return new ChangeFeedResponse(response.result, response.result ? response.result.length : 0, response.code, response.headers, getEmptyCosmosDiagnostics());\n  }\n}\nChangeFeedIterator.IfNoneMatchAllHeaderValue = \"*\";","map":{"version":3,"names":["ChangeFeedResponse","Constants","ResourceType","StatusCodes","getEmptyCosmosDiagnostics","withDiagnostics","ChangeFeedIterator","constructor","clientContext","resourceId","resourceLink","partitionKey","changeFeedOptions","partitionKeyValid","undefined","isPartitionSpecified","canUseStartFromBeginning","continuation","nextIfNoneMatch","startTime","ifModifiedSince","toUTCString","startFromBeginning","IfNoneMatchAllHeaderValue","hasMoreResults","lastStatusCode","NotModified","getAsyncIterator","result","__await","fetchNext","count","diagnosticNode","response","getFeedResponse","statusCode","headers","HttpHeaders","ETag","Error","feedOptions","initialHeaders","useIncrementalFeed","maxItemCount","sessionToken","accessCondition","type","IfNoneMatch","condition","IfModifiedSince","queryFeed","path","resourceType","item","resultFn","Documents","query","options","length","code"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/ChangeFeedIterator.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/// <reference lib=\"esnext.asynciterable\" />\nimport type { ChangeFeedOptions } from \"./ChangeFeedOptions\";\nimport { ChangeFeedResponse } from \"./ChangeFeedResponse\";\nimport type { Resource } from \"./client\";\nimport type { ClientContext } from \"./ClientContext\";\nimport { Constants, ResourceType, StatusCodes } from \"./common\";\nimport type { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal\";\nimport type { PartitionKey } from \"./documents\";\nimport type { FeedOptions } from \"./request\";\nimport type { Response } from \"./request\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"./utils/diagnostics\";\n\n/**\n * Provides iterator for change feed.\n *\n * Use `Items.changeFeed()` to get an instance of the iterator.\n */\nexport class ChangeFeedIterator<T> {\n  private static readonly IfNoneMatchAllHeaderValue = \"*\";\n  private nextIfNoneMatch: string;\n  private ifModifiedSince: string;\n  private lastStatusCode: number;\n  private isPartitionSpecified: boolean;\n\n  /**\n   * @internal\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private resourceId: string,\n    private resourceLink: string,\n    private partitionKey: PartitionKey,\n    private changeFeedOptions: ChangeFeedOptions,\n  ) {\n    // partition key XOR partition key range id\n    const partitionKeyValid = partitionKey !== undefined;\n    this.isPartitionSpecified = partitionKeyValid;\n\n    let canUseStartFromBeginning = true;\n    if (changeFeedOptions.continuation) {\n      this.nextIfNoneMatch = changeFeedOptions.continuation;\n      canUseStartFromBeginning = false;\n    }\n\n    if (changeFeedOptions.startTime) {\n      // .toUTCString() is platform specific, but most platforms use RFC 1123.\n      // In ECMAScript 2018, this was standardized to RFC 1123.\n      // See for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n      this.ifModifiedSince = changeFeedOptions.startTime.toUTCString();\n      canUseStartFromBeginning = false;\n    }\n\n    if (canUseStartFromBeginning && !changeFeedOptions.startFromBeginning) {\n      this.nextIfNoneMatch = ChangeFeedIterator.IfNoneMatchAllHeaderValue;\n    }\n  }\n\n  /**\n   * Gets a value indicating whether there are potentially additional results that can be retrieved.\n   *\n   * Initially returns true. This value is set based on whether the last execution returned a continuation token.\n   *\n   * @returns Boolean value representing if whether there are potentially additional results that can be retrieved.\n   */\n  get hasMoreResults(): boolean {\n    return this.lastStatusCode !== StatusCodes.NotModified;\n  }\n\n  /**\n   * Gets an async iterator which will yield pages of results from Azure Cosmos DB.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.fetchNext();\n      if (result.count > 0) {\n        yield result;\n      }\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Read feed and retrieves the next page of results in Azure Cosmos DB.\n   */\n  public async fetchNext(): Promise<ChangeFeedResponse<Array<T & Resource>>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const response = await this.getFeedResponse(diagnosticNode);\n      this.lastStatusCode = response.statusCode;\n      this.nextIfNoneMatch = response.headers[Constants.HttpHeaders.ETag];\n      return response;\n    }, this.clientContext);\n  }\n\n  private async getFeedResponse(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ChangeFeedResponse<Array<T & Resource>>> {\n    if (!this.isPartitionSpecified) {\n      throw new Error(\n        \"Container is partitioned, but no partition key or partition key range id was specified.\",\n      );\n    }\n    const feedOptions: FeedOptions = { initialHeaders: {}, useIncrementalFeed: true };\n\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    if (this.nextIfNoneMatch) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: this.nextIfNoneMatch,\n      };\n    }\n\n    if (this.ifModifiedSince) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.ifModifiedSince;\n    }\n\n    const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n      path: this.resourceLink,\n      resourceType: ResourceType.item,\n      resourceId: this.resourceId,\n      resultFn: (result) => (result ? result.Documents : []),\n      query: undefined,\n      options: feedOptions,\n      partitionKey: this.partitionKey,\n      diagnosticNode: diagnosticNode,\n    }) as Promise<any>); // TODO: some funky issues with query feed. Probably need to change it up.\n\n    return new ChangeFeedResponse(\n      response.result,\n      response.result ? response.result.length : 0,\n      response.code,\n      response.headers,\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}