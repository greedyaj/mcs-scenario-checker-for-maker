{"ast":null,"code":"import { getInitialHeader, mergeHeaders } from \"../headerUtils\";\n/** @hidden */\nexport class OffsetLimitEndpointComponent {\n  constructor(executionContext, offset, limit) {\n    this.executionContext = executionContext;\n    this.offset = offset;\n    this.limit = limit;\n  }\n  async nextItem(diagnosticNode) {\n    const aggregateHeaders = getInitialHeader();\n    while (this.offset > 0) {\n      // Grab next item but ignore the result. We only need the headers\n      const {\n        headers\n      } = await this.executionContext.nextItem(diagnosticNode);\n      this.offset--;\n      mergeHeaders(aggregateHeaders, headers);\n    }\n    if (this.limit > 0) {\n      const {\n        result,\n        headers\n      } = await this.executionContext.nextItem(diagnosticNode);\n      this.limit--;\n      mergeHeaders(aggregateHeaders, headers);\n      return {\n        result,\n        headers: aggregateHeaders\n      };\n    }\n    // If both limit and offset are 0, return nothing\n    return {\n      result: undefined,\n      headers: getInitialHeader()\n    };\n  }\n  hasMoreResults() {\n    return (this.offset > 0 || this.limit > 0) && this.executionContext.hasMoreResults();\n  }\n}","map":{"version":3,"names":["getInitialHeader","mergeHeaders","OffsetLimitEndpointComponent","constructor","executionContext","offset","limit","nextItem","diagnosticNode","aggregateHeaders","headers","result","undefined","hasMoreResults"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/EndpointComponent/OffsetLimitEndpointComponent.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\n\n/** @hidden */\nexport class OffsetLimitEndpointComponent implements ExecutionContext {\n  constructor(\n    private executionContext: ExecutionContext,\n    private offset: number,\n    private limit: number,\n  ) {}\n\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    const aggregateHeaders = getInitialHeader();\n    while (this.offset > 0) {\n      // Grab next item but ignore the result. We only need the headers\n      const { headers } = await this.executionContext.nextItem(diagnosticNode);\n      this.offset--;\n      mergeHeaders(aggregateHeaders, headers);\n    }\n    if (this.limit > 0) {\n      const { result, headers } = await this.executionContext.nextItem(diagnosticNode);\n      this.limit--;\n      mergeHeaders(aggregateHeaders, headers);\n      return { result, headers: aggregateHeaders };\n    }\n    // If both limit and offset are 0, return nothing\n    return {\n      result: undefined,\n      headers: getInitialHeader(),\n    };\n  }\n\n  public hasMoreResults(): boolean {\n    return (this.offset > 0 || this.limit > 0) && this.executionContext.hasMoreResults();\n  }\n}\n"],"mappings":"AAKA,SAASA,gBAAgB,EAAEC,YAAY,QAAQ,gBAAgB;AAE/D;AACA,OAAM,MAAOC,4BAA4B;EACvCC,YACUC,gBAAkC,EAClCC,MAAc,EACdC,KAAa;IAFb,KAAAF,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;EACZ;EAEI,MAAMC,QAAQA,CAACC,cAAsC;IAC1D,MAAMC,gBAAgB,GAAGT,gBAAgB,EAAE;IAC3C,OAAO,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;MACtB;MACA,MAAM;QAAEK;MAAO,CAAE,GAAG,MAAM,IAAI,CAACN,gBAAgB,CAACG,QAAQ,CAACC,cAAc,CAAC;MACxE,IAAI,CAACH,MAAM,EAAE;MACbJ,YAAY,CAACQ,gBAAgB,EAAEC,OAAO,CAAC;IACzC;IACA,IAAI,IAAI,CAACJ,KAAK,GAAG,CAAC,EAAE;MAClB,MAAM;QAAEK,MAAM;QAAED;MAAO,CAAE,GAAG,MAAM,IAAI,CAACN,gBAAgB,CAACG,QAAQ,CAACC,cAAc,CAAC;MAChF,IAAI,CAACF,KAAK,EAAE;MACZL,YAAY,CAACQ,gBAAgB,EAAEC,OAAO,CAAC;MACvC,OAAO;QAAEC,MAAM;QAAED,OAAO,EAAED;MAAgB,CAAE;IAC9C;IACA;IACA,OAAO;MACLE,MAAM,EAAEC,SAAS;MACjBF,OAAO,EAAEV,gBAAgB;KAC1B;EACH;EAEOa,cAAcA,CAAA;IACnB,OAAO,CAAC,IAAI,CAACR,MAAM,GAAG,CAAC,IAAI,IAAI,CAACC,KAAK,GAAG,CAAC,KAAK,IAAI,CAACF,gBAAgB,CAACS,cAAc,EAAE;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}