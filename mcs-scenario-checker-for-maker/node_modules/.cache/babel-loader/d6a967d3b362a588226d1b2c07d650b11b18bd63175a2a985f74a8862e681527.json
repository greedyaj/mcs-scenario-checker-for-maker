{"ast":null,"code":"import { isReadRequest } from \"../common/helper\";\n/**\n * This class implements the retry policy for endpoint discovery.\n * @hidden\n */\nexport class EndpointDiscoveryRetryPolicy {\n  /**\n   * @param globalEndpointManager - The GlobalEndpointManager instance.\n   */\n  constructor(globalEndpointManager, operationType) {\n    this.globalEndpointManager = globalEndpointManager;\n    this.operationType = operationType;\n    this.maxTries = EndpointDiscoveryRetryPolicy.maxTries;\n    this.currentRetryAttemptCount = 0;\n    this.retryAfterInMs = EndpointDiscoveryRetryPolicy.retryAfterInMs;\n  }\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   */\n  async shouldRetry(err, diagnosticNode, retryContext, locationEndpoint) {\n    if (!err) {\n      return false;\n    }\n    if (!retryContext || !locationEndpoint) {\n      return false;\n    }\n    if (!this.globalEndpointManager.enableEndpointDiscovery) {\n      return false;\n    }\n    if (this.currentRetryAttemptCount >= this.maxTries) {\n      return false;\n    }\n    this.currentRetryAttemptCount++;\n    if (isReadRequest(this.operationType)) {\n      await this.globalEndpointManager.markCurrentLocationUnavailableForRead(diagnosticNode, locationEndpoint);\n    } else {\n      await this.globalEndpointManager.markCurrentLocationUnavailableForWrite(diagnosticNode, locationEndpoint);\n    }\n    retryContext.retryCount = this.currentRetryAttemptCount;\n    retryContext.clearSessionTokenNotAvailable = false;\n    retryContext.retryRequestOnPreferredLocations = false;\n    diagnosticNode.addData({\n      successfulRetryPolicy: \"endpointDiscovery\"\n    });\n    return true;\n  }\n}\nEndpointDiscoveryRetryPolicy.maxTries = 120; // TODO: Constant?\nEndpointDiscoveryRetryPolicy.retryAfterInMs = 1000;","map":{"version":3,"names":["isReadRequest","EndpointDiscoveryRetryPolicy","constructor","globalEndpointManager","operationType","maxTries","currentRetryAttemptCount","retryAfterInMs","shouldRetry","err","diagnosticNode","retryContext","locationEndpoint","enableEndpointDiscovery","markCurrentLocationUnavailableForRead","markCurrentLocationUnavailableForWrite","retryCount","clearSessionTokenNotAvailable","retryRequestOnPreferredLocations","addData","successfulRetryPolicy"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/retry/endpointDiscoveryRetryPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type { OperationType } from \"../common\";\nimport { isReadRequest } from \"../common/helper\";\nimport type { GlobalEndpointManager } from \"../globalEndpointManager\";\nimport type { ErrorResponse } from \"../request\";\nimport type { RetryContext } from \"./RetryContext\";\nimport type { RetryPolicy } from \"./RetryPolicy\";\n\n/**\n * This class implements the retry policy for endpoint discovery.\n * @hidden\n */\nexport class EndpointDiscoveryRetryPolicy implements RetryPolicy {\n  /** Current retry attempt count. */\n  public currentRetryAttemptCount: number;\n  /** Retry interval in milliseconds. */\n  public retryAfterInMs: number;\n\n  /** Max number of retry attempts to perform. */\n  private maxTries: number;\n  private static readonly maxTries = 120; // TODO: Constant?\n  private static readonly retryAfterInMs = 1000;\n\n  /**\n   * @param globalEndpointManager - The GlobalEndpointManager instance.\n   */\n  constructor(\n    private globalEndpointManager: GlobalEndpointManager,\n    private operationType: OperationType,\n  ) {\n    this.maxTries = EndpointDiscoveryRetryPolicy.maxTries;\n    this.currentRetryAttemptCount = 0;\n    this.retryAfterInMs = EndpointDiscoveryRetryPolicy.retryAfterInMs;\n  }\n\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n    retryContext?: RetryContext,\n    locationEndpoint?: string,\n  ): Promise<boolean | [boolean, string]> {\n    if (!err) {\n      return false;\n    }\n\n    if (!retryContext || !locationEndpoint) {\n      return false;\n    }\n\n    if (!this.globalEndpointManager.enableEndpointDiscovery) {\n      return false;\n    }\n\n    if (this.currentRetryAttemptCount >= this.maxTries) {\n      return false;\n    }\n\n    this.currentRetryAttemptCount++;\n\n    if (isReadRequest(this.operationType)) {\n      await this.globalEndpointManager.markCurrentLocationUnavailableForRead(\n        diagnosticNode,\n        locationEndpoint,\n      );\n    } else {\n      await this.globalEndpointManager.markCurrentLocationUnavailableForWrite(\n        diagnosticNode,\n        locationEndpoint,\n      );\n    }\n\n    retryContext.retryCount = this.currentRetryAttemptCount;\n    retryContext.clearSessionTokenNotAvailable = false;\n    retryContext.retryRequestOnPreferredLocations = false;\n    diagnosticNode.addData({ successfulRetryPolicy: \"endpointDiscovery\" });\n    return true;\n  }\n}\n"],"mappings":"AAIA,SAASA,aAAa,QAAQ,kBAAkB;AAMhD;;;;AAIA,OAAM,MAAOC,4BAA4B;EAWvC;;;EAGAC,YACUC,qBAA4C,EAC5CC,aAA4B;IAD5B,KAAAD,qBAAqB,GAArBA,qBAAqB;IACrB,KAAAC,aAAa,GAAbA,aAAa;IAErB,IAAI,CAACC,QAAQ,GAAGJ,4BAA4B,CAACI,QAAQ;IACrD,IAAI,CAACC,wBAAwB,GAAG,CAAC;IACjC,IAAI,CAACC,cAAc,GAAGN,4BAA4B,CAACM,cAAc;EACnE;EAEA;;;;EAIO,MAAMC,WAAWA,CACtBC,GAAkB,EAClBC,cAAsC,EACtCC,YAA2B,EAC3BC,gBAAyB;IAEzB,IAAI,CAACH,GAAG,EAAE;MACR,OAAO,KAAK;IACd;IAEA,IAAI,CAACE,YAAY,IAAI,CAACC,gBAAgB,EAAE;MACtC,OAAO,KAAK;IACd;IAEA,IAAI,CAAC,IAAI,CAACT,qBAAqB,CAACU,uBAAuB,EAAE;MACvD,OAAO,KAAK;IACd;IAEA,IAAI,IAAI,CAACP,wBAAwB,IAAI,IAAI,CAACD,QAAQ,EAAE;MAClD,OAAO,KAAK;IACd;IAEA,IAAI,CAACC,wBAAwB,EAAE;IAE/B,IAAIN,aAAa,CAAC,IAAI,CAACI,aAAa,CAAC,EAAE;MACrC,MAAM,IAAI,CAACD,qBAAqB,CAACW,qCAAqC,CACpEJ,cAAc,EACdE,gBAAgB,CACjB;IACH,CAAC,MAAM;MACL,MAAM,IAAI,CAACT,qBAAqB,CAACY,sCAAsC,CACrEL,cAAc,EACdE,gBAAgB,CACjB;IACH;IAEAD,YAAY,CAACK,UAAU,GAAG,IAAI,CAACV,wBAAwB;IACvDK,YAAY,CAACM,6BAA6B,GAAG,KAAK;IAClDN,YAAY,CAACO,gCAAgC,GAAG,KAAK;IACrDR,cAAc,CAACS,OAAO,CAAC;MAAEC,qBAAqB,EAAE;IAAmB,CAAE,CAAC;IACtE,OAAO,IAAI;EACb;;AA5DwBnB,4BAAA,CAAAI,QAAQ,GAAG,GAAG,CAAC,CAAC;AAChBJ,4BAAA,CAAAM,cAAc,GAAG,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}