{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @hidden\n * None PartitionKey Literal\n */\nexport const NonePartitionKeyLiteral = {};\n/**\n * @hidden\n * Null PartitionKey Literal\n */\nexport const NullPartitionKeyLiteral = null;\n/**\n * @hidden\n * Maps PartitionKey to InternalPartitionKey.\n * @param partitionKey - PartitonKey to be converted.\n * @returns PartitionKeyInternal\n */\nexport function convertToInternalPartitionKey(partitionKey) {\n  if (Array.isArray(partitionKey)) {\n    return partitionKey.map(key => key === undefined ? NonePartitionKeyLiteral : key);\n  } else return [partitionKey];\n}","map":{"version":3,"names":["NonePartitionKeyLiteral","NullPartitionKeyLiteral","convertToInternalPartitionKey","partitionKey","Array","isArray","map","key","undefined"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/documents/PartitionKeyInternal.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  NonePartitionKeyType,\n  NullPartitionKeyType,\n  PartitionKey,\n  PrimitivePartitionKeyValue,\n} from \"./PartitionKey\";\n\n/**\n * @hidden\n * Internal Representation Of Partition Key. TODO: Make sure {@link ClientContext} working with only {@link PartitionKeyInternal}\n */\nexport type PartitionKeyInternal = PrimitivePartitionKeyValue[];\n/**\n * @hidden\n * None PartitionKey Literal\n */\nexport const NonePartitionKeyLiteral: NonePartitionKeyType = {};\n/**\n * @hidden\n * Null PartitionKey Literal\n */\nexport const NullPartitionKeyLiteral: NullPartitionKeyType = null;\n/**\n * @hidden\n * Maps PartitionKey to InternalPartitionKey.\n * @param partitionKey - PartitonKey to be converted.\n * @returns PartitionKeyInternal\n */\nexport function convertToInternalPartitionKey(partitionKey: PartitionKey): PartitionKeyInternal {\n  if (Array.isArray(partitionKey)) {\n    return partitionKey.map((key) => (key === undefined ? NonePartitionKeyLiteral : key));\n  } else return [partitionKey];\n}\n"],"mappings":"AAAA;AACA;AAcA;;;;AAIA,OAAO,MAAMA,uBAAuB,GAAyB,EAAE;AAC/D;;;;AAIA,OAAO,MAAMC,uBAAuB,GAAyB,IAAI;AACjE;;;;;;AAMA,OAAM,SAAUC,6BAA6BA,CAACC,YAA0B;EACtE,IAAIC,KAAK,CAACC,OAAO,CAACF,YAAY,CAAC,EAAE;IAC/B,OAAOA,YAAY,CAACG,GAAG,CAAEC,GAAG,IAAMA,GAAG,KAAKC,SAAS,GAAGR,uBAAuB,GAAGO,GAAI,CAAC;EACvF,CAAC,MAAM,OAAO,CAACJ,YAAY,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}