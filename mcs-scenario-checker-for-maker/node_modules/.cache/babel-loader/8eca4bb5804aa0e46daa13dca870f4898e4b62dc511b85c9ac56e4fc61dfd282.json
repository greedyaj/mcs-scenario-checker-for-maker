{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"./constants\";\nimport { trimSlashFromLeftAndRight, validateResourceId, validateItemResourceId } from \"./helper\";\n/**\n * Would be used when creating or deleting a DocumentCollection\n * or a User in Azure Cosmos DB database service\n * @hidden\n * Given a database id, this creates a database link.\n * @param databaseId - The database id\n * @returns A database link in the format of `dbs/{0}`\n * with `{0}` being a Uri escaped version of the databaseId\n */\nexport function createDatabaseUri(databaseId) {\n  databaseId = trimSlashFromLeftAndRight(databaseId);\n  validateResourceId(databaseId);\n  return Constants.Path.DatabasesPathSegment + \"/\" + databaseId;\n}\n/**\n * Given a database and collection id, this creates a collection link.\n * Would be used when updating or deleting a DocumentCollection, creating a\n * Document, a StoredProcedure, a Trigger, a UserDefinedFunction, or when executing a query\n * with CreateDocumentQuery in Azure Cosmos DB database service.\n * @param databaseId - The database id\n * @param collectionId - The collection id\n * @returns A collection link in the format of `dbs/{0}/colls/{1}`\n * with `{0}` being a Uri escaped version of the databaseId and `{1}` being collectionId\n * @hidden\n */\nexport function createDocumentCollectionUri(databaseId, collectionId) {\n  collectionId = trimSlashFromLeftAndRight(collectionId);\n  validateResourceId(collectionId);\n  return createDatabaseUri(databaseId) + \"/\" + Constants.Path.CollectionsPathSegment + \"/\" + collectionId;\n}\n/**\n * Given a database and user id, this creates a user link.\n * Would be used when creating a Permission, or when replacing or deleting\n * a User in Azure Cosmos DB database service\n * @param databaseId - The database id\n * @param userId - The user id\n * @returns A user link in the format of `dbs/{0}/users/{1}`\n * with `{0}` being a Uri escaped version of the databaseId and `{1}` being userId\n * @hidden\n */\nexport function createUserUri(databaseId, userId) {\n  userId = trimSlashFromLeftAndRight(userId);\n  validateResourceId(userId);\n  return createDatabaseUri(databaseId) + \"/\" + Constants.Path.UsersPathSegment + \"/\" + userId;\n}\n/**\n * Given a database and collection id, this creates a collection link.\n * Would be used when creating an Attachment, or when replacing\n * or deleting a Document in Azure Cosmos DB database service\n * @param databaseId - The database id\n * @param collectionId - The collection id\n * @param documentId - The document id\n * @returns A document link in the format of\n * `dbs/{0}/colls/{1}/docs/{2}` with `{0}` being a Uri escaped version of\n * the databaseId, `{1}` being collectionId and `{2}` being the documentId\n * @hidden\n */\nexport function createDocumentUri(databaseId, collectionId, documentId) {\n  documentId = trimSlashFromLeftAndRight(documentId);\n  validateItemResourceId(documentId);\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.DocumentsPathSegment + \"/\" + documentId;\n}\n/**\n * Given a database, collection and document id, this creates a document link.\n * Would be used when replacing or deleting a Permission in Azure Cosmos DB database service.\n * @param databaseId    -The database Id\n * @param userId        -The user Id\n * @param permissionId  - The permissionId\n * @returns A permission link in the format of `dbs/{0}/users/{1}/permissions/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being userId and `{2}` being permissionId\n * @hidden\n */\nexport function createPermissionUri(databaseId, userId, permissionId) {\n  permissionId = trimSlashFromLeftAndRight(permissionId);\n  validateResourceId(permissionId);\n  return createUserUri(databaseId, userId) + \"/\" + Constants.Path.PermissionsPathSegment + \"/\" + permissionId;\n}\n/**\n * Given a database, collection and stored proc id, this creates a stored proc link.\n * Would be used when replacing, executing, or deleting a StoredProcedure in\n * Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param storedProcedureId -The stored procedure Id\n * @returns A stored procedure link in the format of\n * `dbs/{0}/colls/{1}/sprocs/{2}` with `{0}` being a Uri escaped version of the databaseId,\n * `{1}` being collectionId and `{2}` being the storedProcedureId\n * @hidden\n */\nexport function createStoredProcedureUri(databaseId, collectionId, storedProcedureId) {\n  storedProcedureId = trimSlashFromLeftAndRight(storedProcedureId);\n  validateResourceId(storedProcedureId);\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.StoredProceduresPathSegment + \"/\" + storedProcedureId;\n}\n/**\n * Given a database, collection and trigger id, this creates a trigger link.\n * Would be used when replacing, executing, or deleting a Trigger in Azure Cosmos DB database service\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param triggerId         -The trigger Id\n * @returns A trigger link in the format of\n * `dbs/{0}/colls/{1}/triggers/{2}` with `{0}` being a Uri escaped version of the databaseId,\n * `{1}` being collectionId and `{2}` being the triggerId\n * @hidden\n */\nexport function createTriggerUri(databaseId, collectionId, triggerId) {\n  triggerId = trimSlashFromLeftAndRight(triggerId);\n  validateResourceId(triggerId);\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.TriggersPathSegment + \"/\" + triggerId;\n}\n/**\n * Given a database, collection and udf id, this creates a udf link.\n * Would be used when replacing, executing, or deleting a UserDefinedFunction in\n * Azure Cosmos DB database service\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param udfId             -The User Defined Function Id\n * @returns A udf link in the format of `dbs/{0}/colls/{1}/udfs/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the udfId\n * @hidden\n */\nexport function createUserDefinedFunctionUri(databaseId, collectionId, udfId) {\n  udfId = trimSlashFromLeftAndRight(udfId);\n  validateResourceId(udfId);\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.UserDefinedFunctionsPathSegment + \"/\" + udfId;\n}\n/**\n * Given a database, collection and conflict id, this creates a conflict link.\n * Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param conflictId        -The conflict Id\n * @returns A conflict link in the format of `dbs/{0}/colls/{1}/conflicts/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the conflictId\n * @hidden\n */\nexport function createConflictUri(databaseId, collectionId, conflictId) {\n  conflictId = trimSlashFromLeftAndRight(conflictId);\n  validateResourceId(conflictId);\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.ConflictsPathSegment + \"/\" + conflictId;\n}\n/**\n * Given a database, collection and conflict id, this creates a conflict link.\n * Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param documentId        -The document Id\n * @param attachmentId      -The attachment Id\n * @returns A conflict link in the format of `dbs/{0}/colls/{1}/conflicts/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the conflictId\n * @hidden\n */\nexport function createAttachmentUri(databaseId, collectionId, documentId, attachmentId) {\n  attachmentId = trimSlashFromLeftAndRight(attachmentId);\n  validateResourceId(attachmentId);\n  return createDocumentUri(databaseId, collectionId, documentId) + \"/\" + Constants.Path.AttachmentsPathSegment + \"/\" + attachmentId;\n}\n/**\n * Given a database and collection, this creates a partition key ranges link in\n *  the Azure Cosmos DB database service.\n * @param databaseId - The database Id\n * @param collectionId - The collection Id\n * @returns A partition key ranges link in the format of\n * `dbs/{0}/colls/{1}/pkranges` with `{0}` being a Uri escaped version of the databaseId and `{1}` being collectionId\n * @hidden\n */\nexport function createPartitionKeyRangesUri(databaseId, collectionId) {\n  return createDocumentCollectionUri(databaseId, collectionId) + \"/\" + Constants.Path.PartitionKeyRangesPathSegment;\n}","map":{"version":3,"names":["Constants","trimSlashFromLeftAndRight","validateResourceId","validateItemResourceId","createDatabaseUri","databaseId","Path","DatabasesPathSegment","createDocumentCollectionUri","collectionId","CollectionsPathSegment","createUserUri","userId","UsersPathSegment","createDocumentUri","documentId","DocumentsPathSegment","createPermissionUri","permissionId","PermissionsPathSegment","createStoredProcedureUri","storedProcedureId","StoredProceduresPathSegment","createTriggerUri","triggerId","TriggersPathSegment","createUserDefinedFunctionUri","udfId","UserDefinedFunctionsPathSegment","createConflictUri","conflictId","ConflictsPathSegment","createAttachmentUri","attachmentId","AttachmentsPathSegment","createPartitionKeyRangesUri","PartitionKeyRangesPathSegment"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/common/uriFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"./constants\";\nimport { trimSlashFromLeftAndRight, validateResourceId, validateItemResourceId } from \"./helper\";\n\n/**\n * Would be used when creating or deleting a DocumentCollection\n * or a User in Azure Cosmos DB database service\n * @hidden\n * Given a database id, this creates a database link.\n * @param databaseId - The database id\n * @returns A database link in the format of `dbs/{0}`\n * with `{0}` being a Uri escaped version of the databaseId\n */\nexport function createDatabaseUri(databaseId: string): string {\n  databaseId = trimSlashFromLeftAndRight(databaseId);\n  validateResourceId(databaseId);\n\n  return Constants.Path.DatabasesPathSegment + \"/\" + databaseId;\n}\n\n/**\n * Given a database and collection id, this creates a collection link.\n * Would be used when updating or deleting a DocumentCollection, creating a\n * Document, a StoredProcedure, a Trigger, a UserDefinedFunction, or when executing a query\n * with CreateDocumentQuery in Azure Cosmos DB database service.\n * @param databaseId - The database id\n * @param collectionId - The collection id\n * @returns A collection link in the format of `dbs/{0}/colls/{1}`\n * with `{0}` being a Uri escaped version of the databaseId and `{1}` being collectionId\n * @hidden\n */\nexport function createDocumentCollectionUri(databaseId: string, collectionId: string): string {\n  collectionId = trimSlashFromLeftAndRight(collectionId);\n  validateResourceId(collectionId);\n\n  return (\n    createDatabaseUri(databaseId) + \"/\" + Constants.Path.CollectionsPathSegment + \"/\" + collectionId\n  );\n}\n\n/**\n * Given a database and user id, this creates a user link.\n * Would be used when creating a Permission, or when replacing or deleting\n * a User in Azure Cosmos DB database service\n * @param databaseId - The database id\n * @param userId - The user id\n * @returns A user link in the format of `dbs/{0}/users/{1}`\n * with `{0}` being a Uri escaped version of the databaseId and `{1}` being userId\n * @hidden\n */\nexport function createUserUri(databaseId: string, userId: string): string {\n  userId = trimSlashFromLeftAndRight(userId);\n  validateResourceId(userId);\n\n  return createDatabaseUri(databaseId) + \"/\" + Constants.Path.UsersPathSegment + \"/\" + userId;\n}\n\n/**\n * Given a database and collection id, this creates a collection link.\n * Would be used when creating an Attachment, or when replacing\n * or deleting a Document in Azure Cosmos DB database service\n * @param databaseId - The database id\n * @param collectionId - The collection id\n * @param documentId - The document id\n * @returns A document link in the format of\n * `dbs/{0}/colls/{1}/docs/{2}` with `{0}` being a Uri escaped version of\n * the databaseId, `{1}` being collectionId and `{2}` being the documentId\n * @hidden\n */\nexport function createDocumentUri(\n  databaseId: string,\n  collectionId: string,\n  documentId: string,\n): string {\n  documentId = trimSlashFromLeftAndRight(documentId);\n  validateItemResourceId(documentId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.DocumentsPathSegment +\n    \"/\" +\n    documentId\n  );\n}\n\n/**\n * Given a database, collection and document id, this creates a document link.\n * Would be used when replacing or deleting a Permission in Azure Cosmos DB database service.\n * @param databaseId    -The database Id\n * @param userId        -The user Id\n * @param permissionId  - The permissionId\n * @returns A permission link in the format of `dbs/{0}/users/{1}/permissions/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being userId and `{2}` being permissionId\n * @hidden\n */\nexport function createPermissionUri(\n  databaseId: string,\n  userId: string,\n  permissionId: string,\n): string {\n  permissionId = trimSlashFromLeftAndRight(permissionId);\n  validateResourceId(permissionId);\n\n  return (\n    createUserUri(databaseId, userId) +\n    \"/\" +\n    Constants.Path.PermissionsPathSegment +\n    \"/\" +\n    permissionId\n  );\n}\n\n/**\n * Given a database, collection and stored proc id, this creates a stored proc link.\n * Would be used when replacing, executing, or deleting a StoredProcedure in\n * Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param storedProcedureId -The stored procedure Id\n * @returns A stored procedure link in the format of\n * `dbs/{0}/colls/{1}/sprocs/{2}` with `{0}` being a Uri escaped version of the databaseId,\n * `{1}` being collectionId and `{2}` being the storedProcedureId\n * @hidden\n */\nexport function createStoredProcedureUri(\n  databaseId: string,\n  collectionId: string,\n  storedProcedureId: string,\n): string {\n  storedProcedureId = trimSlashFromLeftAndRight(storedProcedureId);\n  validateResourceId(storedProcedureId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.StoredProceduresPathSegment +\n    \"/\" +\n    storedProcedureId\n  );\n}\n\n/**\n * Given a database, collection and trigger id, this creates a trigger link.\n * Would be used when replacing, executing, or deleting a Trigger in Azure Cosmos DB database service\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param triggerId         -The trigger Id\n * @returns A trigger link in the format of\n * `dbs/{0}/colls/{1}/triggers/{2}` with `{0}` being a Uri escaped version of the databaseId,\n * `{1}` being collectionId and `{2}` being the triggerId\n * @hidden\n */\nexport function createTriggerUri(\n  databaseId: string,\n  collectionId: string,\n  triggerId: string,\n): string {\n  triggerId = trimSlashFromLeftAndRight(triggerId);\n  validateResourceId(triggerId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.TriggersPathSegment +\n    \"/\" +\n    triggerId\n  );\n}\n\n/**\n * Given a database, collection and udf id, this creates a udf link.\n * Would be used when replacing, executing, or deleting a UserDefinedFunction in\n * Azure Cosmos DB database service\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param udfId             -The User Defined Function Id\n * @returns A udf link in the format of `dbs/{0}/colls/{1}/udfs/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the udfId\n * @hidden\n */\nexport function createUserDefinedFunctionUri(\n  databaseId: string,\n  collectionId: string,\n  udfId: string,\n): string {\n  udfId = trimSlashFromLeftAndRight(udfId);\n  validateResourceId(udfId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.UserDefinedFunctionsPathSegment +\n    \"/\" +\n    udfId\n  );\n}\n\n/**\n * Given a database, collection and conflict id, this creates a conflict link.\n * Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param conflictId        -The conflict Id\n * @returns A conflict link in the format of `dbs/{0}/colls/{1}/conflicts/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the conflictId\n * @hidden\n */\nexport function createConflictUri(\n  databaseId: string,\n  collectionId: string,\n  conflictId: string,\n): string {\n  conflictId = trimSlashFromLeftAndRight(conflictId);\n  validateResourceId(conflictId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.ConflictsPathSegment +\n    \"/\" +\n    conflictId\n  );\n}\n\n/**\n * Given a database, collection and conflict id, this creates a conflict link.\n * Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param documentId        -The document Id\n * @param attachmentId      -The attachment Id\n * @returns A conflict link in the format of `dbs/{0}/colls/{1}/conflicts/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the conflictId\n * @hidden\n */\nexport function createAttachmentUri(\n  databaseId: string,\n  collectionId: string,\n  documentId: string,\n  attachmentId: string,\n): string {\n  attachmentId = trimSlashFromLeftAndRight(attachmentId);\n  validateResourceId(attachmentId);\n\n  return (\n    createDocumentUri(databaseId, collectionId, documentId) +\n    \"/\" +\n    Constants.Path.AttachmentsPathSegment +\n    \"/\" +\n    attachmentId\n  );\n}\n\n/**\n * Given a database and collection, this creates a partition key ranges link in\n *  the Azure Cosmos DB database service.\n * @param databaseId - The database Id\n * @param collectionId - The collection Id\n * @returns A partition key ranges link in the format of\n * `dbs/{0}/colls/{1}/pkranges` with `{0}` being a Uri escaped version of the databaseId and `{1}` being collectionId\n * @hidden\n */\nexport function createPartitionKeyRangesUri(databaseId: string, collectionId: string): string {\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.PartitionKeyRangesPathSegment\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}