{"ast":null,"code":"var _jsxFileName = \"/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/src/pages/AddTest.tsx\",\n  _s = $RefreshSig$();\n// filepath: /Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/src/pages/AddTest.tsx\nimport React, { useState } from 'react';\nimport { CosmosClient } from '@azure/cosmos';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddTest = () => {\n  _s();\n  const [jsonInput, setJsonInput] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const handleJsonChange = event => {\n    setJsonInput(event.target.value);\n  };\n  const validateJson = jsonString => {\n    try {\n      JSON.parse(jsonString);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  const handleSubmit = async () => {\n    if (validateJson(jsonInput)) {\n      try {\n        const client = new CosmosClient({\n          endpoint: process.env.REACT_APP_COSMOS_DB_ENDPOINT,\n          key: process.env.REACT_APP_COSMOS_DB_KEY\n        });\n        const database = client.database(process.env.REACT_APP_COSMOS_DB_DATABASE_NAME);\n        const container = database.container(process.env.REACT_APP_COSMOS_DB_CONTAINER_NAME);\n        const {\n          resource: createdItem\n        } = await container.items.create(JSON.parse(jsonInput));\n        console.log('Created item:', createdItem);\n        setError('');\n        setSuccess('JSON submitted successfully');\n      } catch (error) {\n        console.error('Error submitting JSON:', error);\n        setError('Error submitting JSON');\n      }\n    } else {\n      setError('Invalid JSON format');\n    }\n  };\n  const handleBatchImport = async () => {\n    // Logic for batch import of multiple test cases\n    console.log('Batch import initiated');\n    // Add your batch import logic here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: 10,\n      cols: 50,\n      value: jsonInput,\n      onChange: handleJsonChange,\n      placeholder: \"Enter JSON payload here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 23\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'green'\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBatchImport,\n      children: \"Batch Import\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(AddTest, \"MKGGA0/3LWiTzTtY6X8YSMRMIJE=\");\n_c = AddTest;\nexport default AddTest;\nvar _c;\n$RefreshReg$(_c, \"AddTest\");","map":{"version":3,"names":["React","useState","CosmosClient","jsxDEV","_jsxDEV","AddTest","_s","jsonInput","setJsonInput","error","setError","success","setSuccess","handleJsonChange","event","target","value","validateJson","jsonString","JSON","parse","e","handleSubmit","client","endpoint","process","env","REACT_APP_COSMOS_DB_ENDPOINT","key","REACT_APP_COSMOS_DB_KEY","database","REACT_APP_COSMOS_DB_DATABASE_NAME","container","REACT_APP_COSMOS_DB_CONTAINER_NAME","resource","createdItem","items","create","console","log","handleBatchImport","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","cols","onChange","placeholder","style","color","onClick","_c","$RefreshReg$"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/src/pages/AddTest.tsx"],"sourcesContent":["// filepath: /Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/src/pages/AddTest.tsx\nimport React, { useState } from 'react';\nimport { CosmosClient } from '@azure/cosmos';\n\nconst AddTest: React.FC = () => {\n    const [jsonInput, setJsonInput] = useState<string>('');\n    const [error, setError] = useState<string>('');\n    const [success, setSuccess] = useState<string>('');\n\n    const handleJsonChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setJsonInput(event.target.value);\n    };\n\n    const validateJson = (jsonString: string) => {\n        try {\n            JSON.parse(jsonString);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    const handleSubmit = async () => {\n        if (validateJson(jsonInput)) {\n            try {\n                const client = new CosmosClient({\n                    endpoint: process.env.REACT_APP_COSMOS_DB_ENDPOINT!,\n                    key: process.env.REACT_APP_COSMOS_DB_KEY!\n                });\n\n                const database = client.database(process.env.REACT_APP_COSMOS_DB_DATABASE_NAME!);\n                const container = database.container(process.env.REACT_APP_COSMOS_DB_CONTAINER_NAME!);\n\n                const { resource: createdItem } = await container.items.create(JSON.parse(jsonInput));\n                console.log('Created item:', createdItem);\n\n                setError('');\n                setSuccess('JSON submitted successfully');\n            } catch (error) {\n                console.error('Error submitting JSON:', error);\n                setError('Error submitting JSON');\n            }\n        } else {\n            setError('Invalid JSON format');\n        }\n    };\n\n    const handleBatchImport = async () => {\n        // Logic for batch import of multiple test cases\n        console.log('Batch import initiated');\n        // Add your batch import logic here\n    };\n\n    return (\n        <div>\n            <h2>Add Test</h2>\n            <textarea\n                rows={10}\n                cols={50}\n                value={jsonInput}\n                onChange={handleJsonChange}\n                placeholder=\"Enter JSON payload here\"\n            />\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            {success && <p style={{ color: 'green' }}>{success}</p>}\n            <br />\n            <button onClick={handleSubmit}>Submit</button>\n            <button onClick={handleBatchImport}>Batch Import</button>\n        </div>\n    );\n};\n\nexport default AddTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}