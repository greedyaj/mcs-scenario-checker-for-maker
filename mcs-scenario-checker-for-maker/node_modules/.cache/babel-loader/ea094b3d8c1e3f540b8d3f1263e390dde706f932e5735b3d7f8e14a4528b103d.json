{"ast":null,"code":"import { getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\n/**\n * Use to query or read all conflicts.\n *\n * @see {@link Conflict} to read or delete a given {@link Conflict} by id.\n */\nexport class Conflicts {\n  constructor(container, clientContext) {\n    this.container = container;\n    this.clientContext = clientContext;\n  }\n  query(query, options) {\n    const path = getPathFromLink(this.container.url, ResourceType.conflicts);\n    const id = getIdFromLink(this.container.url);\n    return new QueryIterator(this.clientContext, query, options, (diagNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.conflicts,\n        resourceId: id,\n        resultFn: result => result.Conflicts,\n        query,\n        options: innerOptions,\n        diagnosticNode: diagNode\n      });\n    });\n  }\n  /**\n   * Reads all conflicts\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   */\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n}","map":{"version":3,"names":["getIdFromLink","getPathFromLink","ResourceType","QueryIterator","Conflicts","constructor","container","clientContext","query","options","path","url","conflicts","id","diagNode","innerOptions","queryFeed","resourceType","resourceId","resultFn","result","diagnosticNode","readAll","undefined"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/Conflict/Conflicts.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { Resource } from \"../Resource\";\nimport type { ConflictDefinition } from \"./ConflictDefinition\";\n\n/**\n * Use to query or read all conflicts.\n *\n * @see {@link Conflict} to read or delete a given {@link Conflict} by id.\n */\nexport class Conflicts {\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Queries all conflicts.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return results in an array or iterate over them one at a time.\n   */\n  public query(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Queries all conflicts.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return results in an array or iterate over them one at a time.\n   */\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.conflicts);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(\n      this.clientContext,\n      query,\n      options,\n      (diagNode: DiagnosticNodeInternal, innerOptions) => {\n        return this.clientContext.queryFeed({\n          path,\n          resourceType: ResourceType.conflicts,\n          resourceId: id,\n          resultFn: (result) => result.Conflicts,\n          query,\n          options: innerOptions,\n          diagnosticNode: diagNode,\n        });\n      },\n    );\n  }\n\n  /**\n   * Reads all conflicts\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   */\n  public readAll(options?: FeedOptions): QueryIterator<ConflictDefinition & Resource> {\n    return this.query<ConflictDefinition & Resource>(undefined, options);\n  }\n}\n"],"mappings":"AAIA,SAASA,aAAa,EAAEC,eAAe,EAAEC,YAAY,QAAQ,cAAc;AAE3E,SAASC,aAAa,QAAQ,qBAAqB;AAMnD;;;;;AAKA,OAAM,MAAOC,SAAS;EACpBC,YACkBC,SAAoB,EACnBC,aAA4B;IAD7B,KAAAD,SAAS,GAATA,SAAS;IACR,KAAAC,aAAa,GAAbA,aAAa;EAC7B;EAgBIC,KAAKA,CAAIA,KAA4B,EAAEC,OAAqB;IACjE,MAAMC,IAAI,GAAGT,eAAe,CAAC,IAAI,CAACK,SAAS,CAACK,GAAG,EAAET,YAAY,CAACU,SAAS,CAAC;IACxE,MAAMC,EAAE,GAAGb,aAAa,CAAC,IAAI,CAACM,SAAS,CAACK,GAAG,CAAC;IAE5C,OAAO,IAAIR,aAAa,CACtB,IAAI,CAACI,aAAa,EAClBC,KAAK,EACLC,OAAO,EACP,CAACK,QAAgC,EAAEC,YAAY,KAAI;MACjD,OAAO,IAAI,CAACR,aAAa,CAACS,SAAS,CAAC;QAClCN,IAAI;QACJO,YAAY,EAAEf,YAAY,CAACU,SAAS;QACpCM,UAAU,EAAEL,EAAE;QACdM,QAAQ,EAAGC,MAAM,IAAKA,MAAM,CAAChB,SAAS;QACtCI,KAAK;QACLC,OAAO,EAAEM,YAAY;QACrBM,cAAc,EAAEP;OACjB,CAAC;IACJ,CAAC,CACF;EACH;EAEA;;;;EAIOQ,OAAOA,CAACb,OAAqB;IAClC,OAAO,IAAI,CAACD,KAAK,CAAgCe,SAAS,EAAEd,OAAO,CAAC;EACtE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}