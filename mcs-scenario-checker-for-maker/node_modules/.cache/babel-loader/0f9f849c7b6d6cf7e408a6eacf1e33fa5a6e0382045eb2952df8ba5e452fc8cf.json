{"ast":null,"code":"import { hashObject } from \"../../utils/hashObject\";\nimport { createAggregator } from \"../Aggregators\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\nimport { emptyGroup, extractAggregateResult } from \"./emptyGroup\";\n/** @hidden */\nexport class GroupByEndpointComponent {\n  constructor(executionContext, queryInfo) {\n    this.executionContext = executionContext;\n    this.queryInfo = queryInfo;\n    this.groupings = new Map();\n    this.aggregateResultArray = [];\n    this.completed = false;\n  }\n  async nextItem(diagnosticNode) {\n    // If we have a full result set, begin returning results\n    if (this.aggregateResultArray.length > 0) {\n      return {\n        result: this.aggregateResultArray.pop(),\n        headers: getInitialHeader()\n      };\n    }\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: getInitialHeader()\n      };\n    }\n    const aggregateHeaders = getInitialHeader();\n    while (this.executionContext.hasMoreResults()) {\n      // Grab the next result\n      const {\n        result,\n        headers\n      } = await this.executionContext.nextItem(diagnosticNode);\n      mergeHeaders(aggregateHeaders, headers);\n      // If it exists, process it via aggregators\n      if (result) {\n        const group = result.groupByItems ? await hashObject(result.groupByItems) : emptyGroup;\n        const aggregators = this.groupings.get(group);\n        const payload = result.payload;\n        if (aggregators) {\n          // Iterator over all results in the payload\n          Object.keys(payload).map(key => {\n            // in case the value of a group is null make sure we create a dummy payload with item2==null\n            const effectiveGroupByValue = payload[key] ? payload[key] : new Map().set(\"item2\", null);\n            const aggregateResult = extractAggregateResult(effectiveGroupByValue);\n            aggregators.get(key).aggregate(aggregateResult);\n          });\n        } else {\n          // This is the first time we have seen a grouping. Setup the initial result without aggregate values\n          const grouping = new Map();\n          this.groupings.set(group, grouping);\n          // Iterator over all results in the payload\n          Object.keys(payload).map(key => {\n            const aggregateType = this.queryInfo.groupByAliasToAggregateType[key];\n            // Create a new aggregator for this specific aggregate field\n            const aggregator = createAggregator(aggregateType);\n            grouping.set(key, aggregator);\n            if (aggregateType) {\n              const aggregateResult = extractAggregateResult(payload[key]);\n              aggregator.aggregate(aggregateResult);\n            } else {\n              aggregator.aggregate(payload[key]);\n            }\n          });\n        }\n      }\n    }\n    for (const grouping of this.groupings.values()) {\n      const groupResult = {};\n      for (const [aggregateKey, aggregator] of grouping.entries()) {\n        groupResult[aggregateKey] = aggregator.getResult();\n      }\n      this.aggregateResultArray.push(groupResult);\n    }\n    this.completed = true;\n    return {\n      result: this.aggregateResultArray.pop(),\n      headers: aggregateHeaders\n    };\n  }\n  hasMoreResults() {\n    return this.executionContext.hasMoreResults() || this.aggregateResultArray.length > 0;\n  }\n}","map":{"version":3,"names":["hashObject","createAggregator","getInitialHeader","mergeHeaders","emptyGroup","extractAggregateResult","GroupByEndpointComponent","constructor","executionContext","queryInfo","groupings","Map","aggregateResultArray","completed","nextItem","diagnosticNode","length","result","pop","headers","undefined","aggregateHeaders","hasMoreResults","group","groupByItems","aggregators","get","payload","Object","keys","map","key","effectiveGroupByValue","set","aggregateResult","aggregate","grouping","aggregateType","groupByAliasToAggregateType","aggregator","values","groupResult","aggregateKey","entries","getResult","push"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/EndpointComponent/GroupByEndpointComponent.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport type { CosmosHeaders } from \"../CosmosHeaders\";\nimport type { QueryInfo } from \"../../request/ErrorResponse\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport type { Aggregator } from \"../Aggregators\";\nimport { createAggregator } from \"../Aggregators\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\nimport { emptyGroup, extractAggregateResult } from \"./emptyGroup\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\n\ninterface GroupByResponse {\n  result: GroupByResult;\n  headers: CosmosHeaders;\n}\n\ninterface GroupByResult {\n  groupByItems: any[];\n  payload: any;\n}\n\n/** @hidden */\nexport class GroupByEndpointComponent implements ExecutionContext {\n  constructor(\n    private executionContext: ExecutionContext,\n    private queryInfo: QueryInfo,\n  ) {}\n\n  private readonly groupings: Map<string, Map<string, Aggregator>> = new Map();\n  private readonly aggregateResultArray: any[] = [];\n  private completed: boolean = false;\n\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    // If we have a full result set, begin returning results\n    if (this.aggregateResultArray.length > 0) {\n      return {\n        result: this.aggregateResultArray.pop(),\n        headers: getInitialHeader(),\n      };\n    }\n\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n\n    const aggregateHeaders = getInitialHeader();\n\n    while (this.executionContext.hasMoreResults()) {\n      // Grab the next result\n      const { result, headers } = (await this.executionContext.nextItem(\n        diagnosticNode,\n      )) as GroupByResponse;\n      mergeHeaders(aggregateHeaders, headers);\n\n      // If it exists, process it via aggregators\n      if (result) {\n        const group = result.groupByItems ? await hashObject(result.groupByItems) : emptyGroup;\n        const aggregators = this.groupings.get(group);\n        const payload = result.payload;\n        if (aggregators) {\n          // Iterator over all results in the payload\n          Object.keys(payload).map((key) => {\n            // in case the value of a group is null make sure we create a dummy payload with item2==null\n            const effectiveGroupByValue = payload[key]\n              ? payload[key]\n              : new Map().set(\"item2\", null);\n            const aggregateResult = extractAggregateResult(effectiveGroupByValue);\n            aggregators.get(key).aggregate(aggregateResult);\n          });\n        } else {\n          // This is the first time we have seen a grouping. Setup the initial result without aggregate values\n          const grouping = new Map();\n          this.groupings.set(group, grouping);\n          // Iterator over all results in the payload\n          Object.keys(payload).map((key) => {\n            const aggregateType = this.queryInfo.groupByAliasToAggregateType[key];\n            // Create a new aggregator for this specific aggregate field\n            const aggregator = createAggregator(aggregateType);\n            grouping.set(key, aggregator);\n            if (aggregateType) {\n              const aggregateResult = extractAggregateResult(payload[key]);\n              aggregator.aggregate(aggregateResult);\n            } else {\n              aggregator.aggregate(payload[key]);\n            }\n          });\n        }\n      }\n    }\n\n    for (const grouping of this.groupings.values()) {\n      const groupResult: any = {};\n      for (const [aggregateKey, aggregator] of grouping.entries()) {\n        groupResult[aggregateKey] = aggregator.getResult();\n      }\n      this.aggregateResultArray.push(groupResult);\n    }\n    this.completed = true;\n    return {\n      result: this.aggregateResultArray.pop(),\n      headers: aggregateHeaders,\n    };\n  }\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults() || this.aggregateResultArray.length > 0;\n  }\n}\n"],"mappings":"AAMA,SAASA,UAAU,QAAQ,wBAAwB;AAEnD,SAASC,gBAAgB,QAAQ,gBAAgB;AACjD,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,gBAAgB;AAC/D,SAASC,UAAU,EAAEC,sBAAsB,QAAQ,cAAc;AAajE;AACA,OAAM,MAAOC,wBAAwB;EACnCC,YACUC,gBAAkC,EAClCC,SAAoB;IADpB,KAAAD,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,SAAS,GAATA,SAAS;IAGF,KAAAC,SAAS,GAAyC,IAAIC,GAAG,EAAE;IAC3D,KAAAC,oBAAoB,GAAU,EAAE;IACzC,KAAAC,SAAS,GAAY,KAAK;EAJ/B;EAMI,MAAMC,QAAQA,CAACC,cAAsC;IAC1D;IACA,IAAI,IAAI,CAACH,oBAAoB,CAACI,MAAM,GAAG,CAAC,EAAE;MACxC,OAAO;QACLC,MAAM,EAAE,IAAI,CAACL,oBAAoB,CAACM,GAAG,EAAE;QACvCC,OAAO,EAAEjB,gBAAgB;OAC1B;IACH;IAEA,IAAI,IAAI,CAACW,SAAS,EAAE;MAClB,OAAO;QACLI,MAAM,EAAEG,SAAS;QACjBD,OAAO,EAAEjB,gBAAgB;OAC1B;IACH;IAEA,MAAMmB,gBAAgB,GAAGnB,gBAAgB,EAAE;IAE3C,OAAO,IAAI,CAACM,gBAAgB,CAACc,cAAc,EAAE,EAAE;MAC7C;MACA,MAAM;QAAEL,MAAM;QAAEE;MAAO,CAAE,GAAI,MAAM,IAAI,CAACX,gBAAgB,CAACM,QAAQ,CAC/DC,cAAc,CACK;MACrBZ,YAAY,CAACkB,gBAAgB,EAAEF,OAAO,CAAC;MAEvC;MACA,IAAIF,MAAM,EAAE;QACV,MAAMM,KAAK,GAAGN,MAAM,CAACO,YAAY,GAAG,MAAMxB,UAAU,CAACiB,MAAM,CAACO,YAAY,CAAC,GAAGpB,UAAU;QACtF,MAAMqB,WAAW,GAAG,IAAI,CAACf,SAAS,CAACgB,GAAG,CAACH,KAAK,CAAC;QAC7C,MAAMI,OAAO,GAAGV,MAAM,CAACU,OAAO;QAC9B,IAAIF,WAAW,EAAE;UACf;UACAG,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC,CAACG,GAAG,CAAEC,GAAG,IAAI;YAC/B;YACA,MAAMC,qBAAqB,GAAGL,OAAO,CAACI,GAAG,CAAC,GACtCJ,OAAO,CAACI,GAAG,CAAC,GACZ,IAAIpB,GAAG,EAAE,CAACsB,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAChC,MAAMC,eAAe,GAAG7B,sBAAsB,CAAC2B,qBAAqB,CAAC;YACrEP,WAAW,CAACC,GAAG,CAACK,GAAG,CAAC,CAACI,SAAS,CAACD,eAAe,CAAC;UACjD,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACA,MAAME,QAAQ,GAAG,IAAIzB,GAAG,EAAE;UAC1B,IAAI,CAACD,SAAS,CAACuB,GAAG,CAACV,KAAK,EAAEa,QAAQ,CAAC;UACnC;UACAR,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC,CAACG,GAAG,CAAEC,GAAG,IAAI;YAC/B,MAAMM,aAAa,GAAG,IAAI,CAAC5B,SAAS,CAAC6B,2BAA2B,CAACP,GAAG,CAAC;YACrE;YACA,MAAMQ,UAAU,GAAGtC,gBAAgB,CAACoC,aAAa,CAAC;YAClDD,QAAQ,CAACH,GAAG,CAACF,GAAG,EAAEQ,UAAU,CAAC;YAC7B,IAAIF,aAAa,EAAE;cACjB,MAAMH,eAAe,GAAG7B,sBAAsB,CAACsB,OAAO,CAACI,GAAG,CAAC,CAAC;cAC5DQ,UAAU,CAACJ,SAAS,CAACD,eAAe,CAAC;YACvC,CAAC,MAAM;cACLK,UAAU,CAACJ,SAAS,CAACR,OAAO,CAACI,GAAG,CAAC,CAAC;YACpC;UACF,CAAC,CAAC;QACJ;MACF;IACF;IAEA,KAAK,MAAMK,QAAQ,IAAI,IAAI,CAAC1B,SAAS,CAAC8B,MAAM,EAAE,EAAE;MAC9C,MAAMC,WAAW,GAAQ,EAAE;MAC3B,KAAK,MAAM,CAACC,YAAY,EAAEH,UAAU,CAAC,IAAIH,QAAQ,CAACO,OAAO,EAAE,EAAE;QAC3DF,WAAW,CAACC,YAAY,CAAC,GAAGH,UAAU,CAACK,SAAS,EAAE;MACpD;MACA,IAAI,CAAChC,oBAAoB,CAACiC,IAAI,CAACJ,WAAW,CAAC;IAC7C;IACA,IAAI,CAAC5B,SAAS,GAAG,IAAI;IACrB,OAAO;MACLI,MAAM,EAAE,IAAI,CAACL,oBAAoB,CAACM,GAAG,EAAE;MACvCC,OAAO,EAAEE;KACV;EACH;EAEOC,cAAcA,CAAA;IACnB,OAAO,IAAI,CAACd,gBAAgB,CAACc,cAAc,EAAE,IAAI,IAAI,CAACV,oBAAoB,CAACI,MAAM,GAAG,CAAC;EACvF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}