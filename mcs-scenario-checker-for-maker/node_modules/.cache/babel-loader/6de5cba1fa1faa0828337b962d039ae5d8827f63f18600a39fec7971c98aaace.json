{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common\";\nimport { isNonEmptyString } from \"../utils/strings\";\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\nimport { diagnosticLevelFromEnv } from \"../utils/envUtils\";\nexport * from \"./DiagnosticWriter\";\nexport * from \"./DiagnosticFormatter\";\nexport const DefaultDiagnosticLevelValue = CosmosDbDiagnosticLevel.info;\nconst acceptableDiagnosticLevelValues = Object.values(CosmosDbDiagnosticLevel).map(x => x.toString());\nlet cosmosDiagnosticLevel;\nif (isNonEmptyString(diagnosticLevelFromEnv)) {\n  // avoid calling setDiagnosticLevel because we don't want a mis-set environment variable to crash\n  if (isCosmosDiagnosticLevel(diagnosticLevelFromEnv)) {\n    setDiagnosticLevel(diagnosticLevelFromEnv);\n  } else {\n    console.error(`${Constants.CosmosDbDiagnosticLevelEnvVarName} set to unknown diagnostic level '${diagnosticLevelFromEnv}'; Setting Cosmos Db diagnostic level to info. Acceptable values: ${acceptableDiagnosticLevelValues.join(\", \")}.`);\n  }\n}\nexport function setDiagnosticLevel(level) {\n  if (level && !isCosmosDiagnosticLevel(level)) {\n    throw new Error(`Unknown diagnostic level '${level}'. Acceptable values: ${acceptableDiagnosticLevelValues.join(\",\")}`);\n  }\n  cosmosDiagnosticLevel = level;\n}\nexport function getDiagnosticLevelFromEnvironment() {\n  return cosmosDiagnosticLevel;\n}\nfunction isCosmosDiagnosticLevel(diagnosticLevel) {\n  return acceptableDiagnosticLevelValues.includes(diagnosticLevel);\n}\nexport function determineDiagnosticLevel(diagnosticLevelFromClientConfig, diagnosticLevelFromEnvironment) {\n  const diagnosticLevelFromEnvOrClient = diagnosticLevelFromEnvironment !== null && diagnosticLevelFromEnvironment !== void 0 ? diagnosticLevelFromEnvironment : diagnosticLevelFromClientConfig; // Diagnostic Setting from environment gets first priority.\n  return diagnosticLevelFromEnvOrClient !== null && diagnosticLevelFromEnvOrClient !== void 0 ? diagnosticLevelFromEnvOrClient : DefaultDiagnosticLevelValue; // Diagnostic Setting supplied in Client config gets second priority.\n}","map":{"version":3,"names":["Constants","isNonEmptyString","CosmosDbDiagnosticLevel","diagnosticLevelFromEnv","DefaultDiagnosticLevelValue","info","acceptableDiagnosticLevelValues","Object","values","map","x","toString","cosmosDiagnosticLevel","isCosmosDiagnosticLevel","setDiagnosticLevel","console","error","CosmosDbDiagnosticLevelEnvVarName","join","level","Error","getDiagnosticLevelFromEnvironment","diagnosticLevel","includes","determineDiagnosticLevel","diagnosticLevelFromClientConfig","diagnosticLevelFromEnvironment","diagnosticLevelFromEnvOrClient"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/diagnostics/index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Constants } from \"../common\";\nimport { isNonEmptyString } from \"../utils/strings\";\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\nimport { diagnosticLevelFromEnv } from \"../utils/envUtils\";\n\nexport * from \"./DiagnosticWriter\";\nexport * from \"./DiagnosticFormatter\";\n\nexport const DefaultDiagnosticLevelValue = CosmosDbDiagnosticLevel.info;\n\nconst acceptableDiagnosticLevelValues = Object.values(CosmosDbDiagnosticLevel).map((x) =>\n  x.toString(),\n);\n\nlet cosmosDiagnosticLevel: CosmosDbDiagnosticLevel | undefined;\n\nif (isNonEmptyString(diagnosticLevelFromEnv)) {\n  // avoid calling setDiagnosticLevel because we don't want a mis-set environment variable to crash\n  if (isCosmosDiagnosticLevel(diagnosticLevelFromEnv)) {\n    setDiagnosticLevel(diagnosticLevelFromEnv as CosmosDbDiagnosticLevel);\n  } else {\n    console.error(\n      `${\n        Constants.CosmosDbDiagnosticLevelEnvVarName\n      } set to unknown diagnostic level '${diagnosticLevelFromEnv}'; Setting Cosmos Db diagnostic level to info. Acceptable values: ${acceptableDiagnosticLevelValues.join(\n        \", \",\n      )}.`,\n    );\n  }\n}\n\nexport function setDiagnosticLevel(level?: CosmosDbDiagnosticLevel): void {\n  if (level && !isCosmosDiagnosticLevel(level)) {\n    throw new Error(\n      `Unknown diagnostic level '${level}'. Acceptable values: ${acceptableDiagnosticLevelValues.join(\n        \",\",\n      )}`,\n    );\n  }\n  cosmosDiagnosticLevel = level;\n}\n\nexport function getDiagnosticLevelFromEnvironment(): CosmosDbDiagnosticLevel | undefined {\n  return cosmosDiagnosticLevel;\n}\n\nfunction isCosmosDiagnosticLevel(\n  diagnosticLevel: string,\n): diagnosticLevel is CosmosDbDiagnosticLevel {\n  return acceptableDiagnosticLevelValues.includes(diagnosticLevel);\n}\n\nexport function determineDiagnosticLevel(\n  diagnosticLevelFromClientConfig: CosmosDbDiagnosticLevel,\n  diagnosticLevelFromEnvironment: CosmosDbDiagnosticLevel,\n): CosmosDbDiagnosticLevel {\n  const diagnosticLevelFromEnvOrClient =\n    diagnosticLevelFromEnvironment ?? diagnosticLevelFromClientConfig; // Diagnostic Setting from environment gets first priority.\n  return diagnosticLevelFromEnvOrClient ?? DefaultDiagnosticLevelValue; // Diagnostic Setting supplied in Client config gets second priority.\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,SAAS,QAAQ,WAAW;AACrC,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,sBAAsB,QAAQ,mBAAmB;AAE1D,cAAc,oBAAoB;AAClC,cAAc,uBAAuB;AAErC,OAAO,MAAMC,2BAA2B,GAAGF,uBAAuB,CAACG,IAAI;AAEvE,MAAMC,+BAA+B,GAAGC,MAAM,CAACC,MAAM,CAACN,uBAAuB,CAAC,CAACO,GAAG,CAAEC,CAAC,IACnFA,CAAC,CAACC,QAAQ,EAAE,CACb;AAED,IAAIC,qBAA0D;AAE9D,IAAIX,gBAAgB,CAACE,sBAAsB,CAAC,EAAE;EAC5C;EACA,IAAIU,uBAAuB,CAACV,sBAAsB,CAAC,EAAE;IACnDW,kBAAkB,CAACX,sBAAiD,CAAC;EACvE,CAAC,MAAM;IACLY,OAAO,CAACC,KAAK,CACX,GACEhB,SAAS,CAACiB,iCACZ,qCAAqCd,sBAAsB,qEAAqEG,+BAA+B,CAACY,IAAI,CAClK,IAAI,CACL,GAAG,CACL;EACH;AACF;AAEA,OAAM,SAAUJ,kBAAkBA,CAACK,KAA+B;EAChE,IAAIA,KAAK,IAAI,CAACN,uBAAuB,CAACM,KAAK,CAAC,EAAE;IAC5C,MAAM,IAAIC,KAAK,CACb,6BAA6BD,KAAK,yBAAyBb,+BAA+B,CAACY,IAAI,CAC7F,GAAG,CACJ,EAAE,CACJ;EACH;EACAN,qBAAqB,GAAGO,KAAK;AAC/B;AAEA,OAAM,SAAUE,iCAAiCA,CAAA;EAC/C,OAAOT,qBAAqB;AAC9B;AAEA,SAASC,uBAAuBA,CAC9BS,eAAuB;EAEvB,OAAOhB,+BAA+B,CAACiB,QAAQ,CAACD,eAAe,CAAC;AAClE;AAEA,OAAM,SAAUE,wBAAwBA,CACtCC,+BAAwD,EACxDC,8BAAuD;EAEvD,MAAMC,8BAA8B,GAClCD,8BAA8B,aAA9BA,8BAA8B,cAA9BA,8BAA8B,GAAID,+BAA+B,CAAC,CAAC;EACrE,OAAOE,8BAA8B,aAA9BA,8BAA8B,cAA9BA,8BAA8B,GAAIvB,2BAA2B,CAAC,CAAC;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}