{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ClientSideMetrics } from \"./clientSideMetrics\";\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { QueryPreparationTimes } from \"./queryPreparationTime\";\nimport { RuntimeExecutionTimes } from \"./runtimeExecutionTimes\";\nimport { TimeSpan } from \"./timeSpan\";\nexport class QueryMetrics {\n  constructor(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitDocumentCount, totalQueryExecutionTime, queryPreparationTimes, indexLookupTime, documentLoadTime, vmExecutionTime, runtimeExecutionTimes, documentWriteTime, clientSideMetrics) {\n    this.retrievedDocumentCount = retrievedDocumentCount;\n    this.retrievedDocumentSize = retrievedDocumentSize;\n    this.outputDocumentCount = outputDocumentCount;\n    this.outputDocumentSize = outputDocumentSize;\n    this.indexHitDocumentCount = indexHitDocumentCount;\n    this.totalQueryExecutionTime = totalQueryExecutionTime;\n    this.queryPreparationTimes = queryPreparationTimes;\n    this.indexLookupTime = indexLookupTime;\n    this.documentLoadTime = documentLoadTime;\n    this.vmExecutionTime = vmExecutionTime;\n    this.runtimeExecutionTimes = runtimeExecutionTimes;\n    this.documentWriteTime = documentWriteTime;\n    this.clientSideMetrics = clientSideMetrics;\n  }\n  /**\n   * Gets the IndexHitRatio\n   * @hidden\n   */\n  get indexHitRatio() {\n    return this.retrievedDocumentCount === 0 ? 1 : this.indexHitDocumentCount / this.retrievedDocumentCount;\n  }\n  /**\n   * returns a new QueryMetrics instance that is the addition of this and the arguments.\n   */\n  add(queryMetricsArray) {\n    let retrievedDocumentCount = 0;\n    let retrievedDocumentSize = 0;\n    let outputDocumentCount = 0;\n    let outputDocumentSize = 0;\n    let indexHitDocumentCount = 0;\n    let totalQueryExecutionTime = TimeSpan.zero;\n    const queryPreparationTimesArray = [];\n    let indexLookupTime = TimeSpan.zero;\n    let documentLoadTime = TimeSpan.zero;\n    let vmExecutionTime = TimeSpan.zero;\n    const runtimeExecutionTimesArray = [];\n    let documentWriteTime = TimeSpan.zero;\n    const clientSideQueryMetricsArray = [];\n    queryMetricsArray.push(this);\n    for (const queryMetrics of queryMetricsArray) {\n      if (queryMetrics) {\n        retrievedDocumentCount += queryMetrics.retrievedDocumentCount;\n        retrievedDocumentSize += queryMetrics.retrievedDocumentSize;\n        outputDocumentCount += queryMetrics.outputDocumentCount;\n        outputDocumentSize += queryMetrics.outputDocumentSize;\n        indexHitDocumentCount += queryMetrics.indexHitDocumentCount;\n        totalQueryExecutionTime = totalQueryExecutionTime.add(queryMetrics.totalQueryExecutionTime);\n        queryPreparationTimesArray.push(queryMetrics.queryPreparationTimes);\n        indexLookupTime = indexLookupTime.add(queryMetrics.indexLookupTime);\n        documentLoadTime = documentLoadTime.add(queryMetrics.documentLoadTime);\n        vmExecutionTime = vmExecutionTime.add(queryMetrics.vmExecutionTime);\n        runtimeExecutionTimesArray.push(queryMetrics.runtimeExecutionTimes);\n        documentWriteTime = documentWriteTime.add(queryMetrics.documentWriteTime);\n        clientSideQueryMetricsArray.push(queryMetrics.clientSideMetrics);\n      }\n    }\n    return new QueryMetrics(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitDocumentCount, totalQueryExecutionTime, QueryPreparationTimes.createFromArray(queryPreparationTimesArray), indexLookupTime, documentLoadTime, vmExecutionTime, RuntimeExecutionTimes.createFromArray(runtimeExecutionTimesArray), documentWriteTime, ClientSideMetrics.createFromArray(...clientSideQueryMetricsArray));\n  }\n  /**\n   * Output the QueryMetrics as a delimited string.\n   * @hidden\n   */\n  toDelimitedString() {\n    return QueryMetricsConstants.RetrievedDocumentCount + \"=\" + this.retrievedDocumentCount + \";\" + QueryMetricsConstants.RetrievedDocumentSize + \"=\" + this.retrievedDocumentSize + \";\" + QueryMetricsConstants.OutputDocumentCount + \"=\" + this.outputDocumentCount + \";\" + QueryMetricsConstants.OutputDocumentSize + \"=\" + this.outputDocumentSize + \";\" + QueryMetricsConstants.IndexHitRatio + \"=\" + this.indexHitRatio + \";\" + QueryMetricsConstants.TotalQueryExecutionTimeInMs + \"=\" + this.totalQueryExecutionTime.totalMilliseconds() + \";\" + this.queryPreparationTimes.toDelimitedString() + \";\" + QueryMetricsConstants.IndexLookupTimeInMs + \"=\" + this.indexLookupTime.totalMilliseconds() + \";\" + QueryMetricsConstants.DocumentLoadTimeInMs + \"=\" + this.documentLoadTime.totalMilliseconds() + \";\" + QueryMetricsConstants.VMExecutionTimeInMs + \"=\" + this.vmExecutionTime.totalMilliseconds() + \";\" + this.runtimeExecutionTimes.toDelimitedString() + \";\" + QueryMetricsConstants.DocumentWriteTimeInMs + \"=\" + this.documentWriteTime.totalMilliseconds();\n  }\n  /**\n   * Returns a new instance of the QueryMetrics class that is the aggregation of an array of query metrics.\n   */\n  static createFromArray(queryMetricsArray) {\n    if (!queryMetricsArray) {\n      throw new Error(\"queryMetricsArray is null or undefined item(s)\");\n    }\n    return QueryMetrics.zero.add(queryMetricsArray);\n  }\n  /**\n   * Returns a new instance of the QueryMetrics class this is deserialized from a delimited string.\n   */\n  static createFromDelimitedString(delimitedString, clientSideMetrics) {\n    const metrics = parseDelimitedString(delimitedString);\n    const indexHitRatio = metrics[QueryMetricsConstants.IndexHitRatio] || 0;\n    const retrievedDocumentCount = metrics[QueryMetricsConstants.RetrievedDocumentCount] || 0;\n    const indexHitCount = indexHitRatio * retrievedDocumentCount;\n    const outputDocumentCount = metrics[QueryMetricsConstants.OutputDocumentCount] || 0;\n    const outputDocumentSize = metrics[QueryMetricsConstants.OutputDocumentSize] || 0;\n    const retrievedDocumentSize = metrics[QueryMetricsConstants.RetrievedDocumentSize] || 0;\n    const totalQueryExecutionTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.TotalQueryExecutionTimeInMs);\n    return new QueryMetrics(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitCount, totalQueryExecutionTime, QueryPreparationTimes.createFromDelimitedString(delimitedString), timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs), RuntimeExecutionTimes.createFromDelimitedString(delimitedString), timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs), clientSideMetrics || ClientSideMetrics.zero);\n  }\n}\nQueryMetrics.zero = new QueryMetrics(0, 0, 0, 0, 0, TimeSpan.zero, QueryPreparationTimes.zero, TimeSpan.zero, TimeSpan.zero, TimeSpan.zero, RuntimeExecutionTimes.zero, TimeSpan.zero, ClientSideMetrics.zero);","map":{"version":3,"names":["ClientSideMetrics","QueryMetricsConstants","parseDelimitedString","timeSpanFromMetrics","QueryPreparationTimes","RuntimeExecutionTimes","TimeSpan","QueryMetrics","constructor","retrievedDocumentCount","retrievedDocumentSize","outputDocumentCount","outputDocumentSize","indexHitDocumentCount","totalQueryExecutionTime","queryPreparationTimes","indexLookupTime","documentLoadTime","vmExecutionTime","runtimeExecutionTimes","documentWriteTime","clientSideMetrics","indexHitRatio","add","queryMetricsArray","zero","queryPreparationTimesArray","runtimeExecutionTimesArray","clientSideQueryMetricsArray","push","queryMetrics","createFromArray","toDelimitedString","RetrievedDocumentCount","RetrievedDocumentSize","OutputDocumentCount","OutputDocumentSize","IndexHitRatio","TotalQueryExecutionTimeInMs","totalMilliseconds","IndexLookupTimeInMs","DocumentLoadTimeInMs","VMExecutionTimeInMs","DocumentWriteTimeInMs","Error","createFromDelimitedString","delimitedString","metrics","indexHitCount"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryMetrics/queryMetrics.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ClientSideMetrics } from \"./clientSideMetrics\";\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { QueryPreparationTimes } from \"./queryPreparationTime\";\nimport { RuntimeExecutionTimes } from \"./runtimeExecutionTimes\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class QueryMetrics {\n  constructor(\n    public readonly retrievedDocumentCount: number,\n    public readonly retrievedDocumentSize: number,\n    public readonly outputDocumentCount: number,\n    public readonly outputDocumentSize: number,\n    public readonly indexHitDocumentCount: number,\n    public readonly totalQueryExecutionTime: TimeSpan,\n    public readonly queryPreparationTimes: QueryPreparationTimes,\n    public readonly indexLookupTime: TimeSpan,\n    public readonly documentLoadTime: TimeSpan,\n    public readonly vmExecutionTime: TimeSpan,\n    public readonly runtimeExecutionTimes: RuntimeExecutionTimes,\n    public readonly documentWriteTime: TimeSpan,\n    public readonly clientSideMetrics: ClientSideMetrics,\n  ) {}\n\n  /**\n   * Gets the IndexHitRatio\n   * @hidden\n   */\n  public get indexHitRatio(): number {\n    return this.retrievedDocumentCount === 0\n      ? 1\n      : this.indexHitDocumentCount / this.retrievedDocumentCount;\n  }\n\n  /**\n   * returns a new QueryMetrics instance that is the addition of this and the arguments.\n   */\n  public add(queryMetricsArray: QueryMetrics[]): QueryMetrics {\n    let retrievedDocumentCount = 0;\n    let retrievedDocumentSize = 0;\n    let outputDocumentCount = 0;\n    let outputDocumentSize = 0;\n    let indexHitDocumentCount = 0;\n    let totalQueryExecutionTime = TimeSpan.zero;\n    const queryPreparationTimesArray = [];\n    let indexLookupTime = TimeSpan.zero;\n    let documentLoadTime = TimeSpan.zero;\n    let vmExecutionTime = TimeSpan.zero;\n    const runtimeExecutionTimesArray = [];\n    let documentWriteTime = TimeSpan.zero;\n    const clientSideQueryMetricsArray = [];\n\n    queryMetricsArray.push(this);\n\n    for (const queryMetrics of queryMetricsArray) {\n      if (queryMetrics) {\n        retrievedDocumentCount += queryMetrics.retrievedDocumentCount;\n        retrievedDocumentSize += queryMetrics.retrievedDocumentSize;\n        outputDocumentCount += queryMetrics.outputDocumentCount;\n        outputDocumentSize += queryMetrics.outputDocumentSize;\n        indexHitDocumentCount += queryMetrics.indexHitDocumentCount;\n        totalQueryExecutionTime = totalQueryExecutionTime.add(queryMetrics.totalQueryExecutionTime);\n        queryPreparationTimesArray.push(queryMetrics.queryPreparationTimes);\n        indexLookupTime = indexLookupTime.add(queryMetrics.indexLookupTime);\n        documentLoadTime = documentLoadTime.add(queryMetrics.documentLoadTime);\n        vmExecutionTime = vmExecutionTime.add(queryMetrics.vmExecutionTime);\n        runtimeExecutionTimesArray.push(queryMetrics.runtimeExecutionTimes);\n        documentWriteTime = documentWriteTime.add(queryMetrics.documentWriteTime);\n        clientSideQueryMetricsArray.push(queryMetrics.clientSideMetrics);\n      }\n    }\n\n    return new QueryMetrics(\n      retrievedDocumentCount,\n      retrievedDocumentSize,\n      outputDocumentCount,\n      outputDocumentSize,\n      indexHitDocumentCount,\n      totalQueryExecutionTime,\n      QueryPreparationTimes.createFromArray(queryPreparationTimesArray),\n      indexLookupTime,\n      documentLoadTime,\n      vmExecutionTime,\n      RuntimeExecutionTimes.createFromArray(runtimeExecutionTimesArray),\n      documentWriteTime,\n      ClientSideMetrics.createFromArray(...clientSideQueryMetricsArray),\n    );\n  }\n\n  /**\n   * Output the QueryMetrics as a delimited string.\n   * @hidden\n   */\n  public toDelimitedString(): string {\n    return (\n      QueryMetricsConstants.RetrievedDocumentCount +\n      \"=\" +\n      this.retrievedDocumentCount +\n      \";\" +\n      QueryMetricsConstants.RetrievedDocumentSize +\n      \"=\" +\n      this.retrievedDocumentSize +\n      \";\" +\n      QueryMetricsConstants.OutputDocumentCount +\n      \"=\" +\n      this.outputDocumentCount +\n      \";\" +\n      QueryMetricsConstants.OutputDocumentSize +\n      \"=\" +\n      this.outputDocumentSize +\n      \";\" +\n      QueryMetricsConstants.IndexHitRatio +\n      \"=\" +\n      this.indexHitRatio +\n      \";\" +\n      QueryMetricsConstants.TotalQueryExecutionTimeInMs +\n      \"=\" +\n      this.totalQueryExecutionTime.totalMilliseconds() +\n      \";\" +\n      this.queryPreparationTimes.toDelimitedString() +\n      \";\" +\n      QueryMetricsConstants.IndexLookupTimeInMs +\n      \"=\" +\n      this.indexLookupTime.totalMilliseconds() +\n      \";\" +\n      QueryMetricsConstants.DocumentLoadTimeInMs +\n      \"=\" +\n      this.documentLoadTime.totalMilliseconds() +\n      \";\" +\n      QueryMetricsConstants.VMExecutionTimeInMs +\n      \"=\" +\n      this.vmExecutionTime.totalMilliseconds() +\n      \";\" +\n      this.runtimeExecutionTimes.toDelimitedString() +\n      \";\" +\n      QueryMetricsConstants.DocumentWriteTimeInMs +\n      \"=\" +\n      this.documentWriteTime.totalMilliseconds()\n    );\n  }\n\n  public static readonly zero = new QueryMetrics(\n    0,\n    0,\n    0,\n    0,\n    0,\n    TimeSpan.zero,\n    QueryPreparationTimes.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    RuntimeExecutionTimes.zero,\n    TimeSpan.zero,\n    ClientSideMetrics.zero,\n  );\n\n  /**\n   * Returns a new instance of the QueryMetrics class that is the aggregation of an array of query metrics.\n   */\n  public static createFromArray(queryMetricsArray: QueryMetrics[]): QueryMetrics {\n    if (!queryMetricsArray) {\n      throw new Error(\"queryMetricsArray is null or undefined item(s)\");\n    }\n\n    return QueryMetrics.zero.add(queryMetricsArray);\n  }\n\n  /**\n   * Returns a new instance of the QueryMetrics class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(\n    delimitedString: string,\n    clientSideMetrics?: ClientSideMetrics,\n  ): QueryMetrics {\n    const metrics = parseDelimitedString(delimitedString);\n\n    const indexHitRatio = metrics[QueryMetricsConstants.IndexHitRatio] || 0;\n    const retrievedDocumentCount = metrics[QueryMetricsConstants.RetrievedDocumentCount] || 0;\n    const indexHitCount = indexHitRatio * retrievedDocumentCount;\n    const outputDocumentCount = metrics[QueryMetricsConstants.OutputDocumentCount] || 0;\n    const outputDocumentSize = metrics[QueryMetricsConstants.OutputDocumentSize] || 0;\n    const retrievedDocumentSize = metrics[QueryMetricsConstants.RetrievedDocumentSize] || 0;\n    const totalQueryExecutionTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.TotalQueryExecutionTimeInMs,\n    );\n    return new QueryMetrics(\n      retrievedDocumentCount,\n      retrievedDocumentSize,\n      outputDocumentCount,\n      outputDocumentSize,\n      indexHitCount,\n      totalQueryExecutionTime,\n      QueryPreparationTimes.createFromDelimitedString(delimitedString),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs),\n      RuntimeExecutionTimes.createFromDelimitedString(delimitedString),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs),\n      clientSideMetrics || ClientSideMetrics.zero,\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}