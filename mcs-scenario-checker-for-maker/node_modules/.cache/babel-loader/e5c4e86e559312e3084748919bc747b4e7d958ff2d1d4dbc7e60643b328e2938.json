{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { doubleToByteArrayJSBI, writeNumberForBinaryEncodingJSBI } from \"./encoding/number\";\nimport { writeStringForBinaryEncoding } from \"./encoding/string\";\nimport { BytePrefix } from \"./encoding/prefix\";\nimport MurmurHash from \"./murmurHash\";\nconst MAX_STRING_CHARS = 100;\nexport function hashV1PartitionKey(partitionKey) {\n  const key = partitionKey[0];\n  const toHash = prefixKeyByType(key);\n  const hash = MurmurHash.x86.hash32(toHash);\n  const encodedJSBI = writeNumberForBinaryEncodingJSBI(hash);\n  const encodedValue = encodeByType(key);\n  const finalHash = Buffer.concat([encodedJSBI, encodedValue]).toString(\"hex\").toUpperCase();\n  return finalHash;\n}\nfunction prefixKeyByType(key) {\n  let bytes;\n  switch (typeof key) {\n    case \"string\":\n      {\n        const truncated = key.substr(0, MAX_STRING_CHARS);\n        bytes = Buffer.concat([Buffer.from(BytePrefix.String, \"hex\"), Buffer.from(truncated), Buffer.from(BytePrefix.Undefined, \"hex\")]);\n        return bytes;\n      }\n    case \"number\":\n      {\n        const numberBytes = doubleToByteArrayJSBI(key);\n        bytes = Buffer.concat([Buffer.from(BytePrefix.Number, \"hex\"), numberBytes]);\n        return bytes;\n      }\n    case \"boolean\":\n      {\n        const prefix = key ? BytePrefix.True : BytePrefix.False;\n        return Buffer.from(prefix, \"hex\");\n      }\n    case \"object\":\n      {\n        if (key === null) {\n          return Buffer.from(BytePrefix.Null, \"hex\");\n        }\n        return Buffer.from(BytePrefix.Undefined, \"hex\");\n      }\n    case \"undefined\":\n      {\n        return Buffer.from(BytePrefix.Undefined, \"hex\");\n      }\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\nfunction encodeByType(key) {\n  switch (typeof key) {\n    case \"string\":\n      {\n        const truncated = key.substr(0, MAX_STRING_CHARS);\n        return writeStringForBinaryEncoding(truncated);\n      }\n    case \"number\":\n      {\n        const encodedJSBI = writeNumberForBinaryEncodingJSBI(key);\n        return encodedJSBI;\n      }\n    case \"boolean\":\n      {\n        const prefix = key ? BytePrefix.True : BytePrefix.False;\n        return Buffer.from(prefix, \"hex\");\n      }\n    case \"object\":\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    case \"undefined\":\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}","map":{"version":3,"names":["doubleToByteArrayJSBI","writeNumberForBinaryEncodingJSBI","writeStringForBinaryEncoding","BytePrefix","MurmurHash","MAX_STRING_CHARS","hashV1PartitionKey","partitionKey","key","toHash","prefixKeyByType","hash","x86","hash32","encodedJSBI","encodedValue","encodeByType","finalHash","Buffer","concat","toString","toUpperCase","bytes","truncated","substr","from","String","Undefined","numberBytes","Number","prefix","True","False","Null","Error"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/utils/hashing/v1.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { doubleToByteArrayJSBI, writeNumberForBinaryEncodingJSBI } from \"./encoding/number\";\nimport { writeStringForBinaryEncoding } from \"./encoding/string\";\nimport { BytePrefix } from \"./encoding/prefix\";\nimport MurmurHash from \"./murmurHash\";\nimport type { PrimitivePartitionKeyValue } from \"../../documents\";\n\nconst MAX_STRING_CHARS = 100;\n\nexport function hashV1PartitionKey(partitionKey: PrimitivePartitionKeyValue[]): string {\n  const key = partitionKey[0];\n  const toHash = prefixKeyByType(key);\n  const hash = MurmurHash.x86.hash32(toHash);\n  const encodedJSBI = writeNumberForBinaryEncodingJSBI(hash);\n  const encodedValue = encodeByType(key);\n  const finalHash = Buffer.concat([encodedJSBI, encodedValue]).toString(\"hex\").toUpperCase();\n  return finalHash;\n}\n\nfunction prefixKeyByType(key: PrimitivePartitionKeyValue): Buffer {\n  let bytes: Buffer;\n  switch (typeof key) {\n    case \"string\": {\n      const truncated = key.substr(0, MAX_STRING_CHARS);\n      bytes = Buffer.concat([\n        Buffer.from(BytePrefix.String, \"hex\"),\n        Buffer.from(truncated),\n        Buffer.from(BytePrefix.Undefined, \"hex\"),\n      ]);\n      return bytes;\n    }\n    case \"number\": {\n      const numberBytes = doubleToByteArrayJSBI(key);\n      bytes = Buffer.concat([Buffer.from(BytePrefix.Number, \"hex\"), numberBytes]);\n      return bytes;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return Buffer.from(prefix, \"hex\");\n    }\n    case \"object\": {\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    case \"undefined\": {\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n\nfunction encodeByType(key: PrimitivePartitionKeyValue): Buffer {\n  switch (typeof key) {\n    case \"string\": {\n      const truncated = key.substr(0, MAX_STRING_CHARS);\n      return writeStringForBinaryEncoding(truncated);\n    }\n    case \"number\": {\n      const encodedJSBI = writeNumberForBinaryEncodingJSBI(key);\n      return encodedJSBI;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return Buffer.from(prefix, \"hex\");\n    }\n    case \"object\":\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    case \"undefined\":\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}