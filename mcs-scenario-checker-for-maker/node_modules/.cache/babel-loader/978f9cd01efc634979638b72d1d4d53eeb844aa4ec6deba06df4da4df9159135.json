{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n *  @hidden\n * ord is used to compare different types. Eg. in ascending order, for cross type comparison, boolean will come first, then number and, then string.\n * compFunc is used to compare the same type comparison.\n */\nconst TYPEORDCOMPARATOR = Object.freeze({\n  NoValue: {\n    ord: 0\n  },\n  undefined: {\n    ord: 1\n  },\n  boolean: {\n    ord: 2,\n    compFunc: (a, b) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    }\n  },\n  number: {\n    ord: 4,\n    compFunc: (a, b) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    }\n  },\n  string: {\n    ord: 5,\n    compFunc: (a, b) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    }\n  }\n});\n/** @hidden */\nexport class OrderByComparator {\n  constructor(sortOrder) {\n    this.sortOrder = sortOrder;\n  }\n  compareItems(item1, item2) {\n    const orderByItemsRes1 = this.getOrderByItems(item1);\n    const orderByItemsRes2 = this.getOrderByItems(item2);\n    for (let i = 0; i < orderByItemsRes1.length; i++) {\n      // compares the orderby items one by one\n      const compRes = this.compareOrderByItem(orderByItemsRes1[i], orderByItemsRes2[i]);\n      if (compRes !== 0) {\n        if (this.sortOrder[i] === \"Descending\") {\n          return compRes;\n        } else if (this.sortOrder[i] === \"Ascending\") {\n          return -compRes;\n        }\n      }\n    }\n  }\n  getOrderByItems(res) {\n    return res[\"orderByItems\"];\n  }\n  compareOrderByItem(orderByItem1, orderByItem2) {\n    const type1 = this.getType(orderByItem1);\n    const type2 = this.getType(orderByItem2);\n    return this.compareValue(orderByItem1[\"item\"], type1, orderByItem2[\"item\"], type2);\n  }\n  getType(orderByItem) {\n    // TODO: any item?\n    if (orderByItem === undefined || orderByItem.item === undefined) {\n      return \"NoValue\";\n    }\n    const type = typeof orderByItem.item;\n    if (TYPEORDCOMPARATOR[type] === undefined) {\n      throw new Error(`unrecognizable type ${type}`);\n    }\n    return type;\n  }\n  compareValue(item1, type1, item2, type2) {\n    // TODO: https://github.com/Azure/azure-sdk-for-js/issues/30122\n    // currently we do not support same type and cross type comparision for object and arrays.\n    if (type1 === \"object\" || type2 === \"object\") {\n      throw new Error(\"Tried to compare an object type\");\n    }\n    const type1Ord = TYPEORDCOMPARATOR[type1].ord;\n    const type2Ord = TYPEORDCOMPARATOR[type2].ord;\n    // Validate if the two item are of same type or not based on the type ordinal.\n    const typeCmp = type1Ord - type2Ord;\n    // if not same type, compare based on the type ordinal. Lower ordinal takes precedence over higher ordinal.\n    if (typeCmp !== 0) {\n      return typeCmp;\n    }\n    // both are of the same type\n    if (type1Ord === TYPEORDCOMPARATOR[\"undefined\"].ord || type1Ord === TYPEORDCOMPARATOR[\"NoValue\"].ord) {\n      // if both types are undefined or Null they are equal\n      return 0;\n    }\n    const compFunc = TYPEORDCOMPARATOR[type1].compFunc;\n    if (typeof compFunc === \"undefined\") {\n      throw new Error(\"Cannot find the comparison function\");\n    }\n    // same type and type is defined compare the items\n    return compFunc(item1, item2);\n  }\n}","map":{"version":3,"names":["TYPEORDCOMPARATOR","Object","freeze","NoValue","ord","undefined","boolean","compFunc","a","b","number","string","OrderByComparator","constructor","sortOrder","compareItems","item1","item2","orderByItemsRes1","getOrderByItems","orderByItemsRes2","i","length","compRes","compareOrderByItem","res","orderByItem1","orderByItem2","type1","getType","type2","compareValue","orderByItem","item","type","Error","type1Ord","type2Ord","typeCmp"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryExecutionContext/orderByComparator.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { NonStreamingOrderByResult } from \"./nonStreamingOrderByResult\";\n\n/**\n *  @hidden\n * ord is used to compare different types. Eg. in ascending order, for cross type comparison, boolean will come first, then number and, then string.\n * compFunc is used to compare the same type comparison.\n */\nconst TYPEORDCOMPARATOR: {\n  [type: string]: { ord: number; compFunc?: (a: any, b: any) => number };\n} = Object.freeze({\n  NoValue: {\n    ord: 0,\n  },\n  undefined: {\n    ord: 1,\n  },\n  boolean: {\n    ord: 2,\n    compFunc: (a: boolean, b: boolean) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n  number: {\n    ord: 4,\n    compFunc: (a: number, b: number) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n  string: {\n    ord: 5,\n    compFunc: (a: string, b: string) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n});\n\n/** @hidden */\nexport class OrderByComparator {\n  constructor(public sortOrder: string[]) {}\n\n  public compareItems(item1: NonStreamingOrderByResult, item2: NonStreamingOrderByResult): number {\n    const orderByItemsRes1 = this.getOrderByItems(item1);\n    const orderByItemsRes2 = this.getOrderByItems(item2);\n\n    for (let i = 0; i < orderByItemsRes1.length; i++) {\n      // compares the orderby items one by one\n      const compRes = this.compareOrderByItem(orderByItemsRes1[i], orderByItemsRes2[i]);\n      if (compRes !== 0) {\n        if (this.sortOrder[i] === \"Descending\") {\n          return compRes;\n        } else if (this.sortOrder[i] === \"Ascending\") {\n          return -compRes;\n        }\n      }\n    }\n  }\n\n  private getOrderByItems(res: any): any {\n    return res[\"orderByItems\"];\n  }\n\n  private compareOrderByItem(orderByItem1: any, orderByItem2: any): number {\n    const type1 = this.getType(orderByItem1);\n    const type2 = this.getType(orderByItem2);\n    return this.compareValue(orderByItem1[\"item\"], type1, orderByItem2[\"item\"], type2);\n  }\n\n  private getType(\n    orderByItem: any,\n  ):\n    | \"string\"\n    | \"number\"\n    | \"bigint\"\n    | \"boolean\"\n    | \"symbol\"\n    | \"undefined\"\n    | \"object\"\n    | \"function\"\n    | \"NoValue\" {\n    // TODO: any item?\n    if (orderByItem === undefined || orderByItem.item === undefined) {\n      return \"NoValue\";\n    }\n    const type = typeof orderByItem.item;\n    if (TYPEORDCOMPARATOR[type] === undefined) {\n      throw new Error(`unrecognizable type ${type}`);\n    }\n    return type;\n  }\n\n  private compareValue(item1: unknown, type1: string, item2: unknown, type2: string): number {\n    // TODO: https://github.com/Azure/azure-sdk-for-js/issues/30122\n    // currently we do not support same type and cross type comparision for object and arrays.\n\n    if (type1 === \"object\" || type2 === \"object\") {\n      throw new Error(\"Tried to compare an object type\");\n    }\n    const type1Ord = TYPEORDCOMPARATOR[type1].ord;\n    const type2Ord = TYPEORDCOMPARATOR[type2].ord;\n\n    // Validate if the two item are of same type or not based on the type ordinal.\n    const typeCmp = type1Ord - type2Ord;\n\n    // if not same type, compare based on the type ordinal. Lower ordinal takes precedence over higher ordinal.\n    if (typeCmp !== 0) {\n      return typeCmp;\n    }\n\n    // both are of the same type\n    if (\n      type1Ord === TYPEORDCOMPARATOR[\"undefined\"].ord ||\n      type1Ord === TYPEORDCOMPARATOR[\"NoValue\"].ord\n    ) {\n      // if both types are undefined or Null they are equal\n      return 0;\n    }\n\n    const compFunc = TYPEORDCOMPARATOR[type1].compFunc;\n    if (typeof compFunc === \"undefined\") {\n      throw new Error(\"Cannot find the comparison function\");\n    }\n    // same type and type is defined compare the items\n    return compFunc(item1, item2);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}