{"ast":null,"code":"import { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { Permission } from \"./Permission\";\nimport { PermissionResponse } from \"./PermissionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * Use to create, replace, query, and read all Permissions.\n *\n * @see {@link Permission} to read, replace, or delete a specific permission by id.\n */\nexport class Permissions {\n  /**\n   * @hidden\n   * @param user - The parent {@link User}.\n   */\n  constructor(user, clientContext) {\n    this.user = user;\n    this.clientContext = clientContext;\n  }\n  query(query, options) {\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        resultFn: result => result.Permissions,\n        query,\n        options: innerOptions,\n        diagnosticNode\n      });\n    });\n  }\n  /**\n   * Read all permissions.\n   * @example Read all permissions to array.\n   * ```typescript\n   * const {body: permissionList} = await user.permissions.readAll().fetchAll();\n   * ```\n   */\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n  /**\n   * Create a permission.\n   *\n   * A permission represents a per-User Permission to access a specific resource\n   * e.g. Item or Container.\n   * @param body - Represents the body of the permission.\n   */\n  async create(body, options) {\n    return withDiagnostics(async diagnosticNode => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n      const response = await this.clientContext.create({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        diagnosticNode,\n        options\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(response.result, response.headers, response.code, ref, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Upsert a permission.\n   *\n   * A permission represents a per-User Permission to access a\n   * specific resource e.g. Item or Container.\n   */\n  async upsert(body, options) {\n    return withDiagnostics(async diagnosticNode => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n      const response = await this.clientContext.upsert({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(response.result, response.headers, response.code, ref, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["getIdFromLink","getPathFromLink","isResourceValid","ResourceType","QueryIterator","Permission","PermissionResponse","getEmptyCosmosDiagnostics","withDiagnostics","Permissions","constructor","user","clientContext","query","options","path","url","permission","id","diagnosticNode","innerOptions","queryFeed","resourceType","resourceId","resultFn","result","readAll","undefined","create","body","err","response","ref","headers","code","upsert"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/Permission/Permissions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { User } from \"../User\";\nimport { Permission } from \"./Permission\";\nimport type { PermissionBody } from \"./PermissionBody\";\nimport type { PermissionDefinition } from \"./PermissionDefinition\";\nimport { PermissionResponse } from \"./PermissionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Use to create, replace, query, and read all Permissions.\n *\n * @see {@link Permission} to read, replace, or delete a specific permission by id.\n */\nexport class Permissions {\n  /**\n   * @hidden\n   * @param user - The parent {@link User}.\n   */\n  constructor(\n    public readonly user: User,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all permissions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all permissions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        resultFn: (result) => result.Permissions,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all permissions.\n   * @example Read all permissions to array.\n   * ```typescript\n   * const {body: permissionList} = await user.permissions.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<PermissionDefinition & Resource> {\n    return this.query(undefined, options);\n  }\n\n  /**\n   * Create a permission.\n   *\n   * A permission represents a per-User Permission to access a specific resource\n   * e.g. Item or Container.\n   * @param body - Represents the body of the permission.\n   */\n  public async create(\n    body: PermissionDefinition,\n    options?: RequestOptions,\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n\n      const response = await this.clientContext.create<PermissionDefinition, PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        diagnosticNode,\n        options,\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Upsert a permission.\n   *\n   * A permission represents a per-User Permission to access a\n   * specific resource e.g. Item or Container.\n   */\n  public async upsert(\n    body: PermissionDefinition,\n    options?: RequestOptions,\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n\n      const response = await this.clientContext.upsert<PermissionDefinition, PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"AAIA,SAASA,aAAa,EAAEC,eAAe,EAAEC,eAAe,EAAEC,YAAY,QAAQ,cAAc;AAE5F,SAASC,aAAa,QAAQ,qBAAqB;AAInD,SAASC,UAAU,QAAQ,cAAc;AAGzC,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,yBAAyB,EAAEC,eAAe,QAAQ,yBAAyB;AAEpF;;;;;AAKA,OAAM,MAAOC,WAAW;EACtB;;;;EAIAC,YACkBC,IAAU,EACTC,aAA4B;IAD7B,KAAAD,IAAI,GAAJA,IAAI;IACH,KAAAC,aAAa,GAAbA,aAAa;EAC7B;EAYIC,KAAKA,CAAIA,KAAmB,EAAEC,OAAqB;IACxD,MAAMC,IAAI,GAAGd,eAAe,CAAC,IAAI,CAACU,IAAI,CAACK,GAAG,EAAEb,YAAY,CAACc,UAAU,CAAC;IACpE,MAAMC,EAAE,GAAGlB,aAAa,CAAC,IAAI,CAACW,IAAI,CAACK,GAAG,CAAC;IAEvC,OAAO,IAAIZ,aAAa,CAAC,IAAI,CAACQ,aAAa,EAAEC,KAAK,EAAEC,OAAO,EAAE,CAACK,cAAc,EAAEC,YAAY,KAAI;MAC5F,OAAO,IAAI,CAACR,aAAa,CAACS,SAAS,CAAC;QAClCN,IAAI;QACJO,YAAY,EAAEnB,YAAY,CAACc,UAAU;QACrCM,UAAU,EAAEL,EAAE;QACdM,QAAQ,EAAGC,MAAM,IAAKA,MAAM,CAAChB,WAAW;QACxCI,KAAK;QACLC,OAAO,EAAEM,YAAY;QACrBD;OACD,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;;;;;;;EAOOO,OAAOA,CAACZ,OAAqB;IAClC,OAAO,IAAI,CAACD,KAAK,CAACc,SAAS,EAAEb,OAAO,CAAC;EACvC;EAEA;;;;;;;EAOO,MAAMc,MAAMA,CACjBC,IAA0B,EAC1Bf,OAAwB;IAExB,OAAON,eAAe,CAAC,MAAOW,cAAsC,IAAI;MACtE,MAAMW,GAAG,GAAG,EAAE;MACd,IAAI,CAAC5B,eAAe,CAAC2B,IAAI,EAAEC,GAAG,CAAC,EAAE;QAC/B,MAAMA,GAAG;MACX;MAEA,MAAMf,IAAI,GAAGd,eAAe,CAAC,IAAI,CAACU,IAAI,CAACK,GAAG,EAAEb,YAAY,CAACc,UAAU,CAAC;MACpE,MAAMC,EAAE,GAAGlB,aAAa,CAAC,IAAI,CAACW,IAAI,CAACK,GAAG,CAAC;MAEvC,MAAMe,QAAQ,GAAG,MAAM,IAAI,CAACnB,aAAa,CAACgB,MAAM,CAAuC;QACrFC,IAAI;QACJd,IAAI;QACJO,YAAY,EAAEnB,YAAY,CAACc,UAAU;QACrCM,UAAU,EAAEL,EAAE;QACdC,cAAc;QACdL;OACD,CAAC;MACF,MAAMkB,GAAG,GAAG,IAAI3B,UAAU,CAAC,IAAI,CAACM,IAAI,EAAEoB,QAAQ,CAACN,MAAM,CAACP,EAAE,EAAE,IAAI,CAACN,aAAa,CAAC;MAC7E,OAAO,IAAIN,kBAAkB,CAC3ByB,QAAQ,CAACN,MAAM,EACfM,QAAQ,CAACE,OAAO,EAChBF,QAAQ,CAACG,IAAI,EACbF,GAAG,EACHzB,yBAAyB,EAAE,CAC5B;IACH,CAAC,EAAE,IAAI,CAACK,aAAa,CAAC;EACxB;EAEA;;;;;;EAMO,MAAMuB,MAAMA,CACjBN,IAA0B,EAC1Bf,OAAwB;IAExB,OAAON,eAAe,CAAC,MAAOW,cAAsC,IAAI;MACtE,MAAMW,GAAG,GAAG,EAAE;MACd,IAAI,CAAC5B,eAAe,CAAC2B,IAAI,EAAEC,GAAG,CAAC,EAAE;QAC/B,MAAMA,GAAG;MACX;MAEA,MAAMf,IAAI,GAAGd,eAAe,CAAC,IAAI,CAACU,IAAI,CAACK,GAAG,EAAEb,YAAY,CAACc,UAAU,CAAC;MACpE,MAAMC,EAAE,GAAGlB,aAAa,CAAC,IAAI,CAACW,IAAI,CAACK,GAAG,CAAC;MAEvC,MAAMe,QAAQ,GAAG,MAAM,IAAI,CAACnB,aAAa,CAACuB,MAAM,CAAuC;QACrFN,IAAI;QACJd,IAAI;QACJO,YAAY,EAAEnB,YAAY,CAACc,UAAU;QACrCM,UAAU,EAAEL,EAAE;QACdJ,OAAO;QACPK;OACD,CAAC;MACF,MAAMa,GAAG,GAAG,IAAI3B,UAAU,CAAC,IAAI,CAACM,IAAI,EAAEoB,QAAQ,CAACN,MAAM,CAACP,EAAE,EAAE,IAAI,CAACN,aAAa,CAAC;MAC7E,OAAO,IAAIN,kBAAkB,CAC3ByB,QAAQ,CAACN,MAAM,EACfM,QAAQ,CAACE,OAAO,EAChBF,QAAQ,CAACG,IAAI,EACbF,GAAG,EACHzB,yBAAyB,EAAE,CAC5B;IACH,CAAC,EAAE,IAAI,CAACK,aAAa,CAAC;EACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}