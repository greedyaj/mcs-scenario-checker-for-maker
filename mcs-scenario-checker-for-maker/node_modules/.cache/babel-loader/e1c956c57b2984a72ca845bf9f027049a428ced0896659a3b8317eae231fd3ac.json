{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { StoredProcedures, StoredProcedure } from \"../StoredProcedure\";\nimport { Trigger, Triggers } from \"../Trigger\";\nimport { UserDefinedFunction, UserDefinedFunctions } from \"../UserDefinedFunction\";\nexport class Scripts {\n  /**\n   * @param container - The parent {@link Container}.\n   * @hidden\n   */\n  constructor(container, clientContext) {\n    this.container = container;\n    this.clientContext = clientContext;\n  }\n  /**\n   * Used to read, replace, or delete a specific, existing {@link StoredProcedure} by id.\n   *\n   * Use `.storedProcedures` for creating new stored procedures, or querying/reading all stored procedures.\n   * @param id - The id of the {@link StoredProcedure}.\n   */\n  storedProcedure(id) {\n    return new StoredProcedure(this.container, id, this.clientContext);\n  }\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Trigger} by id.\n   *\n   * Use `.triggers` for creating new triggers, or querying/reading all triggers.\n   * @param id - The id of the {@link Trigger}.\n   */\n  trigger(id) {\n    return new Trigger(this.container, id, this.clientContext);\n  }\n  /**\n   * Used to read, replace, or delete a specific, existing {@link UserDefinedFunction} by id.\n   *\n   * Use `.userDefinedFunctions` for creating new user defined functions, or querying/reading all user defined functions.\n   * @param id - The id of the {@link UserDefinedFunction}.\n   */\n  userDefinedFunction(id) {\n    return new UserDefinedFunction(this.container, id, this.clientContext);\n  }\n  /**\n   * Operations for creating new stored procedures, and reading/querying all stored procedures.\n   *\n   * For reading, replacing, or deleting an existing stored procedure, use `.storedProcedure(id)`.\n   */\n  get storedProcedures() {\n    if (!this.$sprocs) {\n      this.$sprocs = new StoredProcedures(this.container, this.clientContext);\n    }\n    return this.$sprocs;\n  }\n  /**\n   * Operations for creating new triggers, and reading/querying all triggers.\n   *\n   * For reading, replacing, or deleting an existing trigger, use `.trigger(id)`.\n   */\n  get triggers() {\n    if (!this.$triggers) {\n      this.$triggers = new Triggers(this.container, this.clientContext);\n    }\n    return this.$triggers;\n  }\n  /**\n   * Operations for creating new user defined functions, and reading/querying all user defined functions.\n   *\n   * For reading, replacing, or deleting an existing user defined function, use `.userDefinedFunction(id)`.\n   */\n  get userDefinedFunctions() {\n    if (!this.$udfs) {\n      this.$udfs = new UserDefinedFunctions(this.container, this.clientContext);\n    }\n    return this.$udfs;\n  }\n}","map":{"version":3,"names":["StoredProcedures","StoredProcedure","Trigger","Triggers","UserDefinedFunction","UserDefinedFunctions","Scripts","constructor","container","clientContext","storedProcedure","id","trigger","userDefinedFunction","storedProcedures","$sprocs","triggers","$triggers","userDefinedFunctions","$udfs"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/Script/Scripts.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { StoredProcedures, StoredProcedure } from \"../StoredProcedure\";\nimport { Trigger, Triggers } from \"../Trigger\";\nimport { UserDefinedFunction, UserDefinedFunctions } from \"../UserDefinedFunction\";\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { Container } from \"../Container/Container\";\n\nexport class Scripts {\n  /**\n   * @param container - The parent {@link Container}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link StoredProcedure} by id.\n   *\n   * Use `.storedProcedures` for creating new stored procedures, or querying/reading all stored procedures.\n   * @param id - The id of the {@link StoredProcedure}.\n   */\n  public storedProcedure(id: string): StoredProcedure {\n    return new StoredProcedure(this.container, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Trigger} by id.\n   *\n   * Use `.triggers` for creating new triggers, or querying/reading all triggers.\n   * @param id - The id of the {@link Trigger}.\n   */\n  public trigger(id: string): Trigger {\n    return new Trigger(this.container, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link UserDefinedFunction} by id.\n   *\n   * Use `.userDefinedFunctions` for creating new user defined functions, or querying/reading all user defined functions.\n   * @param id - The id of the {@link UserDefinedFunction}.\n   */\n  public userDefinedFunction(id: string): UserDefinedFunction {\n    return new UserDefinedFunction(this.container, id, this.clientContext);\n  }\n\n  private $sprocs: StoredProcedures;\n  /**\n   * Operations for creating new stored procedures, and reading/querying all stored procedures.\n   *\n   * For reading, replacing, or deleting an existing stored procedure, use `.storedProcedure(id)`.\n   */\n  public get storedProcedures(): StoredProcedures {\n    if (!this.$sprocs) {\n      this.$sprocs = new StoredProcedures(this.container, this.clientContext);\n    }\n    return this.$sprocs;\n  }\n\n  private $triggers: Triggers;\n  /**\n   * Operations for creating new triggers, and reading/querying all triggers.\n   *\n   * For reading, replacing, or deleting an existing trigger, use `.trigger(id)`.\n   */\n  public get triggers(): Triggers {\n    if (!this.$triggers) {\n      this.$triggers = new Triggers(this.container, this.clientContext);\n    }\n    return this.$triggers;\n  }\n\n  private $udfs: UserDefinedFunctions;\n  /**\n   * Operations for creating new user defined functions, and reading/querying all user defined functions.\n   *\n   * For reading, replacing, or deleting an existing user defined function, use `.userDefinedFunction(id)`.\n   */\n  public get userDefinedFunctions(): UserDefinedFunctions {\n    if (!this.$udfs) {\n      this.$udfs = new UserDefinedFunctions(this.container, this.clientContext);\n    }\n    return this.$udfs;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,gBAAgB,EAAEC,eAAe,QAAQ,oBAAoB;AACtE,SAASC,OAAO,EAAEC,QAAQ,QAAQ,YAAY;AAC9C,SAASC,mBAAmB,EAAEC,oBAAoB,QAAQ,wBAAwB;AAIlF,OAAM,MAAOC,OAAO;EAClB;;;;EAIAC,YACkBC,SAAoB,EACnBC,aAA4B;IAD7B,KAAAD,SAAS,GAATA,SAAS;IACR,KAAAC,aAAa,GAAbA,aAAa;EAC7B;EAEH;;;;;;EAMOC,eAAeA,CAACC,EAAU;IAC/B,OAAO,IAAIV,eAAe,CAAC,IAAI,CAACO,SAAS,EAAEG,EAAE,EAAE,IAAI,CAACF,aAAa,CAAC;EACpE;EAEA;;;;;;EAMOG,OAAOA,CAACD,EAAU;IACvB,OAAO,IAAIT,OAAO,CAAC,IAAI,CAACM,SAAS,EAAEG,EAAE,EAAE,IAAI,CAACF,aAAa,CAAC;EAC5D;EAEA;;;;;;EAMOI,mBAAmBA,CAACF,EAAU;IACnC,OAAO,IAAIP,mBAAmB,CAAC,IAAI,CAACI,SAAS,EAAEG,EAAE,EAAE,IAAI,CAACF,aAAa,CAAC;EACxE;EAGA;;;;;EAKA,IAAWK,gBAAgBA,CAAA;IACzB,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAG,IAAIf,gBAAgB,CAAC,IAAI,CAACQ,SAAS,EAAE,IAAI,CAACC,aAAa,CAAC;IACzE;IACA,OAAO,IAAI,CAACM,OAAO;EACrB;EAGA;;;;;EAKA,IAAWC,QAAQA,CAAA;IACjB,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAG,IAAId,QAAQ,CAAC,IAAI,CAACK,SAAS,EAAE,IAAI,CAACC,aAAa,CAAC;IACnE;IACA,OAAO,IAAI,CAACQ,SAAS;EACvB;EAGA;;;;;EAKA,IAAWC,oBAAoBA,CAAA;IAC7B,IAAI,CAAC,IAAI,CAACC,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,GAAG,IAAId,oBAAoB,CAAC,IAAI,CAACG,SAAS,EAAE,IAAI,CAACC,aAAa,CAAC;IAC3E;IACA,OAAO,IAAI,CAACU,KAAK;EACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}