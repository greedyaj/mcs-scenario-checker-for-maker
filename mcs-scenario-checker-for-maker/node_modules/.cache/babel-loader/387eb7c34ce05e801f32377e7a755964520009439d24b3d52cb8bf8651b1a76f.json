{"ast":null,"code":"import { ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\n/**\n * Use to query or read all Offers.\n *\n * @see {@link Offer} to read or replace an existing {@link Offer} by id.\n */\nexport class Offers {\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the offers.\n   */\n  constructor(client, clientContext) {\n    this.client = client;\n    this.clientContext = clientContext;\n  }\n  query(query, options) {\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path: \"/offers\",\n        resourceType: ResourceType.offer,\n        resourceId: \"\",\n        resultFn: result => result.Offers,\n        query,\n        options: innerOptions,\n        diagnosticNode\n      });\n    });\n  }\n  /**\n   * Read all offers.\n   * @example Read all offers to array.\n   * ```typescript\n   * const {body: offerList} = await client.offers.readAll().fetchAll();\n   * ```\n   */\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n}","map":{"version":3,"names":["ResourceType","QueryIterator","Offers","constructor","client","clientContext","query","options","diagnosticNode","innerOptions","queryFeed","path","resourceType","offer","resourceId","resultFn","result","readAll","undefined"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/Offer/Offers.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport { ResourceType } from \"../../common\";\nimport type { CosmosClient } from \"../../CosmosClient\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { OfferDefinition } from \"./OfferDefinition\";\n\n/**\n * Use to query or read all Offers.\n *\n * @see {@link Offer} to read or replace an existing {@link Offer} by id.\n */\nexport class Offers {\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the offers.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all offers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all offers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed<T>({\n        path: \"/offers\",\n        resourceType: ResourceType.offer,\n        resourceId: \"\",\n        resultFn: (result) => result.Offers,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all offers.\n   * @example Read all offers to array.\n   * ```typescript\n   * const {body: offerList} = await client.offers.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<OfferDefinition & Resource> {\n    return this.query<OfferDefinition & Resource>(undefined, options);\n  }\n}\n"],"mappings":"AAGA,SAASA,YAAY,QAAQ,cAAc;AAG3C,SAASC,aAAa,QAAQ,qBAAqB;AAKnD;;;;;AAKA,OAAM,MAAOC,MAAM;EACjB;;;;EAIAC,YACkBC,MAAoB,EACnBC,aAA4B;IAD7B,KAAAD,MAAM,GAANA,MAAM;IACL,KAAAC,aAAa,GAAbA,aAAa;EAC7B;EAYIC,KAAKA,CAAIA,KAAmB,EAAEC,OAAqB;IACxD,OAAO,IAAIN,aAAa,CAAC,IAAI,CAACI,aAAa,EAAEC,KAAK,EAAEC,OAAO,EAAE,CAACC,cAAc,EAAEC,YAAY,KAAI;MAC5F,OAAO,IAAI,CAACJ,aAAa,CAACK,SAAS,CAAI;QACrCC,IAAI,EAAE,SAAS;QACfC,YAAY,EAAEZ,YAAY,CAACa,KAAK;QAChCC,UAAU,EAAE,EAAE;QACdC,QAAQ,EAAGC,MAAM,IAAKA,MAAM,CAACd,MAAM;QACnCI,KAAK;QACLC,OAAO,EAAEE,YAAY;QACrBD;OACD,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;;;;;;;EAOOS,OAAOA,CAACV,OAAqB;IAClC,OAAO,IAAI,CAACD,KAAK,CAA6BY,SAAS,EAAEX,OAAO,CAAC;EACnE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}