{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\nexport class QueryPreparationTimes {\n  constructor(queryCompilationTime, logicalPlanBuildTime, physicalPlanBuildTime, queryOptimizationTime) {\n    this.queryCompilationTime = queryCompilationTime;\n    this.logicalPlanBuildTime = logicalPlanBuildTime;\n    this.physicalPlanBuildTime = physicalPlanBuildTime;\n    this.queryOptimizationTime = queryOptimizationTime;\n  }\n  /**\n   * returns a new QueryPreparationTimes instance that is the addition of this and the arguments.\n   */\n  add(...queryPreparationTimesArray) {\n    let queryCompilationTime = this.queryCompilationTime;\n    let logicalPlanBuildTime = this.logicalPlanBuildTime;\n    let physicalPlanBuildTime = this.physicalPlanBuildTime;\n    let queryOptimizationTime = this.queryOptimizationTime;\n    for (const queryPreparationTimes of queryPreparationTimesArray) {\n      if (queryPreparationTimes == null) {\n        throw new Error(\"queryPreparationTimesArray has null or undefined item(s)\");\n      }\n      queryCompilationTime = queryCompilationTime.add(queryPreparationTimes.queryCompilationTime);\n      logicalPlanBuildTime = logicalPlanBuildTime.add(queryPreparationTimes.logicalPlanBuildTime);\n      physicalPlanBuildTime = physicalPlanBuildTime.add(queryPreparationTimes.physicalPlanBuildTime);\n      queryOptimizationTime = queryOptimizationTime.add(queryPreparationTimes.queryOptimizationTime);\n    }\n    return new QueryPreparationTimes(queryCompilationTime, logicalPlanBuildTime, physicalPlanBuildTime, queryOptimizationTime);\n  }\n  /**\n   * Output the QueryPreparationTimes as a delimited string.\n   */\n  toDelimitedString() {\n    return `${QueryMetricsConstants.QueryCompileTimeInMs}=${this.queryCompilationTime.totalMilliseconds()};` + `${QueryMetricsConstants.LogicalPlanBuildTimeInMs}=${this.logicalPlanBuildTime.totalMilliseconds()};` + `${QueryMetricsConstants.PhysicalPlanBuildTimeInMs}=${this.physicalPlanBuildTime.totalMilliseconds()};` + `${QueryMetricsConstants.QueryOptimizationTimeInMs}=${this.queryOptimizationTime.totalMilliseconds()}`;\n  }\n  /**\n   * Returns a new instance of the QueryPreparationTimes class that is the\n   * aggregation of an array of QueryPreparationTimes.\n   */\n  static createFromArray(queryPreparationTimesArray) {\n    if (queryPreparationTimesArray == null) {\n      throw new Error(\"queryPreparationTimesArray is null or undefined item(s)\");\n    }\n    return QueryPreparationTimes.zero.add(...queryPreparationTimesArray);\n  }\n  /**\n   * Returns a new instance of the QueryPreparationTimes class this is deserialized from a delimited string.\n   */\n  static createFromDelimitedString(delimitedString) {\n    const metrics = parseDelimitedString(delimitedString);\n    return new QueryPreparationTimes(timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryCompileTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.LogicalPlanBuildTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.PhysicalPlanBuildTimeInMs), timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryOptimizationTimeInMs));\n  }\n}\nQueryPreparationTimes.zero = new QueryPreparationTimes(TimeSpan.zero, TimeSpan.zero, TimeSpan.zero, TimeSpan.zero);","map":{"version":3,"names":["QueryMetricsConstants","parseDelimitedString","timeSpanFromMetrics","TimeSpan","QueryPreparationTimes","constructor","queryCompilationTime","logicalPlanBuildTime","physicalPlanBuildTime","queryOptimizationTime","add","queryPreparationTimesArray","queryPreparationTimes","Error","toDelimitedString","QueryCompileTimeInMs","totalMilliseconds","LogicalPlanBuildTimeInMs","PhysicalPlanBuildTimeInMs","QueryOptimizationTimeInMs","createFromArray","zero","createFromDelimitedString","delimitedString","metrics"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/queryMetrics/queryPreparationTime.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class QueryPreparationTimes {\n  constructor(\n    public readonly queryCompilationTime: TimeSpan,\n    public readonly logicalPlanBuildTime: TimeSpan,\n    public readonly physicalPlanBuildTime: TimeSpan,\n    public readonly queryOptimizationTime: TimeSpan,\n  ) {}\n\n  /**\n   * returns a new QueryPreparationTimes instance that is the addition of this and the arguments.\n   */\n  public add(...queryPreparationTimesArray: QueryPreparationTimes[]): QueryPreparationTimes {\n    let queryCompilationTime = this.queryCompilationTime;\n    let logicalPlanBuildTime = this.logicalPlanBuildTime;\n    let physicalPlanBuildTime = this.physicalPlanBuildTime;\n    let queryOptimizationTime = this.queryOptimizationTime;\n\n    for (const queryPreparationTimes of queryPreparationTimesArray) {\n      if (queryPreparationTimes == null) {\n        throw new Error(\"queryPreparationTimesArray has null or undefined item(s)\");\n      }\n\n      queryCompilationTime = queryCompilationTime.add(queryPreparationTimes.queryCompilationTime);\n      logicalPlanBuildTime = logicalPlanBuildTime.add(queryPreparationTimes.logicalPlanBuildTime);\n      physicalPlanBuildTime = physicalPlanBuildTime.add(\n        queryPreparationTimes.physicalPlanBuildTime,\n      );\n      queryOptimizationTime = queryOptimizationTime.add(\n        queryPreparationTimes.queryOptimizationTime,\n      );\n    }\n\n    return new QueryPreparationTimes(\n      queryCompilationTime,\n      logicalPlanBuildTime,\n      physicalPlanBuildTime,\n      queryOptimizationTime,\n    );\n  }\n\n  /**\n   * Output the QueryPreparationTimes as a delimited string.\n   */\n  public toDelimitedString(): string {\n    return (\n      `${\n        QueryMetricsConstants.QueryCompileTimeInMs\n      }=${this.queryCompilationTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.LogicalPlanBuildTimeInMs\n      }=${this.logicalPlanBuildTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.PhysicalPlanBuildTimeInMs\n      }=${this.physicalPlanBuildTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.QueryOptimizationTimeInMs\n      }=${this.queryOptimizationTime.totalMilliseconds()}`\n    );\n  }\n\n  public static readonly zero = new QueryPreparationTimes(\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n  );\n\n  /**\n   * Returns a new instance of the QueryPreparationTimes class that is the\n   * aggregation of an array of QueryPreparationTimes.\n   */\n  public static createFromArray(\n    queryPreparationTimesArray: QueryPreparationTimes[],\n  ): QueryPreparationTimes {\n    if (queryPreparationTimesArray == null) {\n      throw new Error(\"queryPreparationTimesArray is null or undefined item(s)\");\n    }\n\n    return QueryPreparationTimes.zero.add(...queryPreparationTimesArray);\n  }\n\n  /**\n   * Returns a new instance of the QueryPreparationTimes class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(delimitedString: string): QueryPreparationTimes {\n    const metrics = parseDelimitedString(delimitedString);\n\n    return new QueryPreparationTimes(\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryCompileTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.LogicalPlanBuildTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.PhysicalPlanBuildTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryOptimizationTimeInMs),\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}