{"ast":null,"code":"import { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { User } from \"./User\";\nimport { UserResponse } from \"./UserResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * Used to create, upsert, query, and read all users.\n *\n * @see {@link User} to read, replace, or delete a specific User by id.\n */\nexport class Users {\n  /**\n   * @hidden\n   * @param database - The parent {@link Database}.\n   */\n  constructor(database, clientContext) {\n    this.database = database;\n    this.clientContext = clientContext;\n  }\n  query(query, options) {\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        resultFn: result => result.Users,\n        query,\n        options: innerOptions,\n        diagnosticNode\n      });\n    });\n  }\n  /**\n   * Read all users.-\n   * @example Read all users to array.\n   * ```typescript\n   * const {body: usersList} = await database.users.readAll().fetchAll();\n   * ```\n   */\n  readAll(options) {\n    return this.query(undefined, options);\n  }\n  /**\n   * Create a database user with the specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition}.\n   */\n  async create(body, options) {\n    return withDiagnostics(async diagnosticNode => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.database.url, ResourceType.user);\n      const id = getIdFromLink(this.database.url);\n      const response = await this.clientContext.create({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      const ref = new User(this.database, response.result.id, this.clientContext);\n      return new UserResponse(response.result, response.headers, response.code, ref, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Upsert a database user with a specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition}.\n   */\n  async upsert(body, options) {\n    return withDiagnostics(async diagnosticNode => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.database.url, ResourceType.user);\n      const id = getIdFromLink(this.database.url);\n      const response = await this.clientContext.upsert({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      const ref = new User(this.database, response.result.id, this.clientContext);\n      return new UserResponse(response.result, response.headers, response.code, ref, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["getIdFromLink","getPathFromLink","isResourceValid","ResourceType","QueryIterator","User","UserResponse","getEmptyCosmosDiagnostics","withDiagnostics","Users","constructor","database","clientContext","query","options","path","url","user","id","diagnosticNode","innerOptions","queryFeed","resourceType","resourceId","resultFn","result","readAll","undefined","create","body","err","response","ref","headers","code","upsert"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/User/Users.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions } from \"../../request\";\nimport type { Database } from \"../Database\";\nimport type { Resource } from \"../Resource\";\nimport { User } from \"./User\";\nimport type { UserDefinition } from \"./UserDefinition\";\nimport { UserResponse } from \"./UserResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to create, upsert, query, and read all users.\n *\n * @see {@link User} to read, replace, or delete a specific User by id.\n */\nexport class Users {\n  /**\n   * @hidden\n   * @param database - The parent {@link Database}.\n   */\n  constructor(\n    public readonly database: Database,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all users.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all users.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        resultFn: (result) => result.Users,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all users.-\n   * @example Read all users to array.\n   * ```typescript\n   * const {body: usersList} = await database.users.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<UserDefinition & Resource> {\n    return this.query<UserDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a database user with the specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition}.\n   */\n  public async create(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.database.url, ResourceType.user);\n      const id = getIdFromLink(this.database.url);\n      const response = await this.clientContext.create<UserDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new User(this.database, response.result.id, this.clientContext);\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Upsert a database user with a specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition}.\n   */\n  public async upsert(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.database.url, ResourceType.user);\n      const id = getIdFromLink(this.database.url);\n\n      const response = await this.clientContext.upsert<UserDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new User(this.database, response.result.id, this.clientContext);\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}