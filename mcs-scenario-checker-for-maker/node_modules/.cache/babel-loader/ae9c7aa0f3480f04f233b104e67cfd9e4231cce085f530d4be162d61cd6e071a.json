{"ast":null,"code":"import { createUserUri, getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { Permission, Permissions } from \"../Permission\";\nimport { UserResponse } from \"./UserResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * Used to read, replace, and delete Users.\n *\n * Additionally, you can access the permissions for a given user via `user.permission` and `user.permissions`.\n *\n * @see {@link Users} to create, upsert, query, or read all.\n */\nexport class User {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  get url() {\n    return createUserUri(this.database.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param database - The parent {@link Database}.\n   */\n  constructor(database, id, clientContext) {\n    this.database = database;\n    this.id = id;\n    this.clientContext = clientContext;\n    this.permissions = new Permissions(this, this.clientContext);\n  }\n  /**\n   * Operations to read, replace, or delete a specific Permission by id.\n   *\n   * See `client.permissions` for creating, upserting, querying, or reading all operations.\n   */\n  permission(id) {\n    return new Permission(this, id, this.clientContext);\n  }\n  /**\n   * Read the {@link UserDefinition} for the given {@link User}.\n   */\n  async read(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.read({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new UserResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Replace the given {@link User}'s definition with the specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition} to replace the definition.\n   */\n  async replace(body, options) {\n    return withDiagnostics(async diagnosticNode => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.replace({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new UserResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n  /**\n   * Delete the given {@link User}.\n   */\n  async delete(options) {\n    return withDiagnostics(async diagnosticNode => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.delete({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode\n      });\n      return new UserResponse(response.result, response.headers, response.code, this, getEmptyCosmosDiagnostics());\n    }, this.clientContext);\n  }\n}","map":{"version":3,"names":["createUserUri","getIdFromLink","getPathFromLink","isResourceValid","ResourceType","Permission","Permissions","UserResponse","getEmptyCosmosDiagnostics","withDiagnostics","User","url","database","id","constructor","clientContext","permissions","permission","read","options","diagnosticNode","path","response","resourceType","user","resourceId","result","headers","code","replace","body","err","delete"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/User/User.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createUserUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport type { RequestOptions } from \"../../request\";\nimport type { Database } from \"../Database\";\nimport { Permission, Permissions } from \"../Permission\";\nimport type { UserDefinition } from \"./UserDefinition\";\nimport { UserResponse } from \"./UserResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to read, replace, and delete Users.\n *\n * Additionally, you can access the permissions for a given user via `user.permission` and `user.permissions`.\n *\n * @see {@link Users} to create, upsert, query, or read all.\n */\nexport class User {\n  /**\n   * Operations for creating, upserting, querying, or reading all operations.\n   *\n   * See `client.permission(id)` to read, replace, or delete a specific Permission by id.\n   */\n  public readonly permissions: Permissions;\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createUserUri(this.database.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param database - The parent {@link Database}.\n   */\n  constructor(\n    public readonly database: Database,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {\n    this.permissions = new Permissions(this, this.clientContext);\n  }\n\n  /**\n   * Operations to read, replace, or delete a specific Permission by id.\n   *\n   * See `client.permissions` for creating, upserting, querying, or reading all operations.\n   */\n  public permission(id: string): Permission {\n    return new Permission(this, id, this.clientContext);\n  }\n\n  /**\n   * Read the {@link UserDefinition} for the given {@link User}.\n   */\n  public async read(options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.read<UserDefinition>({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link User}'s definition with the specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition} to replace the definition.\n   */\n  public async replace(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<UserDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link User}.\n   */\n  public async delete(options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<UserDefinition>({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}