{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common\";\nimport { ConsistencyLevel } from \"./ConsistencyLevel\";\n/**\n * Represents a DatabaseAccount in the Azure Cosmos DB database service.\n */\nexport class DatabaseAccount {\n  /**\n   * The self-link for Databases in the databaseAccount.\n   * @deprecated Use `databasesLink`\n   */\n  get DatabasesLink() {\n    return this.databasesLink;\n  }\n  /**\n   * The self-link for Media in the databaseAccount.\n   * @deprecated Use `mediaLink`\n   */\n  get MediaLink() {\n    return this.mediaLink;\n  }\n  /**\n   * Attachment content (media) storage quota in MBs ( Retrieved from gateway ).\n   * @deprecated use `maxMediaStorageUsageInMB`\n   */\n  get MaxMediaStorageUsageInMB() {\n    return this.maxMediaStorageUsageInMB;\n  }\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   *\n   * @deprecated use `currentMediaStorageUsageInMB`\n   */\n  get CurrentMediaStorageUsageInMB() {\n    return this.currentMediaStorageUsageInMB;\n  }\n  /**\n   * Gets the UserConsistencyPolicy settings.\n   * @deprecated use `consistencyPolicy`\n   */\n  get ConsistencyPolicy() {\n    return this.consistencyPolicy;\n  }\n  // TODO: body - any\n  constructor(body, headers) {\n    /** The list of writable locations for a geo-replicated database account. */\n    this.writableLocations = [];\n    /** The list of readable locations for a geo-replicated database account. */\n    this.readableLocations = [];\n    this.databasesLink = \"/dbs/\";\n    this.mediaLink = \"/media/\";\n    this.maxMediaStorageUsageInMB = headers[Constants.HttpHeaders.MaxMediaStorageUsageInMB];\n    this.currentMediaStorageUsageInMB = headers[Constants.HttpHeaders.CurrentMediaStorageUsageInMB];\n    this.consistencyPolicy = body.userConsistencyPolicy ? body.userConsistencyPolicy.defaultConsistencyLevel : ConsistencyLevel.Session;\n    if (body[Constants.WritableLocations] && body.id !== \"localhost\") {\n      this.writableLocations = body[Constants.WritableLocations];\n    }\n    if (body[Constants.ReadableLocations] && body.id !== \"localhost\") {\n      this.readableLocations = body[Constants.ReadableLocations];\n    }\n    if (body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS]) {\n      this.enableMultipleWritableLocations = body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === true || body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === \"true\";\n    }\n  }\n}","map":{"version":3,"names":["Constants","ConsistencyLevel","DatabaseAccount","DatabasesLink","databasesLink","MediaLink","mediaLink","MaxMediaStorageUsageInMB","maxMediaStorageUsageInMB","CurrentMediaStorageUsageInMB","currentMediaStorageUsageInMB","ConsistencyPolicy","consistencyPolicy","constructor","body","headers","writableLocations","readableLocations","HttpHeaders","userConsistencyPolicy","defaultConsistencyLevel","Session","WritableLocations","id","ReadableLocations","ENABLE_MULTIPLE_WRITABLE_LOCATIONS","enableMultipleWritableLocations"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/documents/DatabaseAccount.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common\";\nimport type { CosmosHeaders } from \"../queryExecutionContext\";\nimport { ConsistencyLevel } from \"./ConsistencyLevel\";\n\n/**\n * Represents a DatabaseAccount in the Azure Cosmos DB database service.\n */\nexport class DatabaseAccount {\n  /** The list of writable locations for a geo-replicated database account. */\n  public readonly writableLocations: Location[] = [];\n  /** The list of readable locations for a geo-replicated database account. */\n  public readonly readableLocations: Location[] = [];\n  /**\n   * The self-link for Databases in the databaseAccount.\n   * @deprecated Use `databasesLink`\n   */\n  public get DatabasesLink(): string {\n    return this.databasesLink;\n  }\n  /** The self-link for Databases in the databaseAccount. */\n  public readonly databasesLink: string;\n  /**\n   * The self-link for Media in the databaseAccount.\n   * @deprecated Use `mediaLink`\n   */\n  public get MediaLink(): string {\n    return this.mediaLink;\n  }\n  /** The self-link for Media in the databaseAccount. */\n  public readonly mediaLink: string;\n  /**\n   * Attachment content (media) storage quota in MBs ( Retrieved from gateway ).\n   * @deprecated use `maxMediaStorageUsageInMB`\n   */\n  public get MaxMediaStorageUsageInMB(): number {\n    return this.maxMediaStorageUsageInMB;\n  }\n  /** Attachment content (media) storage quota in MBs ( Retrieved from gateway ). */\n  public readonly maxMediaStorageUsageInMB: number;\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   *\n   * @deprecated use `currentMediaStorageUsageInMB`\n   */\n  public get CurrentMediaStorageUsageInMB(): number {\n    return this.currentMediaStorageUsageInMB;\n  }\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   */\n  public readonly currentMediaStorageUsageInMB: number;\n  /**\n   * Gets the UserConsistencyPolicy settings.\n   * @deprecated use `consistencyPolicy`\n   */\n  public get ConsistencyPolicy(): ConsistencyLevel {\n    return this.consistencyPolicy;\n  }\n  /** Gets the UserConsistencyPolicy settings. */\n  public readonly consistencyPolicy: ConsistencyLevel;\n  public readonly enableMultipleWritableLocations: boolean;\n\n  // TODO: body - any\n  public constructor(body: { [key: string]: any }, headers: CosmosHeaders) {\n    this.databasesLink = \"/dbs/\";\n    this.mediaLink = \"/media/\";\n    this.maxMediaStorageUsageInMB = headers[Constants.HttpHeaders.MaxMediaStorageUsageInMB];\n    this.currentMediaStorageUsageInMB = headers[Constants.HttpHeaders.CurrentMediaStorageUsageInMB];\n    this.consistencyPolicy = body.userConsistencyPolicy\n      ? (body.userConsistencyPolicy.defaultConsistencyLevel as ConsistencyLevel)\n      : ConsistencyLevel.Session;\n    if (body[Constants.WritableLocations] && body.id !== \"localhost\") {\n      this.writableLocations = body[Constants.WritableLocations] as Location[];\n    }\n    if (body[Constants.ReadableLocations] && body.id !== \"localhost\") {\n      this.readableLocations = body[Constants.ReadableLocations] as Location[];\n    }\n    if (body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS]) {\n      this.enableMultipleWritableLocations =\n        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === true ||\n        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === \"true\";\n    }\n  }\n}\n\n/**\n * Used to specify the locations that are available, read is index 1 and write is index 0.\n */\nexport interface Location {\n  name: string;\n  databaseAccountEndpoint: string;\n  unavailable?: boolean;\n  lastUnavailabilityTimestampInMs?: number;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,QAAQ,WAAW;AAErC,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD;;;AAGA,OAAM,MAAOC,eAAe;EAK1B;;;;EAIA,IAAWC,aAAaA,CAAA;IACtB,OAAO,IAAI,CAACC,aAAa;EAC3B;EAGA;;;;EAIA,IAAWC,SAASA,CAAA;IAClB,OAAO,IAAI,CAACC,SAAS;EACvB;EAGA;;;;EAIA,IAAWC,wBAAwBA,CAAA;IACjC,OAAO,IAAI,CAACC,wBAAwB;EACtC;EAGA;;;;;;;;EAQA,IAAWC,4BAA4BA,CAAA;IACrC,OAAO,IAAI,CAACC,4BAA4B;EAC1C;EAQA;;;;EAIA,IAAWC,iBAAiBA,CAAA;IAC1B,OAAO,IAAI,CAACC,iBAAiB;EAC/B;EAKA;EACAC,YAAmBC,IAA4B,EAAEC,OAAsB;IA7DvE;IACgB,KAAAC,iBAAiB,GAAe,EAAE;IAClD;IACgB,KAAAC,iBAAiB,GAAe,EAAE;IA2DhD,IAAI,CAACb,aAAa,GAAG,OAAO;IAC5B,IAAI,CAACE,SAAS,GAAG,SAAS;IAC1B,IAAI,CAACE,wBAAwB,GAAGO,OAAO,CAACf,SAAS,CAACkB,WAAW,CAACX,wBAAwB,CAAC;IACvF,IAAI,CAACG,4BAA4B,GAAGK,OAAO,CAACf,SAAS,CAACkB,WAAW,CAACT,4BAA4B,CAAC;IAC/F,IAAI,CAACG,iBAAiB,GAAGE,IAAI,CAACK,qBAAqB,GAC9CL,IAAI,CAACK,qBAAqB,CAACC,uBAA4C,GACxEnB,gBAAgB,CAACoB,OAAO;IAC5B,IAAIP,IAAI,CAACd,SAAS,CAACsB,iBAAiB,CAAC,IAAIR,IAAI,CAACS,EAAE,KAAK,WAAW,EAAE;MAChE,IAAI,CAACP,iBAAiB,GAAGF,IAAI,CAACd,SAAS,CAACsB,iBAAiB,CAAe;IAC1E;IACA,IAAIR,IAAI,CAACd,SAAS,CAACwB,iBAAiB,CAAC,IAAIV,IAAI,CAACS,EAAE,KAAK,WAAW,EAAE;MAChE,IAAI,CAACN,iBAAiB,GAAGH,IAAI,CAACd,SAAS,CAACwB,iBAAiB,CAAe;IAC1E;IACA,IAAIV,IAAI,CAACd,SAAS,CAACyB,kCAAkC,CAAC,EAAE;MACtD,IAAI,CAACC,+BAA+B,GAClCZ,IAAI,CAACd,SAAS,CAACyB,kCAAkC,CAAC,KAAK,IAAI,IAC3DX,IAAI,CAACd,SAAS,CAACyB,kCAAkC,CAAC,KAAK,MAAM;IACjE;EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}