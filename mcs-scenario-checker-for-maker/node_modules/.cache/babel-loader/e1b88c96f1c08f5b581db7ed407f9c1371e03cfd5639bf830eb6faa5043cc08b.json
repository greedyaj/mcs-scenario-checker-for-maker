{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ErrorResponse } from \"../../request\";\n/*\n * Represents the change feed policy configuration for a container in the Azure Cosmos DB service.\n */\nexport class ChangeFeedRetentionTimeSpan {\n  /**\n   * @internal\n   */\n  constructor(minutes) {\n    if (typeof minutes !== \"number\") {\n      throw new ErrorResponse(\"ChangeFeedRetentionTimeSpan must be a number.\");\n    }\n    if (minutes < 0) {\n      throw new ErrorResponse(\"ChangeFeedRetentionTimeSpan must be a positive number.\");\n    }\n    if (minutes % 1 !== 0) {\n      throw new ErrorResponse(\"Retention's granularity is minutes.\");\n    }\n    this.retentionInMinutes = minutes;\n  }\n  /**\n   * Specifies the retention window in minutes for which processing the change feed with allVersionsAndDeletes mode will be available.\n   */\n  static fromMinutes(minutes) {\n    return new ChangeFeedRetentionTimeSpan(minutes);\n  }\n  /**\n   * @internal\n   */\n  getRetentionInMinutes() {\n    return this.retentionInMinutes;\n  }\n}","map":{"version":3,"names":["ErrorResponse","ChangeFeedRetentionTimeSpan","constructor","minutes","retentionInMinutes","fromMinutes","getRetentionInMinutes"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/client/ChangeFeed/ChangeFeedRetentionTimeSpan.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ErrorResponse } from \"../../request\";\n\n/*\n * Represents the change feed policy configuration for a container in the Azure Cosmos DB service.\n */\nexport class ChangeFeedRetentionTimeSpan {\n  private retentionInMinutes: number;\n  /**\n   * @internal\n   */\n  constructor(minutes: number) {\n    if (typeof minutes !== \"number\") {\n      throw new ErrorResponse(\"ChangeFeedRetentionTimeSpan must be a number.\");\n    }\n    if (minutes < 0) {\n      throw new ErrorResponse(\"ChangeFeedRetentionTimeSpan must be a positive number.\");\n    }\n    if (minutes % 1 !== 0) {\n      throw new ErrorResponse(\"Retention's granularity is minutes.\");\n    }\n    this.retentionInMinutes = minutes;\n  }\n  /**\n   * Specifies the retention window in minutes for which processing the change feed with allVersionsAndDeletes mode will be available.\n   */\n  static fromMinutes(minutes: number): ChangeFeedRetentionTimeSpan {\n    return new ChangeFeedRetentionTimeSpan(minutes);\n  }\n  /**\n   * @internal\n   */\n  public getRetentionInMinutes(): number {\n    return this.retentionInMinutes;\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,aAAa,QAAQ,eAAe;AAE7C;;;AAGA,OAAM,MAAOC,2BAA2B;EAEtC;;;EAGAC,YAAYC,OAAe;IACzB,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC/B,MAAM,IAAIH,aAAa,CAAC,+CAA+C,CAAC;IAC1E;IACA,IAAIG,OAAO,GAAG,CAAC,EAAE;MACf,MAAM,IAAIH,aAAa,CAAC,wDAAwD,CAAC;IACnF;IACA,IAAIG,OAAO,GAAG,CAAC,KAAK,CAAC,EAAE;MACrB,MAAM,IAAIH,aAAa,CAAC,qCAAqC,CAAC;IAChE;IACA,IAAI,CAACI,kBAAkB,GAAGD,OAAO;EACnC;EACA;;;EAGA,OAAOE,WAAWA,CAACF,OAAe;IAChC,OAAO,IAAIF,2BAA2B,CAACE,OAAO,CAAC;EACjD;EACA;;;EAGOG,qBAAqBA,CAAA;IAC1B,OAAO,IAAI,CAACF,kBAAkB;EAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}