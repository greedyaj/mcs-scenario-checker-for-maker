{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { PartitionKeyDefinitionVersion, PartitionKeyKind } from \"../../documents\";\nimport { hashMultiHashPartitionKey } from \"./multiHash\";\nimport { hashV1PartitionKey } from \"./v1\";\nimport { hashV2PartitionKey } from \"./v2\";\n/**\n * Generate hash of a PartitonKey based on it PartitionKeyDefinition.\n * @param partitionKey - to be hashed.\n * @param partitionDefinition - container's partitionKey definition\n * @returns\n */\nexport function hashPartitionKey(partitionKey, partitionDefinition) {\n  const kind = (partitionDefinition === null || partitionDefinition === void 0 ? void 0 : partitionDefinition.kind) || PartitionKeyKind.Hash; // Default value.\n  const isV2 = partitionDefinition && partitionDefinition.version && partitionDefinition.version === PartitionKeyDefinitionVersion.V2;\n  switch (kind) {\n    case PartitionKeyKind.Hash:\n      return isV2 ? hashV2PartitionKey(partitionKey) : hashV1PartitionKey(partitionKey);\n    case PartitionKeyKind.MultiHash:\n      return hashMultiHashPartitionKey(partitionKey);\n  }\n}","map":{"version":3,"names":["PartitionKeyDefinitionVersion","PartitionKeyKind","hashMultiHashPartitionKey","hashV1PartitionKey","hashV2PartitionKey","hashPartitionKey","partitionKey","partitionDefinition","kind","Hash","isV2","version","V2","MultiHash"],"sources":["/Users/ajitpawar/microsoft/bap/POCs/Scenario_checker_for_maker/mcs-scenario-checker-for-maker/node_modules/@azure/cosmos/src/utils/hashing/hash.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PartitionKeyDefinition, PrimitivePartitionKeyValue } from \"../../documents\";\nimport { PartitionKeyDefinitionVersion, PartitionKeyKind } from \"../../documents\";\nimport { hashMultiHashPartitionKey } from \"./multiHash\";\nimport { hashV1PartitionKey } from \"./v1\";\nimport { hashV2PartitionKey } from \"./v2\";\n\n/**\n * Generate hash of a PartitonKey based on it PartitionKeyDefinition.\n * @param partitionKey - to be hashed.\n * @param partitionDefinition - container's partitionKey definition\n * @returns\n */\nexport function hashPartitionKey(\n  partitionKey: PrimitivePartitionKeyValue[],\n  partitionDefinition: PartitionKeyDefinition,\n): string {\n  const kind: PartitionKeyKind = partitionDefinition?.kind || PartitionKeyKind.Hash; // Default value.\n  const isV2 =\n    partitionDefinition &&\n    partitionDefinition.version &&\n    partitionDefinition.version === PartitionKeyDefinitionVersion.V2;\n  switch (kind) {\n    case PartitionKeyKind.Hash:\n      return isV2 ? hashV2PartitionKey(partitionKey) : hashV1PartitionKey(partitionKey);\n    case PartitionKeyKind.MultiHash:\n      return hashMultiHashPartitionKey(partitionKey);\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,6BAA6B,EAAEC,gBAAgB,QAAQ,iBAAiB;AACjF,SAASC,yBAAyB,QAAQ,aAAa;AACvD,SAASC,kBAAkB,QAAQ,MAAM;AACzC,SAASC,kBAAkB,QAAQ,MAAM;AAEzC;;;;;;AAMA,OAAM,SAAUC,gBAAgBA,CAC9BC,YAA0C,EAC1CC,mBAA2C;EAE3C,MAAMC,IAAI,GAAqB,CAAAD,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEC,IAAI,KAAIP,gBAAgB,CAACQ,IAAI,CAAC,CAAC;EACnF,MAAMC,IAAI,GACRH,mBAAmB,IACnBA,mBAAmB,CAACI,OAAO,IAC3BJ,mBAAmB,CAACI,OAAO,KAAKX,6BAA6B,CAACY,EAAE;EAClE,QAAQJ,IAAI;IACV,KAAKP,gBAAgB,CAACQ,IAAI;MACxB,OAAOC,IAAI,GAAGN,kBAAkB,CAACE,YAAY,CAAC,GAAGH,kBAAkB,CAACG,YAAY,CAAC;IACnF,KAAKL,gBAAgB,CAACY,SAAS;MAC7B,OAAOX,yBAAyB,CAACI,YAAY,CAAC;EAClD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}